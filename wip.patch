diff --git a/prow/config/topology/single.json b/prow/config/topology/single.json
index a67792fb94..5db45248ea 100644
--- a/prow/config/topology/single.json
+++ b/prow/config/topology/single.json
@@ -1,9 +1,17 @@
-[
-  {
-    "kind": "Kubernetes",
-    "clusterName": "istio-testing",
-    "podSubnet": "10.10.0.0/16",
-    "svcSubnet": "10.255.10.0/24",
-    "network": "istio-testing"
-  }
-]
\ No newline at end of file
+- kind: Kubernetes
+  clusterName: istio-testing
+  meta:
+  kubeconfig: "~/.kube/config"
+- kind: StaticVM
+  clusterName: static-vm
+  meta:
+  instances:
+  - name: vm
+    namespace: echo
+    address: 172.17.0.4
+    ports:
+    - name:
+      protocol:
+      port:
+
+
diff --git a/tests/integration/pilot/common/apps.go b/tests/integration/pilot/common/apps.go
index 23e8741773..c32091999b 100644
--- a/tests/integration/pilot/common/apps.go
+++ b/tests/integration/pilot/common/apps.go
@@ -30,6 +30,7 @@ import (
 )
 
 type EchoDeployments struct {
+
 	// Namespace echo apps will be deployed
 	Namespace namespace.Instance
 	// Namespace where external echo app will be deployed
@@ -73,37 +74,111 @@ const (
 )
 
 var EchoPorts = []echo.Port{
-	{Name: "http", Protocol: protocol.HTTP, ServicePort: 80, InstancePort: 18080},
-	{Name: "grpc", Protocol: protocol.GRPC, ServicePort: 7070, InstancePort: 17070},
-	{Name: "tcp", Protocol: protocol.TCP, ServicePort: 9090, InstancePort: 19090},
-	{Name: "https", Protocol: protocol.HTTPS, ServicePort: 443, InstancePort: 18443, TLS: true},
-	{Name: "tcp-server", Protocol: protocol.TCP, ServicePort: 9091, InstancePort: 16060, ServerFirst: true},
-	{Name: "auto-tcp", Protocol: protocol.TCP, ServicePort: 9092, InstancePort: 19091},
-	{Name: "auto-tcp-server", Protocol: protocol.TCP, ServicePort: 9093, InstancePort: 16061, ServerFirst: true},
-	{Name: "auto-http", Protocol: protocol.HTTP, ServicePort: 81, InstancePort: 18081},
-	{Name: "auto-grpc", Protocol: protocol.GRPC, ServicePort: 7071, InstancePort: 17071},
-	{Name: "auto-https", Protocol: protocol.HTTPS, ServicePort: 9443, InstancePort: 19443},
-	{Name: "http-instance", Protocol: protocol.HTTP, ServicePort: 82, InstancePort: 18082, InstanceIP: true},
+
+	{
+		Name:         "http",
+		Protocol:     protocol.HTTP,
+		ServicePort:  80,
+		InstancePort: 18080,
+	},
+	{
+		Name:         "grpc",
+		Protocol:     protocol.GRPC,
+		ServicePort:  7070,
+		InstancePort: 17070,
+	},
+	{
+		Name:         "tcp",
+		Protocol:     protocol.TCP,
+		ServicePort:  9090,
+		InstancePort: 19090,
+	},
+	{
+		Name:         "https",
+		Protocol:     protocol.HTTPS,
+		ServicePort:  443,
+		InstancePort: 18443,
+		TLS:          true,
+	},
+	{
+		Name:         "tcp-server",
+		Protocol:     protocol.TCP,
+		ServicePort:  9091,
+		InstancePort: 16060,
+		ServerFirst:  true,
+	},
+	{
+		Name:         "auto-tcp",
+		Protocol:     protocol.TCP,
+		ServicePort:  9092,
+		InstancePort: 19091,
+	},
+	{
+		Name:         "auto-tcp-server",
+		Protocol:     protocol.TCP,
+		ServicePort:  9093,
+		InstancePort: 16061,
+		ServerFirst:  true,
+	},
+	{
+		Name:         "auto-http",
+		Protocol:     protocol.HTTP,
+		ServicePort:  81,
+		InstancePort: 18081,
+	},
+	{
+		Name:         "auto-grpc",
+		Protocol:     protocol.GRPC,
+		ServicePort:  7071,
+		InstancePort: 17071,
+	},
+	{
+		Name:         "auto-https",
+		Protocol:     protocol.HTTPS,
+		ServicePort:  9443,
+		InstancePort: 19443,
+	},
+	{
+		Name:         "http-instance",
+		Protocol:     protocol.HTTP,
+		ServicePort:  82,
+		InstancePort: 18082,
+		InstanceIP:   true,
+	},
 }
 
 var WorkloadPorts = []echo.WorkloadPort{
-	{Protocol: protocol.TCP, Port: 19092},
-	{Protocol: protocol.HTTP, Port: 18083},
+
+	{
+		Protocol: protocol.TCP, Port: 19092,
+	},
+
+	{
+		Protocol: protocol.HTTP, Port: 18083,
+	},
 }
 
 func FindPortByName(name string) echo.Port {
+
 	for _, p := range EchoPorts {
+
 		if p.Name == name {
+
 			return p
 		}
 	}
-	return echo.Port{}
+	return echo.Port{
+	}
 }
 
 func serviceEntryPorts() []echo.Port {
-	res := []echo.Port{}
+
+	res := []echo.Port{
+	}
 	for _, p := range EchoPorts {
+
 		if strings.HasPrefix(p.Name, "auto") {
+
 			// The protocol needs to be set in EchoPorts to configure the echo deployment
 			// But for service entry, we want to ensure we set it to "" which will use sniffing
 			p.Protocol = ""
@@ -114,19 +189,24 @@ func serviceEntryPorts() []echo.Port {
 }
 
 func SetupApps(ctx resource.Context, i istio.Instance, apps *EchoDeployments) error {
+
 	var err error
 	apps.Namespace, err = namespace.New(ctx, namespace.Config{
+
 		Prefix: "echo",
 		Inject: true,
 	})
 	if err != nil {
+
 		return err
 	}
 	apps.ExternalNamespace, err = namespace.New(ctx, namespace.Config{
+
 		Prefix: "external",
 		Inject: false,
 	})
 	if err != nil {
+
 		return err
 	}
 
@@ -135,96 +215,155 @@ func SetupApps(ctx resource.Context, i istio.Instance, apps *EchoDeployments) er
 	// Headless services don't work with targetPort, set to same port
 	headlessPorts := make([]echo.Port, len(EchoPorts))
 	for i, p := range EchoPorts {
+
 		p.ServicePort = p.InstancePort
 		headlessPorts[i] = p
 	}
 	builder := echoboot.NewBuilder(ctx).
 		WithClusters(ctx.Clusters()...).
 		WithConfig(echo.Config{
-			Service:           PodASvc,
-			Namespace:         apps.Namespace,
-			Ports:             EchoPorts,
-			Subsets:           []echo.SubsetConfig{{}},
+
+			Service:   PodASvc,
+			Namespace: apps.Namespace,
+			Ports:     EchoPorts,
+			Subsets: []echo.SubsetConfig{
+				{
+				},
+			},
+
 			Locality:          "region.zone.subzone",
 			WorkloadOnlyPorts: WorkloadPorts,
 		}).
 		WithConfig(echo.Config{
-			Service:           PodBSvc,
-			Namespace:         apps.Namespace,
-			Ports:             EchoPorts,
-			Subsets:           []echo.SubsetConfig{{}},
+
+			Service:   PodBSvc,
+			Namespace: apps.Namespace,
+			Ports:     EchoPorts,
+			Subsets: []echo.SubsetConfig{
+				{
+				},
+			},
+
 			WorkloadOnlyPorts: WorkloadPorts,
 		}).
 		WithConfig(echo.Config{
-			Service:           PodCSvc,
-			Namespace:         apps.Namespace,
-			Ports:             EchoPorts,
-			Subsets:           []echo.SubsetConfig{{}},
+
+			Service:   PodCSvc,
+			Namespace: apps.Namespace,
+			Ports:     EchoPorts,
+			Subsets: []echo.SubsetConfig{
+				{
+				},
+			},
+
 			WorkloadOnlyPorts: WorkloadPorts,
 		}).
 		WithConfig(echo.Config{
-			Service:           HeadlessSvc,
-			Headless:          true,
-			Namespace:         apps.Namespace,
-			Ports:             headlessPorts,
-			Subsets:           []echo.SubsetConfig{{}},
+
+			Service:   HeadlessSvc,
+			Headless:  true,
+			Namespace: apps.Namespace,
+			Ports:     headlessPorts,
+			Subsets: []echo.SubsetConfig{
+				{
+				},
+			},
+
 			WorkloadOnlyPorts: WorkloadPorts,
 		}).
 		WithConfig(echo.Config{
+
 			Service:   NakedSvc,
 			Namespace: apps.Namespace,
 			Ports:     EchoPorts,
 			Subsets: []echo.SubsetConfig{
+
 				{
+
 					Annotations: map[echo.Annotation]*echo.AnnotationValue{
+
 						echo.SidecarInject: {
-							Value: strconv.FormatBool(false)},
+
+							Value: strconv.FormatBool(false),
+						},
+
+						,
 					},
+
+					,
 				},
+
+				,
 			},
+
 			WorkloadOnlyPorts: WorkloadPorts,
 		}).
 		WithConfig(echo.Config{
+
 			Service:           ExternalSvc,
 			Namespace:         apps.ExternalNamespace,
 			DefaultHostHeader: externalHostname,
 			Ports:             EchoPorts,
 			Subsets: []echo.SubsetConfig{
+
 				{
+
 					Annotations: map[echo.Annotation]*echo.AnnotationValue{
+
 						echo.SidecarInject: {
-							Value: strconv.FormatBool(false)},
+
+							Value: strconv.FormatBool(false),
+						},
+
+						,
 					},
+
+					,
 				},
+
+				,
 			},
+
 			WorkloadOnlyPorts: WorkloadPorts,
 		}).
 		WithConfig(echo.Config{
+
 			Service:   PodTproxySvc,
 			Namespace: apps.Namespace,
 			Ports:     EchoPorts,
-			Subsets: []echo.SubsetConfig{{
-				Annotations: echo.NewAnnotations().Set(echo.SidecarInterceptionMode, "TPROXY"),
-			}},
+			Subsets: []echo.SubsetConfig{
+				{
+
+					Annotations: echo.NewAnnotations().Set(echo.SidecarInterceptionMode, "TPROXY"),
+				},
+			},
+
 			WorkloadOnlyPorts: WorkloadPorts,
 		})
 	if !ctx.Settings().SkipVM {
+
 		// It only makes sense to deploy echo VMs on a primary cluster.
 		// TODO in the future non-kube Cluster types will support VMs
 		builder = builder.WithClusters(ctx.Clusters().Primaries()...).
 			WithConfig(echo.Config{
-				Service:           VMSvc,
-				Namespace:         apps.Namespace,
-				Ports:             EchoPorts,
-				DeployAsVM:        true,
-				AutoRegisterVM:    true,
-				Subsets:           []echo.SubsetConfig{{}},
+
+				Service:        VMSvc,
+				Namespace:      apps.Namespace,
+				Ports:          EchoPorts,
+				DeployAsVM:     true,
+				AutoRegisterVM: true,
+				Subsets: []echo.SubsetConfig{
+					{
+					},
+				},
+
 				WorkloadOnlyPorts: WorkloadPorts,
 			})
 	}
 
 	echos, err := builder.Build()
 	if err != nil {
+
 		return err
 	}
 	apps.All = echos
@@ -236,6 +375,7 @@ func SetupApps(ctx resource.Context, i istio.Instance, apps *EchoDeployments) er
 	apps.Naked = echos.Match(echo.Service(NakedSvc))
 	apps.External = echos.Match(echo.Service(ExternalSvc))
 	if !ctx.Settings().SkipVM {
+
 		apps.VM = echos.Match(echo.Service(VMSvc))
 	}
 
@@ -250,6 +390,7 @@ spec:
     - "./*"
     - "istio-system/*"
 `); err != nil {
+
 		return err
 	}
 
@@ -259,11 +400,15 @@ metadata:
   name: external-service
 spec:
   hosts:
-  - {{.Hostname}}
+  - {
+{
+.Hostname}}
   location: MESH_EXTERNAL
   resolution: DNS
   endpoints:
-  - address: external.{{.Namespace}}.svc.cluster.local
+  - address: external.{
+{
+.Namespace}}.svc.cluster.local
   ports:
   - name: http-tls-origination
     number: 8888
@@ -273,21 +418,36 @@ spec:
     number: 8882
     protocol: http2
     targetPort: 443
-{{- range $i, $p := .Ports }}
-  - name: {{$p.Name}}
-    number: {{$p.ServicePort}}
-    protocol: "{{$p.Protocol}}"
-{{- end }}
-`, map[string]interface{}{"Namespace": apps.ExternalNamespace.Name(), "Hostname": externalHostname, "Ports": serviceEntryPorts()})
+{
+{
+- range $i, $p := .Ports }}
+  - name: {
+{
+$p.Name}}
+    number: {
+{
+$p.ServicePort}}
+    protocol: "{
+{
+$p.Protocol}}"
+{
+{
+- end }}
+`, map[string]interface {
+	}{
+		"Namespace": apps.ExternalNamespace.Name(), "Hostname": externalHostname, "Ports": serviceEntryPorts()})
 	if err != nil {
+
 		return err
 	}
 	if err := ctx.Config().ApplyYAML(apps.Namespace.Name(), se); err != nil {
+
 		return err
 	}
 	return nil
 }
 
 func (d EchoDeployments) IsMulticluster() bool {
+
 	return d.All.Clusters().IsMulticluster()
 }
