// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: serviceconfig.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	serviceconfig.proto

It has these top-level messages:
	ServiceConfig
	Rule
	Action
	Instance
	InstanceDecl
	Handler
*/
package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServiceConfig struct {
	Name      string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rules     []*Rule         `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	Instances []*InstanceDecl `protobuf:"bytes,3,rep,name=instances" json:"instances,omitempty"`
	Handlers  []*Handler      `protobuf:"bytes,4,rep,name=handlers" json:"handlers,omitempty"`
}

func (m *ServiceConfig) Reset()                    { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string            { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()               {}
func (*ServiceConfig) Descriptor() ([]byte, []int) { return fileDescriptorServiceconfig, []int{0} }

func (m *ServiceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceConfig) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ServiceConfig) GetInstances() []*InstanceDecl {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *ServiceConfig) GetHandlers() []*Handler {
	if m != nil {
		return m.Handlers
	}
	return nil
}

type Rule struct {
	Match   string    `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Actions []*Action `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptorServiceconfig, []int{1} }

func (m *Rule) GetMatch() string {
	if m != nil {
		return m.Match
	}
	return ""
}

func (m *Rule) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type Action struct {
	Handler   string      `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Instances []*Instance `protobuf:"bytes,3,rep,name=instances" json:"instances,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptorServiceconfig, []int{2} }

func (m *Action) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *Action) GetInstances() []*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type Instance struct {
	Ref      string                  `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Template string                  `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Params   interface{} `protobuf:"bytes,3,opt,name=params" json:"params,omitempty"`
}

func (m *Instance) Reset()                    { *m = Instance{} }
func (m *Instance) String() string            { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()               {}
func (*Instance) Descriptor() ([]byte, []int) { return fileDescriptorServiceconfig, []int{3} }

func (m *Instance) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Instance) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *Instance) GetParams() interface{} {
	if m != nil {
		return m.Params
	}
	return nil
}

type InstanceDecl struct {
	Name     string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Template string                  `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Params   interface{} `protobuf:"bytes,3,opt,name=params" json:"params,omitempty"`
}

func (m *InstanceDecl) Reset()                    { *m = InstanceDecl{} }
func (m *InstanceDecl) String() string            { return proto.CompactTextString(m) }
func (*InstanceDecl) ProtoMessage()               {}
func (*InstanceDecl) Descriptor() ([]byte, []int) { return fileDescriptorServiceconfig, []int{4} }

func (m *InstanceDecl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceDecl) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *InstanceDecl) GetParams() interface{} {
	if m != nil {
		return m.Params
	}
	return nil
}

type Handler struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Handler) Reset()                    { *m = Handler{} }
func (m *Handler) String() string            { return proto.CompactTextString(m) }
func (*Handler) ProtoMessage()               {}
func (*Handler) Descriptor() ([]byte, []int) { return fileDescriptorServiceconfig, []int{5} }

func (m *Handler) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceConfig)(nil), "istio.service.v1.ServiceConfig")
	proto.RegisterType((*Rule)(nil), "istio.service.v1.Rule")
	proto.RegisterType((*Action)(nil), "istio.service.v1.Action")
	proto.RegisterType((*Instance)(nil), "istio.service.v1.Instance")
	proto.RegisterType((*InstanceDecl)(nil), "istio.service.v1.InstanceDecl")
	proto.RegisterType((*Handler)(nil), "istio.service.v1.Handler")
}

func init() { proto.RegisterFile("serviceconfig.proto", fileDescriptorServiceconfig) }

var fileDescriptorServiceconfig = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x51, 0x3b, 0x4f, 0xeb, 0x30,
	0x14, 0x56, 0xfa, 0xee, 0xe9, 0xbd, 0x52, 0xe5, 0x7b, 0x05, 0xa1, 0xa2, 0x50, 0x65, 0xea, 0x80,
	0x1c, 0x51, 0x84, 0xc4, 0xc0, 0xc2, 0x63, 0x80, 0x0d, 0xa5, 0x1b, 0x62, 0x71, 0x8d, 0x9b, 0x5a,
	0x38, 0x71, 0x64, 0x3b, 0x95, 0xf8, 0x83, 0xfc, 0x2e, 0x54, 0xdb, 0x29, 0x15, 0x29, 0x1b, 0xdb,
	0x39, 0xc7, 0xdf, 0xc3, 0xe7, 0x7c, 0xf0, 0x4f, 0x33, 0xb5, 0xe6, 0x94, 0x51, 0x99, 0x2f, 0x79,
	0x8a, 0x0b, 0x25, 0x8d, 0x44, 0x43, 0xae, 0x0d, 0x97, 0xd8, 0x3f, 0xe1, 0xf5, 0xf9, 0xe8, 0x38,
	0x95, 0x32, 0x15, 0x2c, 0xb6, 0xef, 0x8b, 0x72, 0x19, 0x6b, 0xa3, 0x4a, 0x6a, 0x1c, 0x3e, 0xfa,
	0x08, 0xe0, 0xef, 0xdc, 0x81, 0xef, 0xac, 0x0e, 0x42, 0xd0, 0xca, 0x49, 0xc6, 0xc2, 0x60, 0x12,
	0x4c, 0xfb, 0x89, 0xad, 0xd1, 0x19, 0xb4, 0x55, 0x29, 0x98, 0x0e, 0x1b, 0x93, 0xe6, 0x74, 0x30,
	0x3b, 0xc0, 0xdf, 0x5d, 0x70, 0x52, 0x0a, 0x96, 0x38, 0x10, 0xba, 0x86, 0x3e, 0xcf, 0xb5, 0x21,
	0x39, 0x65, 0x3a, 0x6c, 0x5a, 0xc6, 0x49, 0x9d, 0xf1, 0xe8, 0x21, 0xf7, 0x8c, 0x8a, 0xe4, 0x8b,
	0x80, 0x2e, 0xa1, 0xb7, 0x22, 0xf9, 0xab, 0x60, 0x4a, 0x87, 0x2d, 0x4b, 0x3e, 0xaa, 0x93, 0x1f,
	0x1c, 0x22, 0xd9, 0x42, 0xa3, 0x27, 0x68, 0x6d, 0xfe, 0x80, 0xfe, 0x43, 0x3b, 0x23, 0x86, 0xae,
	0xfc, 0xff, 0x5d, 0x83, 0x66, 0xd0, 0x25, 0xd4, 0x70, 0x99, 0x57, 0x2b, 0x84, 0x75, 0xcd, 0x1b,
	0x0b, 0x48, 0x2a, 0x60, 0xf4, 0x02, 0x1d, 0x37, 0x42, 0x21, 0x74, 0xbd, 0x8f, 0x57, 0xad, 0x5a,
	0x74, 0x55, 0x5f, 0x75, 0xf4, 0xf3, 0xaa, 0x3b, 0x6b, 0x46, 0x1c, 0x7a, 0xd5, 0x18, 0x0d, 0xa1,
	0xa9, 0xd8, 0xd2, 0x6b, 0x6f, 0x4a, 0x34, 0x82, 0x9e, 0x61, 0x59, 0x21, 0x88, 0x61, 0x61, 0xc3,
	0x8e, 0xb7, 0x3d, 0x8a, 0xa1, 0x53, 0x10, 0x45, 0xb2, 0x8d, 0x61, 0x30, 0x1d, 0xcc, 0x0e, 0xb1,
	0x4b, 0x18, 0x57, 0x09, 0xe3, 0xb9, 0x4d, 0x38, 0xf1, 0xb0, 0x48, 0xc2, 0x9f, 0xdd, 0x63, 0xef,
	0x4d, 0xf8, 0x57, 0x0d, 0xc7, 0xd0, 0xf5, 0x01, 0xed, 0xf3, 0xba, 0x3d, 0x7d, 0x1e, 0xbb, 0x13,
	0x71, 0x19, 0xdb, 0x22, 0x4e, 0x89, 0x10, 0xec, 0x3d, 0x2e, 0xde, 0xd2, 0x98, 0x14, 0x7c, 0xd1,
	0xb1, 0xc2, 0x17, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x0d, 0x59, 0x58, 0xe2, 0x02, 0x00,
	0x00,
}
