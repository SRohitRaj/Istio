// Code generated by go-bindata. DO NOT EDIT.
// sources:
// basicmeta.yaml (1.019kB)
// basicmeta2.yaml (1.446kB)

package basicmeta

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _basicmetaYaml = []byte(`# Copyright 2019 Istio Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in conformance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


collections:
  - name: "k8s/collection1"
    kind: "Kind1"
    group: "testdata.istio.io"

  - name: "collection2"
    kind: "Kind1"
    group: "testdata.istio.io"

resources:
  - kind: "Kind1"
    plural: "Kind1s"
    group: "testdata.istio.io"
    version: "v1alpha1"
    proto: "google.protobuf.Struct"
    protoPackage: "github.com/gogo/protobuf/types"

transforms:
  - type: direct
    mapping:
      "k8s/collection1": "collection2"
`)

func basicmetaYamlBytes() ([]byte, error) {
	return _basicmetaYaml, nil
}

func basicmetaYaml() (*asset, error) {
	bytes, err := basicmetaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "basicmeta.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0x1e, 0xff, 0x41, 0x39, 0x13, 0x89, 0x18, 0xa8, 0x81, 0x40, 0x89, 0x6e, 0x8, 0x2a, 0xb1, 0x98, 0xf9, 0x37, 0xf3, 0xe2, 0x82, 0x3b, 0xc8, 0x42, 0x1, 0x2, 0x7d, 0x1c, 0xdf, 0xe0, 0x8d}}
	return a, nil
}

var _basicmeta2Yaml = []byte(`# Copyright 2019 Istio Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in conformance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

collections:
  - name: "k8s/collection1"
    kind: "Kind1"
    group: "testdata.istio.io"

  - name: "collection1out"
    kind: "Kind1"
    group: "testdata.istio.io"

  - name: "k8s/collection2"
    kind: "Kind2"
    group: "testdata.istio.io"

  - name: "collection2out"
    kind: "Kind2"
    group: "testdata.istio.io"

resources:
  - kind: "Kind1"
    plural: "Kind1s"
    group: "testdata.istio.io"
    version: "v1alpha1"
    proto: "google.protobuf.Struct"
    protoPackage: "github.com/gogo/protobuf/types"

  - kind: "Kind2"
    plural: "Kind2s"
    group: "testdata.istio.io"
    version: "v1alpha1"
    optional: true
    clusterScoped: true
    proto: "google.protobuf.Struct"
    protoPackage: "github.com/gogo/protobuf/types"

transforms:
  - type: direct
    mapping:
      "k8s/collection1": "collection1out"
      "k8s/collection2": "collection2out"
`)

func basicmeta2YamlBytes() ([]byte, error) {
	return _basicmeta2Yaml, nil
}

func basicmeta2Yaml() (*asset, error) {
	bytes, err := basicmeta2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "basicmeta2.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x19, 0xb9, 0xb6, 0x5b, 0x55, 0xb0, 0xd6, 0x98, 0x66, 0xc4, 0xa4, 0xb6, 0xf3, 0x63, 0xc8, 0x61, 0x8b, 0x80, 0x2f, 0x6e, 0x91, 0x46, 0x3a, 0xce, 0xe7, 0x81, 0xc0, 0xe0, 0x9d, 0x5f, 0x82}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"basicmeta.yaml": basicmetaYaml,

	"basicmeta2.yaml": basicmeta2Yaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"basicmeta.yaml":  &bintree{basicmetaYaml, map[string]*bintree{}},
	"basicmeta2.yaml": &bintree{basicmeta2Yaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
