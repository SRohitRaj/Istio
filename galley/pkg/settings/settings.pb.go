// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settings.proto

/*
Package settings is a generated protocol buffer package.

It is generated from these files:
	settings.proto

It has these top-level messages:
	Galley
	General
	Introspection
	Validation
	Processing
	Source
	Server
	AuthProvider
	InsecureAuthProvider
	MTLSAuthProvider
	KubernetesSource
	FilesystemSource
	TLS
	Probe
*/
package settings

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Settings for running Galley. Galley expects a yaml file of this proto for its config-file command line
// option.
type Galley struct {
	// General settings
	General General `protobuf:"bytes,1,opt,name=general" json:"general"`
	// Validation related settings
	Validation Validation `protobuf:"bytes,2,opt,name=validation" json:"validation"`
	// Config processing related settings
	Processing Processing `protobuf:"bytes,3,opt,name=processing" json:"processing"`
}

func (m *Galley) Reset()                    { *m = Galley{} }
func (m *Galley) String() string            { return proto.CompactTextString(m) }
func (*Galley) ProtoMessage()               {}
func (*Galley) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{0} }

func (m *Galley) GetGeneral() General {
	if m != nil {
		return m.General
	}
	return General{}
}

func (m *Galley) GetValidation() Validation {
	if m != nil {
		return m.Validation
	}
	return Validation{}
}

func (m *Galley) GetProcessing() Processing {
	if m != nil {
		return m.Processing
	}
	return Processing{}
}

// General settings that apply to the whole process or to multiple sub-components.
type General struct {
	// Port for exposing self-monitoring information.
	// Defaults to 9093
	MonitoringPort uint32 `protobuf:"varint,1,opt,name=monitoring_port,json=monitoringPort,proto3" json:"monitoring_port,omitempty"`
	// Port for exposing profiling
	// Defaults to 9094
	PprofPort int32 `protobuf:"varint,2,opt,name=pprof_port,json=pprofPort,proto3" json:"pprof_port,omitempty"`
	// Enable profiling for Galley
	// Defaults to false
	EnableProfiling bool `protobuf:"varint,3,opt,name=enable_profiling,json=enableProfiling,proto3" json:"enable_profiling,omitempty"`
	// The path to the Mesh config file. If the file is not found, default Mesh config values are used.
	// Defaults to "/etc/mesh-config/mesh".
	MeshConfigFile string `protobuf:"bytes,4,opt,name=mesh_config_file,json=meshConfigFile,proto3" json:"mesh_config_file,omitempty"`
	// Path to the kube config file to use. If not specified, then in-cluster configuration will be used.
	// Defaults to in-cluster configuration.
	KubeConfig string `protobuf:"bytes,5,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config,omitempty"`
	// Liveness probe related settings
	Liveness Probe `protobuf:"bytes,6,opt,name=liveness" json:"liveness"`
	// Readiness probe related settings
	Readiness Probe `protobuf:"bytes,7,opt,name=readiness" json:"readiness"`
	// Introspection options
	Introspection Introspection `protobuf:"bytes,8,opt,name=introspection" json:"introspection"`
}

func (m *General) Reset()                    { *m = General{} }
func (m *General) String() string            { return proto.CompactTextString(m) }
func (*General) ProtoMessage()               {}
func (*General) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{1} }

func (m *General) GetMonitoringPort() uint32 {
	if m != nil {
		return m.MonitoringPort
	}
	return 0
}

func (m *General) GetPprofPort() int32 {
	if m != nil {
		return m.PprofPort
	}
	return 0
}

func (m *General) GetEnableProfiling() bool {
	if m != nil {
		return m.EnableProfiling
	}
	return false
}

func (m *General) GetMeshConfigFile() string {
	if m != nil {
		return m.MeshConfigFile
	}
	return ""
}

func (m *General) GetKubeConfig() string {
	if m != nil {
		return m.KubeConfig
	}
	return ""
}

func (m *General) GetLiveness() Probe {
	if m != nil {
		return m.Liveness
	}
	return Probe{}
}

func (m *General) GetReadiness() Probe {
	if m != nil {
		return m.Readiness
	}
	return Probe{}
}

func (m *General) GetIntrospection() Introspection {
	if m != nil {
		return m.Introspection
	}
	return Introspection{}
}

// Introspection (CtrlZ) related settings
type Introspection struct {
	// Indicates that introspection should be disabled.
	// Defaults to false
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// The IP port to use for ctrlz.
	// Defaults to 9876
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The IP address to listen on for ctrlz.
	// Defaults to 127.0.0.1
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Introspection) Reset()                    { *m = Introspection{} }
func (m *Introspection) String() string            { return proto.CompactTextString(m) }
func (*Introspection) ProtoMessage()               {}
func (*Introspection) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{2} }

func (m *Introspection) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Introspection) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Introspection) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Validation related settings
type Validation struct {
	// Disable the validation service.
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// WebhookConfigFile is the path to the validatingwebhookconfiguration
	// file that should be used for self-registration.
	// Defaults to /etc/config/validatingwebhookconfiguration.yaml
	WebhookConfigFile string `protobuf:"bytes,2,opt,name=webhook_config_file,json=webhookConfigFile,proto3" json:"webhook_config_file,omitempty"`
	// Port where the webhook is served. Per k8s admission registration requirements this should be 443 unless
	// there is only a single port for the service.
	// Defaults to 443.
	WebhookPort uint32 `protobuf:"varint,3,opt,name=webhook_port,json=webhookPort,proto3" json:"webhook_port,omitempty"`
	// Name of the k8s validatingwebhookconfiguration resource to create.
	// Defaults to "istio-galley".
	WebhookName string `protobuf:"bytes,4,opt,name=webhook_name,json=webhookName,proto3" json:"webhook_name,omitempty"`
	// The namespace in which the validation deployment and service resides.
	// Defaults to  "istio-system".
	DeploymentNamespace string `protobuf:"bytes,5,opt,name=deployment_namespace,json=deploymentNamespace,proto3" json:"deployment_namespace,omitempty"`
	// The name of the validation deployment. This, along with deployment_namespace, is used to set the
	// ownerReference in the validatingwebhookconfiguration. This enables k8s to clean-up the cluster-scoped
	// validatingwebhookconfiguration when the deployment is deleted.
	// Defaults to "istio-galley"
	DeploymentName string `protobuf:"bytes,6,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// The name of the k8s service of the validation webhook. This is used to verify endpoint readiness before
	// registering the validatingwebhookconfiguration.
	// Defaults to "istio-galley"
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// TLS settings for validation webhook service.
	Tls TLS `protobuf:"bytes,8,opt,name=tls" json:"tls"`
}

func (m *Validation) Reset()                    { *m = Validation{} }
func (m *Validation) String() string            { return proto.CompactTextString(m) }
func (*Validation) ProtoMessage()               {}
func (*Validation) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{3} }

func (m *Validation) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Validation) GetWebhookConfigFile() string {
	if m != nil {
		return m.WebhookConfigFile
	}
	return ""
}

func (m *Validation) GetWebhookPort() uint32 {
	if m != nil {
		return m.WebhookPort
	}
	return 0
}

func (m *Validation) GetWebhookName() string {
	if m != nil {
		return m.WebhookName
	}
	return ""
}

func (m *Validation) GetDeploymentNamespace() string {
	if m != nil {
		return m.DeploymentNamespace
	}
	return ""
}

func (m *Validation) GetDeploymentName() string {
	if m != nil {
		return m.DeploymentName
	}
	return ""
}

func (m *Validation) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Validation) GetTls() TLS {
	if m != nil {
		return m.Tls
	}
	return TLS{}
}

// Config processing related settings
type Processing struct {
	// Settings for the upstream configuration source
	Source Source `protobuf:"bytes,2,opt,name=source" json:"source"`
	// Settings for the MCP Service
	Server Server `protobuf:"bytes,3,opt,name=server" json:"server"`
	// DNS Domain suffix to use while constructing Ingress based resources.
	// Defaults to "cluster.local"
	DomainSuffix string `protobuf:"bytes,5,opt,name=domain_suffix,json=domainSuffix,proto3" json:"domain_suffix,omitempty"`
}

func (m *Processing) Reset()                    { *m = Processing{} }
func (m *Processing) String() string            { return proto.CompactTextString(m) }
func (*Processing) ProtoMessage()               {}
func (*Processing) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{4} }

func (m *Processing) GetSource() Source {
	if m != nil {
		return m.Source
	}
	return Source{}
}

func (m *Processing) GetServer() Server {
	if m != nil {
		return m.Server
	}
	return Server{}
}

func (m *Processing) GetDomainSuffix() string {
	if m != nil {
		return m.DomainSuffix
	}
	return ""
}

type Source struct {
	// Types that are valid to be assigned to Source:
	//	*Source_Kubernetes
	//	*Source_Filesystem
	Source isSource_Source `protobuf_oneof:"source"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{5} }

type isSource_Source interface {
	isSource_Source()
}

type Source_Kubernetes struct {
	Kubernetes *KubernetesSource `protobuf:"bytes,1,opt,name=kubernetes,oneof"`
}
type Source_Filesystem struct {
	Filesystem *FilesystemSource `protobuf:"bytes,2,opt,name=filesystem,oneof"`
}

func (*Source_Kubernetes) isSource_Source() {}
func (*Source_Filesystem) isSource_Source() {}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetKubernetes() *KubernetesSource {
	if x, ok := m.GetSource().(*Source_Kubernetes); ok {
		return x.Kubernetes
	}
	return nil
}

func (m *Source) GetFilesystem() *FilesystemSource {
	if x, ok := m.GetSource().(*Source_Filesystem); ok {
		return x.Filesystem
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Source) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Source_OneofMarshaler, _Source_OneofUnmarshaler, _Source_OneofSizer, []interface{}{
		(*Source_Kubernetes)(nil),
		(*Source_Filesystem)(nil),
	}
}

func _Source_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_Kubernetes:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Kubernetes); err != nil {
			return err
		}
	case *Source_Filesystem:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Filesystem); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Source.Source has unexpected type %T", x)
	}
	return nil
}

func _Source_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Source)
	switch tag {
	case 1: // source.kubernetes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubernetesSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_Kubernetes{msg}
		return true, err
	case 2: // source.filesystem
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilesystemSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_Filesystem{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Source_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_Kubernetes:
		s := proto.Size(x.Kubernetes)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Source_Filesystem:
		s := proto.Size(x.Filesystem)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Server struct {
	// Disable the server
	// Defaults to false
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// Address to use for Galley's gRPC API, e.g. tcp://127.0.0.1:9092 or unix:///path/to/file
	// Defaults to tcp://0.0.0.0:9901.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Maximum size of individual gRPC messages
	// Defaults to 1024 * 1024.
	MaxReceivedMessageSize uint32 `protobuf:"varint,3,opt,name=max_received_message_size,json=maxReceivedMessageSize,proto3" json:"max_received_message_size,omitempty"`
	// Maximum number of outstanding RPCs per connection
	// Defaults to 1024.
	MaxConcurrentStreams uint32 `protobuf:"varint,4,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
	// Enable gRPC tracing.
	// Defaults to false
	GrpcTracing bool `protobuf:"varint,5,opt,name=grpc_tracing,json=grpcTracing,proto3" json:"grpc_tracing,omitempty"`
	// Disable resource readiness checks. This allows Galley to start if not all resource types are supported
	// Defaults to false
	DisableResourceReadyCheck bool `protobuf:"varint,6,opt,name=disable_resource_ready_check,json=disableResourceReadyCheck,proto3" json:"disable_resource_ready_check,omitempty"`
	// Auth settings for the main MCP Server.
	Auth AuthProvider `protobuf:"bytes,7,opt,name=auth" json:"auth"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{6} }

func (m *Server) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Server) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Server) GetMaxReceivedMessageSize() uint32 {
	if m != nil {
		return m.MaxReceivedMessageSize
	}
	return 0
}

func (m *Server) GetMaxConcurrentStreams() uint32 {
	if m != nil {
		return m.MaxConcurrentStreams
	}
	return 0
}

func (m *Server) GetGrpcTracing() bool {
	if m != nil {
		return m.GrpcTracing
	}
	return false
}

func (m *Server) GetDisableResourceReadyCheck() bool {
	if m != nil {
		return m.DisableResourceReadyCheck
	}
	return false
}

func (m *Server) GetAuth() AuthProvider {
	if m != nil {
		return m.Auth
	}
	return AuthProvider{}
}

// AuthProvider settings
type AuthProvider struct {
	// Types that are valid to be assigned to Provider:
	//	*AuthProvider_Insecure
	//	*AuthProvider_Mtls
	Provider isAuthProvider_Provider `protobuf_oneof:"provider"`
}

func (m *AuthProvider) Reset()                    { *m = AuthProvider{} }
func (m *AuthProvider) String() string            { return proto.CompactTextString(m) }
func (*AuthProvider) ProtoMessage()               {}
func (*AuthProvider) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{7} }

type isAuthProvider_Provider interface {
	isAuthProvider_Provider()
}

type AuthProvider_Insecure struct {
	Insecure *InsecureAuthProvider `protobuf:"bytes,1,opt,name=insecure,oneof"`
}
type AuthProvider_Mtls struct {
	Mtls *MTLSAuthProvider `protobuf:"bytes,2,opt,name=mtls,oneof"`
}

func (*AuthProvider_Insecure) isAuthProvider_Provider() {}
func (*AuthProvider_Mtls) isAuthProvider_Provider()     {}

func (m *AuthProvider) GetProvider() isAuthProvider_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *AuthProvider) GetInsecure() *InsecureAuthProvider {
	if x, ok := m.GetProvider().(*AuthProvider_Insecure); ok {
		return x.Insecure
	}
	return nil
}

func (m *AuthProvider) GetMtls() *MTLSAuthProvider {
	if x, ok := m.GetProvider().(*AuthProvider_Mtls); ok {
		return x.Mtls
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AuthProvider) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AuthProvider_OneofMarshaler, _AuthProvider_OneofUnmarshaler, _AuthProvider_OneofSizer, []interface{}{
		(*AuthProvider_Insecure)(nil),
		(*AuthProvider_Mtls)(nil),
	}
}

func _AuthProvider_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AuthProvider)
	// provider
	switch x := m.Provider.(type) {
	case *AuthProvider_Insecure:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Insecure); err != nil {
			return err
		}
	case *AuthProvider_Mtls:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mtls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AuthProvider.Provider has unexpected type %T", x)
	}
	return nil
}

func _AuthProvider_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AuthProvider)
	switch tag {
	case 1: // provider.insecure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InsecureAuthProvider)
		err := b.DecodeMessage(msg)
		m.Provider = &AuthProvider_Insecure{msg}
		return true, err
	case 2: // provider.mtls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MTLSAuthProvider)
		err := b.DecodeMessage(msg)
		m.Provider = &AuthProvider_Mtls{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AuthProvider_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AuthProvider)
	// provider
	switch x := m.Provider.(type) {
	case *AuthProvider_Insecure:
		s := proto.Size(x.Insecure)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AuthProvider_Mtls:
		s := proto.Size(x.Mtls)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InsecureAuthProvider struct {
}

func (m *InsecureAuthProvider) Reset()                    { *m = InsecureAuthProvider{} }
func (m *InsecureAuthProvider) String() string            { return proto.CompactTextString(m) }
func (*InsecureAuthProvider) ProtoMessage()               {}
func (*InsecureAuthProvider) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{8} }

type MTLSAuthProvider struct {
	// The path to the x509 certificate for https.
	// Defaults to "/etc/certs/cert-chain.pem"
	ClientCertificate string `protobuf:"bytes,1,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	// The path to the x509 private key matching `tls_cert_file`.
	// Defaults to "/etc/certs/key.pem"
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// The path to the x509 CA bundle file.
	// Defaults to "/etc/certs/root-cert.pem"
	CaCertificates string `protobuf:"bytes,3,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	// Optional whitelisting file for SPIFFE IDs. If the file is not found, then all incoming connections are
	// allowed.
	// Defaults to fail open.
	AccessListFile string `protobuf:"bytes,4,opt,name=access_list_file,json=accessListFile,proto3" json:"access_list_file,omitempty"`
}

func (m *MTLSAuthProvider) Reset()                    { *m = MTLSAuthProvider{} }
func (m *MTLSAuthProvider) String() string            { return proto.CompactTextString(m) }
func (*MTLSAuthProvider) ProtoMessage()               {}
func (*MTLSAuthProvider) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{9} }

func (m *MTLSAuthProvider) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *MTLSAuthProvider) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *MTLSAuthProvider) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *MTLSAuthProvider) GetAccessListFile() string {
	if m != nil {
		return m.AccessListFile
	}
	return ""
}

type KubernetesSource struct {
	// Resync period for rescanning Kubernetes resources
	ResyncPeriod *google_protobuf.Duration `protobuf:"bytes,1,opt,name=resync_period,json=resyncPeriod" json:"resync_period,omitempty"`
}

func (m *KubernetesSource) Reset()                    { *m = KubernetesSource{} }
func (m *KubernetesSource) String() string            { return proto.CompactTextString(m) }
func (*KubernetesSource) ProtoMessage()               {}
func (*KubernetesSource) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{10} }

func (m *KubernetesSource) GetResyncPeriod() *google_protobuf.Duration {
	if m != nil {
		return m.ResyncPeriod
	}
	return nil
}

type FilesystemSource struct {
	// Path to a folder that contains file-based configuration for Istio.
	// Required
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *FilesystemSource) Reset()                    { *m = FilesystemSource{} }
func (m *FilesystemSource) String() string            { return proto.CompactTextString(m) }
func (*FilesystemSource) ProtoMessage()               {}
func (*FilesystemSource) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{11} }

func (m *FilesystemSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// TLS specific common settings
type TLS struct {
	// The path to the x509 certificate for https.
	// Defaults to "/etc/certs/cert-chain.pem"
	ClientCertificate string `protobuf:"bytes,1,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	// The path to the x509 private key matching `tls_cert_file`.
	// Defaults to "/etc/certs/key.pem"
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// CACertFile is the path to the x509 CA bundle file.
	// Defaults to "/etc/certs/root-cert.pem"
	CaCertificates string `protobuf:"bytes,3,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
}

func (m *TLS) Reset()                    { *m = TLS{} }
func (m *TLS) String() string            { return proto.CompactTextString(m) }
func (*TLS) ProtoMessage()               {}
func (*TLS) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{12} }

func (m *TLS) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *TLS) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLS) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

// Liveness/Readiness probe specific settings.
type Probe struct {
	// Disable the probe
	// Defaults to false
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// The path to the file used for the existence.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The interval for updating the file's last modified
	// time.
	Interval *google_protobuf.Duration `protobuf:"bytes,3,opt,name=interval" json:"interval,omitempty"`
}

func (m *Probe) Reset()                    { *m = Probe{} }
func (m *Probe) String() string            { return proto.CompactTextString(m) }
func (*Probe) ProtoMessage()               {}
func (*Probe) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{13} }

func (m *Probe) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Probe) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Probe) GetInterval() *google_protobuf.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func init() {
	proto.RegisterType((*Galley)(nil), "istio.galley.settings.Galley")
	proto.RegisterType((*General)(nil), "istio.galley.settings.General")
	proto.RegisterType((*Introspection)(nil), "istio.galley.settings.Introspection")
	proto.RegisterType((*Validation)(nil), "istio.galley.settings.Validation")
	proto.RegisterType((*Processing)(nil), "istio.galley.settings.Processing")
	proto.RegisterType((*Source)(nil), "istio.galley.settings.Source")
	proto.RegisterType((*Server)(nil), "istio.galley.settings.Server")
	proto.RegisterType((*AuthProvider)(nil), "istio.galley.settings.AuthProvider")
	proto.RegisterType((*InsecureAuthProvider)(nil), "istio.galley.settings.InsecureAuthProvider")
	proto.RegisterType((*MTLSAuthProvider)(nil), "istio.galley.settings.MTLSAuthProvider")
	proto.RegisterType((*KubernetesSource)(nil), "istio.galley.settings.KubernetesSource")
	proto.RegisterType((*FilesystemSource)(nil), "istio.galley.settings.FilesystemSource")
	proto.RegisterType((*TLS)(nil), "istio.galley.settings.TLS")
	proto.RegisterType((*Probe)(nil), "istio.galley.settings.Probe")
}

func init() { proto.RegisterFile("settings.proto", fileDescriptorSettings) }

var fileDescriptorSettings = []byte{
	// 1065 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xae, 0x7f, 0xc4, 0x71, 0x5e, 0xe2, 0xd4, 0x9d, 0x86, 0xca, 0x89, 0xfa, 0x73, 0x5b, 0xd1,
	0x20, 0x84, 0x2d, 0x0a, 0x1c, 0x10, 0x22, 0x40, 0x82, 0x9a, 0x86, 0xa6, 0x95, 0xb5, 0x8e, 0x40,
	0xe2, 0xb2, 0x1a, 0xef, 0x3e, 0xaf, 0x47, 0xd9, 0xdd, 0x59, 0xcd, 0x8c, 0x4d, 0xdc, 0x03, 0xff,
	0x08, 0x57, 0x0e, 0x5c, 0x39, 0xf0, 0x3f, 0x70, 0x83, 0x33, 0x07, 0xfe, 0x16, 0x34, 0x3f, 0x76,
	0x6d, 0x47, 0xb5, 0xe1, 0xc6, 0x6d, 0xf6, 0xbd, 0xef, 0xfb, 0x66, 0xe6, 0xbd, 0x6f, 0x66, 0x16,
	0x76, 0x25, 0x2a, 0xc5, 0xb2, 0x58, 0x76, 0x73, 0xc1, 0x15, 0x27, 0xef, 0x30, 0xa9, 0x18, 0xef,
	0xc6, 0x34, 0x49, 0x70, 0xd6, 0x2d, 0x92, 0x07, 0xf7, 0x63, 0xce, 0xe3, 0x04, 0x7b, 0x06, 0x34,
	0x9c, 0x8c, 0x7a, 0xd1, 0x44, 0x50, 0xc5, 0x78, 0x66, 0x69, 0x07, 0x7b, 0x31, 0x8f, 0xb9, 0x19,
	0xf6, 0xf4, 0xc8, 0x46, 0xbd, 0xbf, 0x2a, 0xd0, 0x38, 0x35, 0x4a, 0xe4, 0x08, 0x36, 0x63, 0xcc,
	0x50, 0xd0, 0xa4, 0x53, 0x79, 0x58, 0x39, 0xdc, 0x7e, 0x76, 0xbf, 0xfb, 0xd6, 0x99, 0xba, 0xa7,
	0x16, 0x75, 0x5c, 0xff, 0xfd, 0xef, 0x07, 0x37, 0xfc, 0x82, 0x44, 0x4e, 0x01, 0xa6, 0x34, 0x61,
	0x91, 0x99, 0xb4, 0x53, 0x35, 0x12, 0x8f, 0x56, 0x48, 0x7c, 0x5b, 0x02, 0x9d, 0xca, 0x02, 0x55,
	0x0b, 0xe5, 0x82, 0x87, 0x28, 0x25, 0xcb, 0xe2, 0x4e, 0x6d, 0xad, 0x50, 0xbf, 0x04, 0x16, 0x42,
	0x73, 0xaa, 0xf7, 0x53, 0x0d, 0x36, 0xdd, 0x62, 0xc9, 0x53, 0xb8, 0x99, 0xf2, 0x8c, 0x29, 0x2e,
	0x58, 0x16, 0x07, 0x39, 0x17, 0xca, 0xec, 0xb2, 0xe5, 0xef, 0xce, 0xc3, 0x7d, 0x2e, 0x14, 0xb9,
	0x07, 0x90, 0xe7, 0x82, 0x8f, 0x2c, 0x46, 0x6f, 0x63, 0xc3, 0xdf, 0x32, 0x11, 0x93, 0x7e, 0x0f,
	0xda, 0x98, 0xd1, 0x61, 0x82, 0x81, 0x0e, 0xb1, 0xa4, 0x58, 0x62, 0xd3, 0xbf, 0x69, 0xe3, 0xfd,
	0x22, 0x4c, 0x0e, 0xa1, 0x9d, 0xa2, 0x1c, 0x07, 0x21, 0xcf, 0x46, 0x2c, 0x0e, 0x46, 0x2c, 0xc1,
	0x4e, 0xfd, 0x61, 0xe5, 0x70, 0xcb, 0xdf, 0xd5, 0xf1, 0x13, 0x13, 0x7e, 0xce, 0x12, 0x24, 0x0f,
	0x60, 0xfb, 0x72, 0x32, 0x44, 0x87, 0xec, 0x6c, 0x18, 0x10, 0xe8, 0x90, 0x05, 0x91, 0x23, 0x68,
	0x26, 0x6c, 0x8a, 0x19, 0x4a, 0xd9, 0x69, 0x98, 0x82, 0xdc, 0x5d, 0x5d, 0x90, 0x21, 0xba, 0x5a,
	0x94, 0x1c, 0xf2, 0x25, 0x6c, 0x09, 0xa4, 0x11, 0x33, 0x02, 0x9b, 0xff, 0x59, 0x60, 0x4e, 0x22,
	0x7d, 0x68, 0xb1, 0x4c, 0x09, 0x2e, 0x73, 0x0c, 0x4d, 0x83, 0x9b, 0x46, 0xe5, 0xc9, 0x0a, 0x95,
	0xb3, 0x45, 0xac, 0x53, 0x5b, 0x16, 0xf0, 0xbe, 0x83, 0xd6, 0x12, 0x8a, 0x74, 0x60, 0x33, 0x62,
	0x52, 0xd7, 0xd0, 0xb4, 0xa6, 0xe9, 0x17, 0x9f, 0x84, 0x40, 0xbd, 0xec, 0x46, 0xcb, 0x37, 0x63,
	0x8d, 0xa6, 0x51, 0x24, 0xf4, 0x86, 0x6a, 0xa6, 0x5e, 0xc5, 0xa7, 0xf7, 0x47, 0x15, 0x60, 0x6e,
	0xb0, 0x35, 0xb2, 0x5d, 0xb8, 0xfd, 0x03, 0x0e, 0xc7, 0x9c, 0x5f, 0x2e, 0xf5, 0xa8, 0x6a, 0xe4,
	0x6e, 0xb9, 0xd4, 0x42, 0x9b, 0x1e, 0xc1, 0x4e, 0x81, 0x37, 0xcb, 0xa9, 0x99, 0xe5, 0x6c, 0xbb,
	0x98, 0xb1, 0xc7, 0x02, 0x24, 0xa3, 0x69, 0xd1, 0xef, 0x02, 0xf2, 0x9a, 0xa6, 0x48, 0x3e, 0x84,
	0xbd, 0x08, 0xf3, 0x84, 0xcf, 0x52, 0xcc, 0x94, 0x41, 0xc9, 0x9c, 0x86, 0xe8, 0xba, 0x7e, 0x7b,
	0x9e, 0x7b, 0x5d, 0xa4, 0xb4, 0x79, 0xaf, 0x51, 0x8c, 0x0b, 0xb6, 0xfc, 0xdd, 0x65, 0xb4, 0x9e,
	0x5e, 0xa2, 0x98, 0xb2, 0x10, 0x2d, 0x6a, 0xd3, 0x4e, 0xef, 0x62, 0x06, 0xf2, 0x0c, 0x6a, 0x2a,
	0x91, 0xae, 0x7d, 0x07, 0x2b, 0xda, 0x77, 0x71, 0x3e, 0x70, 0x4d, 0xd3, 0x60, 0xef, 0xd7, 0x0a,
	0xc0, 0xfc, 0xa4, 0x91, 0xcf, 0xa0, 0x21, 0xf9, 0x44, 0x84, 0xe8, 0x4e, 0xf9, 0xbd, 0x15, 0x2a,
	0x03, 0x03, 0x72, 0x42, 0x8e, 0x62, 0xc8, 0x28, 0xa6, 0x28, 0xdc, 0xc9, 0x5e, 0x49, 0x36, 0xa0,
	0x92, 0x6c, 0xbe, 0xc8, 0x63, 0x68, 0x45, 0x3c, 0xa5, 0x2c, 0x0b, 0xe4, 0x64, 0x34, 0x62, 0x57,
	0xae, 0x68, 0x3b, 0x36, 0x38, 0x30, 0xb1, 0x6f, 0xea, 0xcd, 0x7a, 0x7b, 0xc3, 0xfb, 0xa5, 0x02,
	0x0d, 0xbb, 0x00, 0x72, 0x06, 0xe6, 0x2c, 0x89, 0x0c, 0x15, 0x4a, 0x77, 0xb9, 0x3d, 0x5d, 0x31,
	0xed, 0xcb, 0x12, 0x68, 0xc9, 0x2f, 0x6e, 0xf8, 0x0b, 0x64, 0x2d, 0xa5, 0x3d, 0x22, 0x67, 0x52,
	0x61, 0xea, 0xb6, 0xbf, 0x4a, 0xea, 0x79, 0x09, 0x9c, 0x4b, 0xcd, 0xc9, 0xc7, 0xcd, 0xa2, 0x8a,
	0xde, 0x9f, 0x55, 0x68, 0xd8, 0xed, 0xae, 0x31, 0xeb, 0x82, 0xdf, 0xab, 0x4b, 0x7e, 0x27, 0x9f,
	0xc2, 0x7e, 0x4a, 0xaf, 0x02, 0x81, 0x21, 0xb2, 0x29, 0x46, 0x41, 0x8a, 0x52, 0xd2, 0x18, 0x03,
	0xc9, 0xde, 0xa0, 0xf3, 0xe8, 0x9d, 0x94, 0x5e, 0xf9, 0x2e, 0xff, 0xca, 0xa6, 0x07, 0xec, 0x0d,
	0x92, 0x8f, 0x41, 0x67, 0xb4, 0xfb, 0xc3, 0x89, 0x10, 0xda, 0x5c, 0x52, 0x09, 0xa4, 0xa9, 0x34,
	0xc6, 0x6d, 0xf9, 0x7b, 0x29, 0xbd, 0x3a, 0x29, 0x93, 0x03, 0x9b, 0xd3, 0x2e, 0x8b, 0x45, 0x1e,
	0x06, 0x4a, 0xd0, 0x50, 0xdf, 0x7f, 0x1b, 0x66, 0xa5, 0xdb, 0x3a, 0x76, 0x61, 0x43, 0xe4, 0x0b,
	0xb8, 0xeb, 0x16, 0x1e, 0x08, 0xb4, 0xdb, 0x0c, 0xf4, 0x65, 0x32, 0x0b, 0xc2, 0x31, 0x86, 0x97,
	0xc6, 0xbe, 0x4d, 0x7f, 0xdf, 0x61, 0x7c, 0x07, 0xf1, 0x35, 0xe2, 0x44, 0x03, 0xc8, 0xe7, 0x50,
	0xa7, 0x13, 0x35, 0x76, 0x97, 0xd5, 0xe3, 0x15, 0x25, 0xfe, 0x6a, 0xa2, 0xc6, 0x7d, 0xc1, 0xa7,
	0x2c, 0x2a, 0xad, 0x62, 0x68, 0xde, 0xcf, 0x15, 0xd8, 0x59, 0x4c, 0x92, 0x33, 0x68, 0xb2, 0x4c,
	0x62, 0x38, 0x11, 0xe8, 0x1c, 0xf0, 0xfe, 0xca, 0xab, 0xcb, 0xc2, 0x16, 0xe9, 0x2f, 0x6e, 0xf8,
	0x25, 0x5d, 0x2f, 0x2d, 0xd5, 0x47, 0x68, 0x7d, 0xf7, 0x5f, 0x5d, 0x9c, 0x0f, 0xae, 0x49, 0x18,
	0xda, 0x31, 0x40, 0x33, 0x77, 0x31, 0xef, 0x0e, 0xec, 0xbd, 0x6d, 0x3a, 0xef, 0xb7, 0x0a, 0xb4,
	0xaf, 0x0b, 0x90, 0x0f, 0x80, 0x84, 0x09, 0xd3, 0x4d, 0x0a, 0x51, 0x28, 0x36, 0x62, 0x21, 0x55,
	0x76, 0x33, 0x5b, 0xfe, 0x2d, 0x9b, 0x39, 0x99, 0x27, 0xf4, 0xa3, 0x92, 0x0b, 0x36, 0xa5, 0x0a,
	0x83, 0x4b, 0x9c, 0x39, 0xd3, 0x80, 0x0b, 0xbd, 0xc4, 0x99, 0xbe, 0x55, 0x42, 0xba, 0xa8, 0x55,
	0xdc, 0xa4, 0xbb, 0x21, 0x5d, 0x10, 0x92, 0xfa, 0x21, 0xa3, 0xa1, 0x3e, 0xfc, 0x41, 0xc2, 0xa4,
	0x5a, 0x7a, 0xc8, 0x6c, 0xfc, 0x9c, 0x49, 0xa5, 0xdd, 0xee, 0xf9, 0xd0, 0xbe, 0x7e, 0x80, 0xc8,
	0x11, 0xb4, 0x04, 0xca, 0x59, 0x16, 0x06, 0x39, 0x0a, 0xc6, 0x23, 0x57, 0xfe, 0xfd, 0xae, 0xfd,
	0x61, 0xe9, 0x16, 0x3f, 0x2c, 0xdd, 0xaf, 0xdd, 0x0f, 0x8b, 0xbf, 0x63, 0xf1, 0x7d, 0x03, 0xf7,
	0xde, 0x85, 0xf6, 0xf5, 0x93, 0x64, 0x1e, 0x04, 0xaa, 0xc6, 0x6e, 0xf3, 0x66, 0xec, 0xfd, 0x08,
	0xb5, 0x8b, 0xf3, 0xc1, 0xff, 0x56, 0x25, 0x2f, 0x81, 0x0d, 0xf3, 0x76, 0xfe, 0xcb, 0x3b, 0xa6,
	0x97, 0x5d, 0x9d, 0x2f, 0x9b, 0x7c, 0xa2, 0x8d, 0xa9, 0x50, 0x4c, 0x69, 0xe2, 0x6e, 0xc4, 0x35,
	0x95, 0x29, 0xa1, 0xc7, 0x4f, 0xbe, 0xf7, 0xac, 0xef, 0x18, 0xef, 0x99, 0x41, 0xcf, 0x1a, 0xb0,
	0x97, 0x5f, 0xc6, 0xbd, 0xc2, 0x84, 0xc3, 0x86, 0x91, 0xf8, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x51, 0xb4, 0xe1, 0x2a, 0x44, 0x0a, 0x00, 0x00,
}
