// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settings.proto

/*
Package settings is a generated protocol buffer package.

It is generated from these files:
	settings.proto

It has these top-level messages:
	Galley
	General
	Introspection
	Validation
	Processing
	Source
	Server
	KubernetesSource
	FilesystemSource
	MCPService
	TLS
	Probe
*/
package settings

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Settings for running Galley. Galley expects a yaml file of this proto for its config-file command line
// option.
type Galley struct {
	// General settings
	General *General `protobuf:"bytes,1,opt,name=general" json:"general,omitempty"`
	// Validation related settings
	Validation *Validation `protobuf:"bytes,2,opt,name=validation" json:"validation,omitempty"`
	// Config processing related settings
	Processing *Processing `protobuf:"bytes,3,opt,name=processing" json:"processing,omitempty"`
}

func (m *Galley) Reset()                    { *m = Galley{} }
func (m *Galley) String() string            { return proto.CompactTextString(m) }
func (*Galley) ProtoMessage()               {}
func (*Galley) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{0} }

func (m *Galley) GetGeneral() *General {
	if m != nil {
		return m.General
	}
	return nil
}

func (m *Galley) GetValidation() *Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (m *Galley) GetProcessing() *Processing {
	if m != nil {
		return m.Processing
	}
	return nil
}

type General struct {
	// Port for exposing self-monitoring information.
	// Defaults to 9093
	MonitoringPort int32 `protobuf:"varint,1,opt,name=monitoring_port,json=monitoringPort,proto3" json:"monitoring_port,omitempty"`
	// Port to use for exposing profiling
	// Defaults to 9094
	PprofPort int32 `protobuf:"varint,2,opt,name=pprof_port,json=pprofPort,proto3" json:"pprof_port,omitempty"`
	// Enable profiling for Galley
	// Defaults to false
	EnableProfiling bool `protobuf:"varint,3,opt,name=enable_profiling,json=enableProfiling,proto3" json:"enable_profiling,omitempty"`
	// The path to the Mesh config file. If the file is not found, default Mesh config values are used.
	// Defaults to "/etc/mesh-config/mesh".
	MeshConfigFile string `protobuf:"bytes,4,opt,name=mesh_config_file,json=meshConfigFile,proto3" json:"mesh_config_file,omitempty"`
	// Path to the kube config file to use. If not specified, then in-cluster configuration will be used.
	// Defaults to in-cluster configuration.
	KubeConfig string `protobuf:"bytes,5,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config,omitempty"`
	// Liveness probe related settings
	Liveness *Probe `protobuf:"bytes,6,opt,name=liveness" json:"liveness,omitempty"`
	// Readiness probe related settings
	Readiness *Probe `protobuf:"bytes,7,opt,name=readiness" json:"readiness,omitempty"`
	// Introspection options
	Introspection *Introspection `protobuf:"bytes,8,opt,name=introspection" json:"introspection,omitempty"`
}

func (m *General) Reset()                    { *m = General{} }
func (m *General) String() string            { return proto.CompactTextString(m) }
func (*General) ProtoMessage()               {}
func (*General) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{1} }

func (m *General) GetMonitoringPort() int32 {
	if m != nil {
		return m.MonitoringPort
	}
	return 0
}

func (m *General) GetPprofPort() int32 {
	if m != nil {
		return m.PprofPort
	}
	return 0
}

func (m *General) GetEnableProfiling() bool {
	if m != nil {
		return m.EnableProfiling
	}
	return false
}

func (m *General) GetMeshConfigFile() string {
	if m != nil {
		return m.MeshConfigFile
	}
	return ""
}

func (m *General) GetKubeConfig() string {
	if m != nil {
		return m.KubeConfig
	}
	return ""
}

func (m *General) GetLiveness() *Probe {
	if m != nil {
		return m.Liveness
	}
	return nil
}

func (m *General) GetReadiness() *Probe {
	if m != nil {
		return m.Readiness
	}
	return nil
}

func (m *General) GetIntrospection() *Introspection {
	if m != nil {
		return m.Introspection
	}
	return nil
}

type Introspection struct {
	// The IP port to use for ctrlz.
	// Defaults to 9876
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// The IP address to listen on for ctrlz.
	// Defaults to 127.0.0.1
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Introspection) Reset()                    { *m = Introspection{} }
func (m *Introspection) String() string            { return proto.CompactTextString(m) }
func (*Introspection) ProtoMessage()               {}
func (*Introspection) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{2} }

func (m *Introspection) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Introspection) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Validation related settings
type Validation struct {
	// Disable the validation service.
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// WebhookConfigFile is the path to the validatingwebhookconfiguration
	// file that should be used for self-registration.
	// Defaults to /etc/config/validatingwebhookconfiguration.yaml
	WebhookConfigFile string `protobuf:"bytes,2,opt,name=webhook_config_file,json=webhookConfigFile,proto3" json:"webhook_config_file,omitempty"`
	// Port where the webhook is served. Per k8s admission registration requirements this should be 443 unless
	// there is only a single port for the service.
	// Defaults to 443.
	WebhookPort int32 `protobuf:"varint,3,opt,name=webhook_port,json=webhookPort,proto3" json:"webhook_port,omitempty"`
	// Name of the k8s validatingwebhookconfiguration resource to create.
	// Defaults to "istio-galley".
	WebhookName string `protobuf:"bytes,4,opt,name=webhook_name,json=webhookName,proto3" json:"webhook_name,omitempty"`
	// The namespace in which the validation deployment and service resides.
	// Defaults to  "istio-system".
	DeploymentNamespace string `protobuf:"bytes,5,opt,name=deployment_namespace,json=deploymentNamespace,proto3" json:"deployment_namespace,omitempty"`
	// The name of the validation deployment. This, along with deployment_namespace, is used to set the
	// ownerReference in the validatingwebhookconfiguration. This enables k8s to clean-up the cluster-scoped
	// validatingwebhookconfiguration when the deployment is deleted.
	// Defaults to "istio-galley"
	DeploymentName string `protobuf:"bytes,6,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// The name of the k8s service of the validation webhook. This is used to verify endpoint readiness before
	// registering the validatingwebhookconfiguration.
	// Defaults to "istio-galley"
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// TLS settings for validation webhook service.
	Tls *TLS `protobuf:"bytes,8,opt,name=tls" json:"tls,omitempty"`
}

func (m *Validation) Reset()                    { *m = Validation{} }
func (m *Validation) String() string            { return proto.CompactTextString(m) }
func (*Validation) ProtoMessage()               {}
func (*Validation) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{3} }

func (m *Validation) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Validation) GetWebhookConfigFile() string {
	if m != nil {
		return m.WebhookConfigFile
	}
	return ""
}

func (m *Validation) GetWebhookPort() int32 {
	if m != nil {
		return m.WebhookPort
	}
	return 0
}

func (m *Validation) GetWebhookName() string {
	if m != nil {
		return m.WebhookName
	}
	return ""
}

func (m *Validation) GetDeploymentNamespace() string {
	if m != nil {
		return m.DeploymentNamespace
	}
	return ""
}

func (m *Validation) GetDeploymentName() string {
	if m != nil {
		return m.DeploymentName
	}
	return ""
}

func (m *Validation) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Validation) GetTls() *TLS {
	if m != nil {
		return m.Tls
	}
	return nil
}

// Config processing related settings
type Processing struct {
	// Settings for the upstream configuration source
	Source *Source `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	// Settings for the MCP Service
	Server *Server `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	// Configuration sinks that Galley should connect to and deliver configuration
	Sinks []*MCPService `protobuf:"bytes,4,rep,name=sinks" json:"sinks,omitempty"`
	// DNS Domain suffix to use while constructing Ingress based resources.
	// Defaults to "cluster.local"
	DomainSuffix string `protobuf:"bytes,5,opt,name=domain_suffix,json=domainSuffix,proto3" json:"domain_suffix,omitempty"`
}

func (m *Processing) Reset()                    { *m = Processing{} }
func (m *Processing) String() string            { return proto.CompactTextString(m) }
func (*Processing) ProtoMessage()               {}
func (*Processing) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{4} }

func (m *Processing) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Processing) GetServer() *Server {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *Processing) GetSinks() []*MCPService {
	if m != nil {
		return m.Sinks
	}
	return nil
}

func (m *Processing) GetDomainSuffix() string {
	if m != nil {
		return m.DomainSuffix
	}
	return ""
}

type Source struct {
	// Types that are valid to be assigned to Source:
	//	*Source_Kubernetes
	//	*Source_Filesystem
	//	*Source_Mcp
	Source isSource_Source `protobuf_oneof:"source"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{5} }

type isSource_Source interface {
	isSource_Source()
}

type Source_Kubernetes struct {
	Kubernetes *KubernetesSource `protobuf:"bytes,1,opt,name=kubernetes,oneof"`
}
type Source_Filesystem struct {
	Filesystem *FilesystemSource `protobuf:"bytes,2,opt,name=filesystem,oneof"`
}
type Source_Mcp struct {
	Mcp *MCPService `protobuf:"bytes,3,opt,name=mcp,oneof"`
}

func (*Source_Kubernetes) isSource_Source() {}
func (*Source_Filesystem) isSource_Source() {}
func (*Source_Mcp) isSource_Source()        {}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetKubernetes() *KubernetesSource {
	if x, ok := m.GetSource().(*Source_Kubernetes); ok {
		return x.Kubernetes
	}
	return nil
}

func (m *Source) GetFilesystem() *FilesystemSource {
	if x, ok := m.GetSource().(*Source_Filesystem); ok {
		return x.Filesystem
	}
	return nil
}

func (m *Source) GetMcp() *MCPService {
	if x, ok := m.GetSource().(*Source_Mcp); ok {
		return x.Mcp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Source) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Source_OneofMarshaler, _Source_OneofUnmarshaler, _Source_OneofSizer, []interface{}{
		(*Source_Kubernetes)(nil),
		(*Source_Filesystem)(nil),
		(*Source_Mcp)(nil),
	}
}

func _Source_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_Kubernetes:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Kubernetes); err != nil {
			return err
		}
	case *Source_Filesystem:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Filesystem); err != nil {
			return err
		}
	case *Source_Mcp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mcp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Source.Source has unexpected type %T", x)
	}
	return nil
}

func _Source_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Source)
	switch tag {
	case 1: // source.kubernetes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubernetesSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_Kubernetes{msg}
		return true, err
	case 2: // source.filesystem
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilesystemSource)
		err := b.DecodeMessage(msg)
		m.Source = &Source_Filesystem{msg}
		return true, err
	case 3: // source.mcp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MCPService)
		err := b.DecodeMessage(msg)
		m.Source = &Source_Mcp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Source_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_Kubernetes:
		s := proto.Size(x.Kubernetes)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Source_Filesystem:
		s := proto.Size(x.Filesystem)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Source_Mcp:
		s := proto.Size(x.Mcp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Server struct {
	// Disable the server
	// Defaults to false
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// Address to use for Galley's gRPC API, e.g. tcp://127.0.0.1:9092 or unix:///path/to/file
	// Defaults to tcp://0.0.0.0:9901.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Maximum size of individual gRPC messages
	// Defaults to 1024 * 1024.
	MaxReceivedMessageSize int32 `protobuf:"varint,3,opt,name=max_received_message_size,json=maxReceivedMessageSize,proto3" json:"max_received_message_size,omitempty"`
	// Maximum number of outstanding RPCs per connection
	// Defaults to 1024.
	MaxConcurrentStreams int32 `protobuf:"varint,4,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
	// Use insecure gRPC communication
	// Defaults to false.
	Insecure bool `protobuf:"varint,5,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// Optional whitelisting file for SPIFFE IDs. If the file is not found, then all incoming connections are
	// allowed.
	// Defaults to fail open.
	AccessListFile string `protobuf:"bytes,6,opt,name=access_list_file,json=accessListFile,proto3" json:"access_list_file,omitempty"`
	// Disable resource readiness checks. This allows Galley to start if not all resource types are supported
	// Defaults to false
	DisableResourceReadyCheck bool `protobuf:"varint,7,opt,name=disable_resource_ready_check,json=disableResourceReadyCheck,proto3" json:"disable_resource_ready_check,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{6} }

func (m *Server) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *Server) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Server) GetMaxReceivedMessageSize() int32 {
	if m != nil {
		return m.MaxReceivedMessageSize
	}
	return 0
}

func (m *Server) GetMaxConcurrentStreams() int32 {
	if m != nil {
		return m.MaxConcurrentStreams
	}
	return 0
}

func (m *Server) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *Server) GetAccessListFile() string {
	if m != nil {
		return m.AccessListFile
	}
	return ""
}

func (m *Server) GetDisableResourceReadyCheck() bool {
	if m != nil {
		return m.DisableResourceReadyCheck
	}
	return false
}

type KubernetesSource struct {
	// Resync period for rescanning Kubernetes resources
	ResyncPeriod *google_protobuf.Duration `protobuf:"bytes,1,opt,name=resync_period,json=resyncPeriod" json:"resync_period,omitempty"`
}

func (m *KubernetesSource) Reset()                    { *m = KubernetesSource{} }
func (m *KubernetesSource) String() string            { return proto.CompactTextString(m) }
func (*KubernetesSource) ProtoMessage()               {}
func (*KubernetesSource) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{7} }

func (m *KubernetesSource) GetResyncPeriod() *google_protobuf.Duration {
	if m != nil {
		return m.ResyncPeriod
	}
	return nil
}

type FilesystemSource struct {
	// Path to a folder that contains file-based configuration for Istio.
	// Required
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *FilesystemSource) Reset()                    { *m = FilesystemSource{} }
func (m *FilesystemSource) String() string            { return proto.CompactTextString(m) }
func (*FilesystemSource) ProtoMessage()               {}
func (*FilesystemSource) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{8} }

func (m *FilesystemSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type MCPService struct {
	// The address of the MCP Service to dial out to.
	// Required
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Use insecure gRPC communication
	// Defaults to false.
	Insecure bool `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// The client metadata to supply when connecting to this MCP Service.
	ClientMetadata map[string]string `protobuf:"bytes,3,rep,name=client_metadata,json=clientMetadata" json:"client_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The name of the Auth plugin to use for gRPC security.
	// TODO: Default
	AuthPlugin string `protobuf:"bytes,4,opt,name=auth_plugin,json=authPlugin,proto3" json:"auth_plugin,omitempty"`
	//  The settings for the auth plugin.
	AuthPluginSettings map[string]string `protobuf:"bytes,5,rep,name=auth_plugin_settings,json=authPluginSettings" json:"auth_plugin_settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MCPService) Reset()                    { *m = MCPService{} }
func (m *MCPService) String() string            { return proto.CompactTextString(m) }
func (*MCPService) ProtoMessage()               {}
func (*MCPService) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{9} }

func (m *MCPService) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MCPService) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *MCPService) GetClientMetadata() map[string]string {
	if m != nil {
		return m.ClientMetadata
	}
	return nil
}

func (m *MCPService) GetAuthPlugin() string {
	if m != nil {
		return m.AuthPlugin
	}
	return ""
}

func (m *MCPService) GetAuthPluginSettings() map[string]string {
	if m != nil {
		return m.AuthPluginSettings
	}
	return nil
}

// TLS specific common settings
type TLS struct {
	// The path to the x509 certificate for https.
	// Defaults to "/etc/certs/cert-chain.pem"
	ClientCertificate string `protobuf:"bytes,1,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	// The path to the x509 private key matching `tls_cert_file`.
	// Defaults to "/etc/certs/key.pem"
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// CACertFile is the path to the x509 CA bundle file.
	// Defaults to "/etc/certs/root-cert.pem"
	CaCertificates string `protobuf:"bytes,3,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
}

func (m *TLS) Reset()                    { *m = TLS{} }
func (m *TLS) String() string            { return proto.CompactTextString(m) }
func (*TLS) ProtoMessage()               {}
func (*TLS) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{10} }

func (m *TLS) GetClientCertificate() string {
	if m != nil {
		return m.ClientCertificate
	}
	return ""
}

func (m *TLS) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLS) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

// Liveness/Readiness Probe specific settings.
type Probe struct {
	// Tthe path to the file used for the existence.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The interval for updating the file's last modified
	// time.
	Interval *google_protobuf.Duration `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
}

func (m *Probe) Reset()                    { *m = Probe{} }
func (m *Probe) String() string            { return proto.CompactTextString(m) }
func (*Probe) ProtoMessage()               {}
func (*Probe) Descriptor() ([]byte, []int) { return fileDescriptorSettings, []int{11} }

func (m *Probe) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Probe) GetInterval() *google_protobuf.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func init() {
	proto.RegisterType((*Galley)(nil), "istio.galley.settings.Galley")
	proto.RegisterType((*General)(nil), "istio.galley.settings.General")
	proto.RegisterType((*Introspection)(nil), "istio.galley.settings.Introspection")
	proto.RegisterType((*Validation)(nil), "istio.galley.settings.Validation")
	proto.RegisterType((*Processing)(nil), "istio.galley.settings.Processing")
	proto.RegisterType((*Source)(nil), "istio.galley.settings.Source")
	proto.RegisterType((*Server)(nil), "istio.galley.settings.Server")
	proto.RegisterType((*KubernetesSource)(nil), "istio.galley.settings.KubernetesSource")
	proto.RegisterType((*FilesystemSource)(nil), "istio.galley.settings.FilesystemSource")
	proto.RegisterType((*MCPService)(nil), "istio.galley.settings.MCPService")
	proto.RegisterType((*TLS)(nil), "istio.galley.settings.TLS")
	proto.RegisterType((*Probe)(nil), "istio.galley.settings.Probe")
}

func init() { proto.RegisterFile("settings.proto", fileDescriptorSettings) }

var fileDescriptorSettings = []byte{
	// 1088 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xc7, 0x6b, 0xbb, 0x76, 0xec, 0x93, 0xc4, 0x49, 0x27, 0x79, 0x1e, 0x9c, 0xa8, 0x2d, 0xe9,
	0x52, 0xd1, 0x20, 0x81, 0x2d, 0x5e, 0x22, 0xd2, 0x4a, 0x80, 0x52, 0xd3, 0x37, 0x9a, 0x54, 0xd6,
	0xb8, 0xe2, 0x82, 0x0b, 0x56, 0xe3, 0xf5, 0xf1, 0x66, 0xe4, 0x7d, 0xd3, 0xcc, 0xd8, 0xc4, 0xbd,
	0xe0, 0x9e, 0xef, 0xc3, 0x15, 0x9f, 0x00, 0xbe, 0x01, 0x77, 0x7c, 0x15, 0x34, 0x2f, 0x6b, 0xaf,
	0x43, 0x9c, 0xc0, 0xdd, 0xee, 0x39, 0xbf, 0xff, 0x99, 0xb3, 0xe7, 0x65, 0x16, 0x9a, 0x12, 0x95,
	0xe2, 0x49, 0x28, 0xdb, 0x99, 0x48, 0x55, 0x4a, 0xfe, 0xc7, 0xa5, 0xe2, 0x69, 0x3b, 0x64, 0x51,
	0x84, 0xb3, 0x76, 0xee, 0xdc, 0xbf, 0x1f, 0xa6, 0x69, 0x18, 0x61, 0xc7, 0x40, 0x83, 0xc9, 0xa8,
	0x33, 0x9c, 0x08, 0xa6, 0x78, 0x9a, 0x58, 0x99, 0xf7, 0x7b, 0x09, 0x6a, 0x2f, 0x8c, 0x86, 0x1c,
	0xc3, 0x5a, 0x88, 0x09, 0x0a, 0x16, 0xb5, 0x4a, 0x07, 0xa5, 0xc3, 0xf5, 0xcf, 0xee, 0xb7, 0xaf,
	0x8c, 0xd9, 0x7e, 0x61, 0x29, 0x9a, 0xe3, 0xe4, 0x04, 0x60, 0xca, 0x22, 0x3e, 0x34, 0x81, 0x5b,
	0x65, 0x23, 0x7e, 0xb0, 0x42, 0xfc, 0xfd, 0x1c, 0xa4, 0x05, 0x91, 0x0e, 0x91, 0x89, 0x34, 0x40,
	0x29, 0x79, 0x12, 0xb6, 0x2a, 0xd7, 0x86, 0xe8, 0xcd, 0x41, 0x5a, 0x10, 0x79, 0xbf, 0x54, 0x60,
	0xcd, 0xa5, 0x46, 0x1e, 0xc1, 0x56, 0x9c, 0x26, 0x5c, 0xa5, 0x82, 0x27, 0xa1, 0x9f, 0xa5, 0x42,
	0x99, 0x6f, 0xaa, 0xd2, 0xe6, 0xc2, 0xdc, 0x4b, 0x85, 0x22, 0xf7, 0x00, 0xb2, 0x4c, 0xa4, 0x23,
	0xcb, 0x94, 0x0d, 0xd3, 0x30, 0x16, 0xe3, 0xfe, 0x08, 0xb6, 0x31, 0x61, 0x83, 0x08, 0x7d, 0x6d,
	0xe2, 0x51, 0x9e, 0x5c, 0x9d, 0x6e, 0x59, 0x7b, 0x2f, 0x37, 0x93, 0x43, 0xd8, 0x8e, 0x51, 0x9e,
	0xfb, 0x41, 0x9a, 0x8c, 0x78, 0xe8, 0x8f, 0x78, 0x84, 0xad, 0xdb, 0x07, 0xa5, 0xc3, 0x06, 0x6d,
	0x6a, 0x7b, 0xd7, 0x98, 0x9f, 0xf3, 0x08, 0xc9, 0xfb, 0xb0, 0x3e, 0x9e, 0x0c, 0xd0, 0x91, 0xad,
	0xaa, 0x81, 0x40, 0x9b, 0x2c, 0x44, 0x8e, 0xa1, 0x1e, 0xf1, 0x29, 0x26, 0x28, 0x65, 0xab, 0x66,
	0x4a, 0x71, 0x77, 0x75, 0x29, 0x06, 0x48, 0xe7, 0x34, 0x79, 0x02, 0x0d, 0x81, 0x6c, 0xc8, 0x8d,
	0x74, 0xed, 0x5f, 0x48, 0x17, 0x38, 0xf9, 0x0e, 0x36, 0x79, 0xa2, 0x44, 0x2a, 0x33, 0x0c, 0x4c,
	0x23, 0xeb, 0x46, 0xff, 0x70, 0x85, 0xfe, 0x55, 0x91, 0xa5, 0xcb, 0x52, 0xef, 0x2b, 0xd8, 0x5c,
	0xf2, 0x13, 0x02, 0xb7, 0x0b, 0x5d, 0x30, 0xcf, 0xa4, 0x05, 0x6b, 0x6c, 0x38, 0x14, 0x3a, 0xd5,
	0xb2, 0xa9, 0x41, 0xfe, 0xea, 0xfd, 0x51, 0x06, 0x58, 0x0c, 0x8a, 0x06, 0x87, 0x5c, 0xea, 0x72,
	0x1b, 0x7d, 0x9d, 0xe6, 0xaf, 0xa4, 0x0d, 0x3b, 0x3f, 0xe1, 0xe0, 0x3c, 0x4d, 0xc7, 0x4b, 0x75,
	0xb7, 0xe1, 0xee, 0x38, 0x57, 0xa1, 0xf4, 0x0f, 0x60, 0x23, 0xe7, 0x4d, 0x3a, 0x15, 0x93, 0xce,
	0xba, 0xb3, 0x99, 0x96, 0x17, 0x90, 0x84, 0xc5, 0x79, 0x0f, 0x73, 0xe4, 0x0d, 0x8b, 0x91, 0x7c,
	0x0a, 0xbb, 0x43, 0xcc, 0xa2, 0x74, 0x16, 0x63, 0xa2, 0x0c, 0x25, 0x33, 0x16, 0xa0, 0xeb, 0xe4,
	0xce, 0xc2, 0xf7, 0x26, 0x77, 0xe9, 0x81, 0xbc, 0x24, 0x31, 0x9d, 0x6d, 0xd0, 0xe6, 0x32, 0xad,
	0x8f, 0x97, 0x28, 0xa6, 0x3c, 0x40, 0x4b, 0xad, 0xd9, 0xe3, 0x9d, 0xcd, 0x20, 0x1f, 0x43, 0x45,
	0x45, 0xd2, 0xb5, 0x67, 0x7f, 0x45, 0x7b, 0xde, 0x9e, 0xf6, 0xa9, 0xc6, 0xbc, 0x3f, 0x4b, 0x00,
	0x8b, 0x8d, 0x21, 0x47, 0x50, 0x93, 0xe9, 0x44, 0x04, 0xe8, 0xf6, 0xf4, 0xde, 0x0a, 0x7d, 0xdf,
	0x40, 0xd4, 0xc1, 0x46, 0x86, 0x62, 0x8a, 0xc2, 0xed, 0xe6, 0x4a, 0x99, 0x81, 0xa8, 0x83, 0xc9,
	0x97, 0x50, 0x95, 0x3c, 0x19, 0xcb, 0xd6, 0xed, 0x83, 0xca, 0x35, 0x1b, 0x7d, 0xd6, 0xed, 0xf5,
	0xed, 0x07, 0x52, 0xcb, 0x93, 0x0f, 0x60, 0x73, 0x98, 0xc6, 0x8c, 0x27, 0xbe, 0x9c, 0x8c, 0x46,
	0xfc, 0xc2, 0xd5, 0x76, 0xc3, 0x1a, 0xfb, 0xc6, 0xe6, 0xfd, 0x55, 0x82, 0x9a, 0xcd, 0x93, 0xbc,
	0x02, 0xb3, 0x40, 0x22, 0x41, 0x85, 0xd2, 0xdd, 0x5f, 0x8f, 0x56, 0x9c, 0xf6, 0x7a, 0x0e, 0x5a,
	0xf1, 0xcb, 0x5b, 0xb4, 0x20, 0xd6, 0xa1, 0xf4, 0x10, 0xc9, 0x99, 0x54, 0x18, 0xbb, 0x2a, 0xad,
	0x0a, 0xf5, 0x7c, 0x0e, 0x2e, 0x42, 0x2d, 0xc4, 0xe4, 0x08, 0x2a, 0x71, 0x90, 0xdd, 0x70, 0x9d,
	0x2d, 0x3e, 0xfe, 0xe5, 0x2d, 0xaa, 0xf9, 0xa7, 0xf5, 0xbc, 0x47, 0xde, 0xaf, 0x65, 0xa8, 0xd9,
	0x92, 0x5e, 0xb3, 0x04, 0x2b, 0xf7, 0x88, 0x3c, 0x86, 0xbd, 0x98, 0x5d, 0xf8, 0x02, 0x03, 0xe4,
	0x53, 0x1c, 0xfa, 0x31, 0x4a, 0xc9, 0x42, 0xf4, 0x25, 0x7f, 0x87, 0x6e, 0xf6, 0xff, 0x1f, 0xb3,
	0x0b, 0xea, 0xfc, 0x67, 0xd6, 0xdd, 0xe7, 0xef, 0x90, 0x7c, 0x01, 0xda, 0xa3, 0xb7, 0x2a, 0x98,
	0x08, 0xa1, 0x87, 0x56, 0x2a, 0x81, 0x2c, 0x96, 0x66, 0x21, 0xaa, 0x74, 0x37, 0x66, 0x17, 0xdd,
	0xb9, 0xb3, 0x6f, 0x7d, 0x64, 0x1f, 0xea, 0x3c, 0x91, 0x18, 0x4c, 0x84, 0xdd, 0x86, 0x3a, 0x9d,
	0xbf, 0xeb, 0x0b, 0x92, 0x05, 0x7a, 0x0c, 0xfd, 0x88, 0x4b, 0x65, 0x17, 0xd5, 0xed, 0x80, 0xb5,
	0x9f, 0x72, 0xa9, 0xcc, 0x96, 0x7e, 0x03, 0x77, 0xdd, 0xb7, 0xf9, 0x02, 0x6d, 0x25, 0x7c, 0x7d,
	0x4f, 0xcd, 0xfc, 0xe0, 0x1c, 0x83, 0xb1, 0xd9, 0x89, 0x3a, 0xdd, 0x73, 0x0c, 0x75, 0x08, 0xd5,
	0x44, 0x57, 0x03, 0x1e, 0x85, 0xed, 0xcb, 0x4d, 0x26, 0x5f, 0xc3, 0xa6, 0x40, 0x39, 0x4b, 0x02,
	0x3f, 0x43, 0xc1, 0xd3, 0xa1, 0x1b, 0x92, 0xbd, 0xb6, 0xfd, 0x43, 0xb6, 0xf3, 0x3f, 0x64, 0xfb,
	0x5b, 0xf7, 0x87, 0xa4, 0x1b, 0x96, 0xef, 0x19, 0xdc, 0xfb, 0x10, 0xb6, 0x2f, 0x77, 0xdb, 0xdc,
	0x6a, 0x4c, 0x9d, 0x9b, 0x50, 0x0d, 0x6a, 0x9e, 0xbd, 0xdf, 0x2a, 0x00, 0x8b, 0x96, 0x16, 0x9b,
	0x53, 0x5a, 0x6e, 0x4e, 0xb1, 0x56, 0xe5, 0x4b, 0xb5, 0xfa, 0x11, 0xb6, 0x82, 0x88, 0xeb, 0xaa,
	0xc7, 0xa8, 0xd8, 0x90, 0x29, 0xd6, 0xaa, 0x98, 0x0d, 0x3a, 0xba, 0x71, 0x88, 0xda, 0x5d, 0x23,
	0x3c, 0x73, 0xba, 0x67, 0x89, 0x12, 0x33, 0xda, 0x0c, 0x96, 0x8c, 0xfa, 0x17, 0xc4, 0x26, 0xea,
	0xdc, 0xcf, 0xa2, 0x49, 0xc8, 0x13, 0x77, 0xc7, 0x81, 0x36, 0xf5, 0x8c, 0x85, 0x8c, 0x61, 0xb7,
	0x00, 0xf8, 0xf9, 0x39, 0xad, 0xaa, 0xc9, 0xe2, 0xf1, 0xcd, 0x59, 0x9c, 0xcc, 0x63, 0xf5, 0x9d,
	0xd7, 0x66, 0x42, 0xd8, 0x3f, 0x1c, 0xfb, 0x27, 0xb0, 0x73, 0x45, 0xd2, 0x64, 0x1b, 0x2a, 0x63,
	0x9c, 0xb9, 0xb2, 0xe9, 0x47, 0xb2, 0x0b, 0xd5, 0x29, 0x8b, 0x26, 0xf9, 0x05, 0x6f, 0x5f, 0x9e,
	0x94, 0x8f, 0x4b, 0xfb, 0xcf, 0xe0, 0xbd, 0x15, 0x27, 0xfe, 0x97, 0x30, 0xde, 0xcf, 0x50, 0x79,
	0x7b, 0xda, 0x27, 0x9f, 0x00, 0x71, 0xe5, 0x0f, 0x50, 0x28, 0x3e, 0xe2, 0x01, 0x53, 0xe8, 0x22,
	0xdc, 0xb1, 0x9e, 0xee, 0xc2, 0xa1, 0xab, 0x99, 0x09, 0x3e, 0x65, 0x0a, 0x7d, 0x7d, 0x92, 0x8d,
	0x0a, 0xce, 0xf4, 0x1a, 0x67, 0xfa, 0xf6, 0x0f, 0x58, 0x31, 0x96, 0x34, 0xdb, 0xd7, 0xa0, 0xcd,
	0x80, 0x15, 0x02, 0x49, 0x8f, 0x42, 0xd5, 0xfc, 0x97, 0xaf, 0x9a, 0x2c, 0x72, 0xa4, 0x07, 0x46,
	0xa1, 0x98, 0xb2, 0xc8, 0x5d, 0x4b, 0xd7, 0x0c, 0xef, 0x1c, 0x7d, 0xfa, 0xf0, 0x07, 0xcf, 0x76,
	0x8b, 0xa7, 0x1d, 0xf3, 0xd0, 0xb1, 0x6d, 0xeb, 0x64, 0xe3, 0xb0, 0x93, 0xb7, 0x6e, 0x50, 0x33,
	0x21, 0x3e, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x50, 0xbf, 0x9b, 0xd9, 0x58, 0x0a, 0x00, 0x00,
}
