// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/template/edge/template.proto

// The `edge` template represents an edge in the mesh graph.

package edge

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	_ "istio.io/api/mixer/adapter/model/v1beta1"
	v1beta1 "istio.io/api/policy/v1beta1"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The `edge` template represents an edge in the mesh graph
//
// When writing the configuration, the value for the fields associated
// with this template can either be a literal or an
// [expression](https://istio.io/docs/reference/config/policy-and-telemetry/expression-language/). Please
// note that if the datatype of a field is not
// istio.mixer.adapter.model.v1beta1.Value, then the expression's
// [inferred type](https://istio.io/docs/reference/config/policy-and-telemetry/expression-language/#type-checking)
// must match the datatype of the field.
//
// Example config:
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: instance
// metadata:
//   name: default
//   namespace: istio-system
// spec:
//   compiledTemplate: edge
//   params:
//     timestamp: request.time
//     sourceUid: source.uid | "Unknown"
//     sourceOwner: source.owner | "Unknown"
//     sourceWorkloadName: source.workload.name | "Unknown"
//     sourceWorkloadNamespace: source.workload.namespace | "Unknown"
//     destinationUid: destination.uid | "Unknown"
//     destinationOwner: destination.owner | "Unknown"
//     destinationWorkloadName: destination.workload.name | "Unknown"
//     destinationWorkloadNamespace: destination.workload.namespace | "Unknown"
//     destinationServiceName: destination.service.name | "Unknown"
//     destinationServiceNamespace: destination.service.namespace | "Unknown"
//     apiProtocol: api.protocol | "Unknown"
//     contextProtocol: context.protocol | "Unknown"
// ```
type Template struct {
	// Timestamp of the edge
	Timestamp *v1beta1.TimeStamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Namespace of the source workload
	SourceWorkloadNamespace string `protobuf:"bytes,10,opt,name=source_workload_namespace,json=sourceWorkloadNamespace,proto3" json:"source_workload_namespace,omitempty"`
	// Name of the source workload
	SourceWorkloadName string `protobuf:"bytes,11,opt,name=source_workload_name,json=sourceWorkloadName,proto3" json:"source_workload_name,omitempty"`
	// Owner of the source workload (often k8s deployment)
	SourceOwner string `protobuf:"bytes,12,opt,name=source_owner,json=sourceOwner,proto3" json:"source_owner,omitempty"`
	// UID of the source workload
	SourceUid string `protobuf:"bytes,13,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	// Namespace of the destination workload
	DestinationWorkloadNamespace string `protobuf:"bytes,20,opt,name=destination_workload_namespace,json=destinationWorkloadNamespace,proto3" json:"destination_workload_namespace,omitempty"`
	// Name of the destination workload
	DestinationWorkloadName string `protobuf:"bytes,21,opt,name=destination_workload_name,json=destinationWorkloadName,proto3" json:"destination_workload_name,omitempty"`
	// Owner of the destination workload (often k8s deployment)
	DestinationOwner string `protobuf:"bytes,22,opt,name=destination_owner,json=destinationOwner,proto3" json:"destination_owner,omitempty"`
	// UID of the destination workload
	DestinationUid string `protobuf:"bytes,23,opt,name=destination_uid,json=destinationUid,proto3" json:"destination_uid,omitempty"`
	// Namespace of the destination Service
	DestinationServiceNamespace string `protobuf:"bytes,24,opt,name=destination_service_namespace,json=destinationServiceNamespace,proto3" json:"destination_service_namespace,omitempty"`
	// Name of the destination Service
	DestinationServiceName string `protobuf:"bytes,25,opt,name=destination_service_name,json=destinationServiceName,proto3" json:"destination_service_name,omitempty"`
	// Protocol used for communication (http, tcp)
	ContextProtocol string `protobuf:"bytes,30,opt,name=context_protocol,json=contextProtocol,proto3" json:"context_protocol,omitempty"`
	// The protocol type of the API call (http, https, grpc)
	ApiProtocol string `protobuf:"bytes,31,opt,name=api_protocol,json=apiProtocol,proto3" json:"api_protocol,omitempty"`
}

func (m *Template) Reset()      { *m = Template{} }
func (*Template) ProtoMessage() {}
func (*Template) Descriptor() ([]byte, []int) {
	return fileDescriptor_13da442ecefbb3b7, []int{0}
}
func (m *Template) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Template) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Template.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Template) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Template.Merge(m, src)
}
func (m *Template) XXX_Size() int {
	return m.Size()
}
func (m *Template) XXX_DiscardUnknown() {
	xxx_messageInfo_Template.DiscardUnknown(m)
}

var xxx_messageInfo_Template proto.InternalMessageInfo

func (m *Template) GetTimestamp() *v1beta1.TimeStamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Template) GetSourceWorkloadNamespace() string {
	if m != nil {
		return m.SourceWorkloadNamespace
	}
	return ""
}

func (m *Template) GetSourceWorkloadName() string {
	if m != nil {
		return m.SourceWorkloadName
	}
	return ""
}

func (m *Template) GetSourceOwner() string {
	if m != nil {
		return m.SourceOwner
	}
	return ""
}

func (m *Template) GetSourceUid() string {
	if m != nil {
		return m.SourceUid
	}
	return ""
}

func (m *Template) GetDestinationWorkloadNamespace() string {
	if m != nil {
		return m.DestinationWorkloadNamespace
	}
	return ""
}

func (m *Template) GetDestinationWorkloadName() string {
	if m != nil {
		return m.DestinationWorkloadName
	}
	return ""
}

func (m *Template) GetDestinationOwner() string {
	if m != nil {
		return m.DestinationOwner
	}
	return ""
}

func (m *Template) GetDestinationUid() string {
	if m != nil {
		return m.DestinationUid
	}
	return ""
}

func (m *Template) GetDestinationServiceNamespace() string {
	if m != nil {
		return m.DestinationServiceNamespace
	}
	return ""
}

func (m *Template) GetDestinationServiceName() string {
	if m != nil {
		return m.DestinationServiceName
	}
	return ""
}

func (m *Template) GetContextProtocol() string {
	if m != nil {
		return m.ContextProtocol
	}
	return ""
}

func (m *Template) GetApiProtocol() string {
	if m != nil {
		return m.ApiProtocol
	}
	return ""
}

func init() {
	proto.RegisterType((*Template)(nil), "edge.Template")
}

func init() {
	proto.RegisterFile("mixer/template/edge/template.proto", fileDescriptor_13da442ecefbb3b7)
}

var fileDescriptor_13da442ecefbb3b7 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x63, 0x04, 0x88, 0x7b, 0x57, 0x68, 0xb1, 0x4a, 0xeb, 0x2b, 0xd4, 0x2d, 0x5d, 0x28,
	0x02, 0x25, 0x14, 0x16, 0x74, 0x12, 0x4b, 0xc5, 0x0c, 0xa8, 0x2d, 0x62, 0x3c, 0xb9, 0xc9, 0x13,
	0xb2, 0x48, 0x62, 0x2b, 0x71, 0xdb, 0xeb, 0xc6, 0x47, 0x40, 0x62, 0x66, 0xe7, 0xa3, 0x30, 0x9e,
	0x98, 0x3a, 0x72, 0x39, 0x06, 0xc6, 0x8e, 0x8c, 0x55, 0x6c, 0xb7, 0x67, 0xa9, 0x77, 0x63, 0xfe,
	0xef, 0xf7, 0x7b, 0xf6, 0x5f, 0x0e, 0x6c, 0x15, 0x72, 0x88, 0x55, 0x62, 0xb0, 0xd0, 0xb9, 0x30,
	0x98, 0x60, 0xf6, 0x19, 0xaf, 0xbe, 0x62, 0x5d, 0x29, 0xa3, 0xe8, 0xcd, 0x36, 0x5c, 0xeb, 0x69,
	0x95, 0xcb, 0xf4, 0x34, 0x39, 0xde, 0x39, 0x44, 0x23, 0x76, 0x12, 0x73, 0xaa, 0x3d, 0xb0, 0xf6,
	0xdc, 0x2d, 0x11, 0x99, 0xd0, 0x06, 0xab, 0xa4, 0x50, 0x19, 0xe6, 0x57, 0x1c, 0x0e, 0x0d, 0x96,
	0xb5, 0x54, 0x65, 0xed, 0xe8, 0xad, 0x1f, 0xb7, 0xe0, 0xce, 0x81, 0x3f, 0x81, 0xbe, 0x81, 0x8e,
	0x91, 0x05, 0xd6, 0x46, 0x14, 0x9a, 0x91, 0x4d, 0xb2, 0xdd, 0x7d, 0xb9, 0x11, 0xcb, 0xda, 0x48,
	0x15, 0xbb, 0xf3, 0x62, 0xbf, 0x27, 0x3e, 0x90, 0x05, 0xee, 0xb7, 0xd8, 0xde, 0xd4, 0xa0, 0x7d,
	0xe8, 0xd5, 0xea, 0xa8, 0x4a, 0x71, 0x70, 0xa2, 0xaa, 0x2f, 0xb9, 0x12, 0xd9, 0xa0, 0x14, 0x05,
	0xd6, 0x5a, 0xa4, 0xc8, 0x60, 0x93, 0x6c, 0x77, 0xf6, 0x56, 0x1d, 0xf0, 0xc9, 0xcf, 0xdf, 0x5d,
	0x8e, 0xe9, 0x0b, 0x58, 0x9e, 0xe5, 0xb2, 0xae, 0xd5, 0xe8, 0x75, 0x8d, 0x3e, 0x86, 0x05, 0x6f,
	0xa8, 0x93, 0x12, 0x2b, 0xb6, 0x60, 0xc9, 0xae, 0xcb, 0xde, 0xb7, 0x11, 0x5d, 0x07, 0xf0, 0xc8,
	0x91, 0xcc, 0xd8, 0x5d, 0x0b, 0x74, 0x5c, 0xf2, 0x51, 0x66, 0xf4, 0x2d, 0xf0, 0x0c, 0x6b, 0x23,
	0x4b, 0x61, 0xa4, 0x2a, 0x67, 0x5d, 0x7a, 0xd9, 0x2a, 0x8f, 0x02, 0xea, 0xfa, 0xcd, 0xfb, 0xd0,
	0x9b, 0xbb, 0x85, 0x3d, 0x70, 0xad, 0xe7, 0x2c, 0xa0, 0xcf, 0xe0, 0x7e, 0xe8, 0xba, 0x22, 0x2b,
	0xd6, 0x59, 0x0a, 0x06, 0xae, 0xcd, 0x13, 0x58, 0x0c, 0xe1, 0xb6, 0xd2, 0xaa, 0x45, 0xef, 0x05,
	0x71, 0xdb, 0x6b, 0x17, 0xd6, 0x43, 0xb0, 0xc6, 0xea, 0x58, 0xa6, 0x18, 0xd4, 0x62, 0x56, 0x7b,
	0x18, 0x40, 0xfb, 0x8e, 0x99, 0xb6, 0x7a, 0x0d, 0x6c, 0xde, 0x0e, 0xd6, 0xb3, 0xfa, 0xca, 0x6c,
	0x9d, 0x3e, 0x85, 0xa5, 0x54, 0x95, 0x06, 0x87, 0x66, 0x60, 0x7f, 0xb1, 0x54, 0xe5, 0x8c, 0x5b,
	0x63, 0xd1, 0xe7, 0x1f, 0x7c, 0xdc, 0x3e, 0xa1, 0xd0, 0x72, 0x8a, 0x6d, 0xb8, 0x27, 0x14, 0x5a,
	0x5e, 0x22, 0xbb, 0xfd, 0xd1, 0x98, 0x47, 0x67, 0x63, 0x1e, 0x9d, 0x8f, 0x39, 0xf9, 0xda, 0x70,
	0xf2, 0xb3, 0xe1, 0xe4, 0x57, 0xc3, 0xc9, 0xa8, 0xe1, 0xe4, 0x4f, 0xc3, 0xc9, 0xbf, 0x86, 0x47,
	0xe7, 0x0d, 0x27, 0xdf, 0x26, 0x3c, 0x1a, 0x4d, 0x78, 0x74, 0x36, 0xe1, 0xd1, 0xff, 0xdf, 0x7f,
	0xbf, 0xdf, 0x20, 0x87, 0xb7, 0xed, 0xe2, 0x57, 0x17, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xb5,
	0xc7, 0xed, 0x57, 0x03, 0x00, 0x00,
}

func (this *Template) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Template)
	if !ok {
		that2, ok := that.(Template)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.SourceWorkloadNamespace != that1.SourceWorkloadNamespace {
		return false
	}
	if this.SourceWorkloadName != that1.SourceWorkloadName {
		return false
	}
	if this.SourceOwner != that1.SourceOwner {
		return false
	}
	if this.SourceUid != that1.SourceUid {
		return false
	}
	if this.DestinationWorkloadNamespace != that1.DestinationWorkloadNamespace {
		return false
	}
	if this.DestinationWorkloadName != that1.DestinationWorkloadName {
		return false
	}
	if this.DestinationOwner != that1.DestinationOwner {
		return false
	}
	if this.DestinationUid != that1.DestinationUid {
		return false
	}
	if this.DestinationServiceNamespace != that1.DestinationServiceNamespace {
		return false
	}
	if this.DestinationServiceName != that1.DestinationServiceName {
		return false
	}
	if this.ContextProtocol != that1.ContextProtocol {
		return false
	}
	if this.ApiProtocol != that1.ApiProtocol {
		return false
	}
	return true
}
func (this *Template) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&edge.Template{")
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "SourceWorkloadNamespace: "+fmt.Sprintf("%#v", this.SourceWorkloadNamespace)+",\n")
	s = append(s, "SourceWorkloadName: "+fmt.Sprintf("%#v", this.SourceWorkloadName)+",\n")
	s = append(s, "SourceOwner: "+fmt.Sprintf("%#v", this.SourceOwner)+",\n")
	s = append(s, "SourceUid: "+fmt.Sprintf("%#v", this.SourceUid)+",\n")
	s = append(s, "DestinationWorkloadNamespace: "+fmt.Sprintf("%#v", this.DestinationWorkloadNamespace)+",\n")
	s = append(s, "DestinationWorkloadName: "+fmt.Sprintf("%#v", this.DestinationWorkloadName)+",\n")
	s = append(s, "DestinationOwner: "+fmt.Sprintf("%#v", this.DestinationOwner)+",\n")
	s = append(s, "DestinationUid: "+fmt.Sprintf("%#v", this.DestinationUid)+",\n")
	s = append(s, "DestinationServiceNamespace: "+fmt.Sprintf("%#v", this.DestinationServiceNamespace)+",\n")
	s = append(s, "DestinationServiceName: "+fmt.Sprintf("%#v", this.DestinationServiceName)+",\n")
	s = append(s, "ContextProtocol: "+fmt.Sprintf("%#v", this.ContextProtocol)+",\n")
	s = append(s, "ApiProtocol: "+fmt.Sprintf("%#v", this.ApiProtocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTemplate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Template) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Template) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Template) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiProtocol) > 0 {
		i -= len(m.ApiProtocol)
		copy(dAtA[i:], m.ApiProtocol)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.ApiProtocol)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.ContextProtocol) > 0 {
		i -= len(m.ContextProtocol)
		copy(dAtA[i:], m.ContextProtocol)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.ContextProtocol)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.DestinationServiceName) > 0 {
		i -= len(m.DestinationServiceName)
		copy(dAtA[i:], m.DestinationServiceName)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.DestinationServiceName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.DestinationServiceNamespace) > 0 {
		i -= len(m.DestinationServiceNamespace)
		copy(dAtA[i:], m.DestinationServiceNamespace)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.DestinationServiceNamespace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.DestinationUid) > 0 {
		i -= len(m.DestinationUid)
		copy(dAtA[i:], m.DestinationUid)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.DestinationUid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.DestinationOwner) > 0 {
		i -= len(m.DestinationOwner)
		copy(dAtA[i:], m.DestinationOwner)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.DestinationOwner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.DestinationWorkloadName) > 0 {
		i -= len(m.DestinationWorkloadName)
		copy(dAtA[i:], m.DestinationWorkloadName)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.DestinationWorkloadName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.DestinationWorkloadNamespace) > 0 {
		i -= len(m.DestinationWorkloadNamespace)
		copy(dAtA[i:], m.DestinationWorkloadNamespace)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.DestinationWorkloadNamespace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SourceUid) > 0 {
		i -= len(m.SourceUid)
		copy(dAtA[i:], m.SourceUid)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.SourceUid)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SourceOwner) > 0 {
		i -= len(m.SourceOwner)
		copy(dAtA[i:], m.SourceOwner)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.SourceOwner)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SourceWorkloadName) > 0 {
		i -= len(m.SourceWorkloadName)
		copy(dAtA[i:], m.SourceWorkloadName)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.SourceWorkloadName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SourceWorkloadNamespace) > 0 {
		i -= len(m.SourceWorkloadNamespace)
		copy(dAtA[i:], m.SourceWorkloadNamespace)
		i = encodeVarintTemplate(dAtA, i, uint64(len(m.SourceWorkloadNamespace)))
		i--
		dAtA[i] = 0x52
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTemplate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTemplate(dAtA []byte, offset int, v uint64) int {
	offset -= sovTemplate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Template) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTemplate(uint64(l))
	}
	l = len(m.SourceWorkloadNamespace)
	if l > 0 {
		n += 1 + l + sovTemplate(uint64(l))
	}
	l = len(m.SourceWorkloadName)
	if l > 0 {
		n += 1 + l + sovTemplate(uint64(l))
	}
	l = len(m.SourceOwner)
	if l > 0 {
		n += 1 + l + sovTemplate(uint64(l))
	}
	l = len(m.SourceUid)
	if l > 0 {
		n += 1 + l + sovTemplate(uint64(l))
	}
	l = len(m.DestinationWorkloadNamespace)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	l = len(m.DestinationWorkloadName)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	l = len(m.DestinationOwner)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	l = len(m.DestinationUid)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	l = len(m.DestinationServiceNamespace)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	l = len(m.DestinationServiceName)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	l = len(m.ContextProtocol)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	l = len(m.ApiProtocol)
	if l > 0 {
		n += 2 + l + sovTemplate(uint64(l))
	}
	return n
}

func sovTemplate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTemplate(x uint64) (n int) {
	return sovTemplate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Template) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Template{`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "TimeStamp", "v1beta1.TimeStamp", 1) + `,`,
		`SourceWorkloadNamespace:` + fmt.Sprintf("%v", this.SourceWorkloadNamespace) + `,`,
		`SourceWorkloadName:` + fmt.Sprintf("%v", this.SourceWorkloadName) + `,`,
		`SourceOwner:` + fmt.Sprintf("%v", this.SourceOwner) + `,`,
		`SourceUid:` + fmt.Sprintf("%v", this.SourceUid) + `,`,
		`DestinationWorkloadNamespace:` + fmt.Sprintf("%v", this.DestinationWorkloadNamespace) + `,`,
		`DestinationWorkloadName:` + fmt.Sprintf("%v", this.DestinationWorkloadName) + `,`,
		`DestinationOwner:` + fmt.Sprintf("%v", this.DestinationOwner) + `,`,
		`DestinationUid:` + fmt.Sprintf("%v", this.DestinationUid) + `,`,
		`DestinationServiceNamespace:` + fmt.Sprintf("%v", this.DestinationServiceNamespace) + `,`,
		`DestinationServiceName:` + fmt.Sprintf("%v", this.DestinationServiceName) + `,`,
		`ContextProtocol:` + fmt.Sprintf("%v", this.ContextProtocol) + `,`,
		`ApiProtocol:` + fmt.Sprintf("%v", this.ApiProtocol) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTemplate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Template) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Template: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Template: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &v1beta1.TimeStamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceWorkloadNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceWorkloadNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceWorkloadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceWorkloadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationWorkloadNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationWorkloadNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationWorkloadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationWorkloadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationServiceNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationServiceNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTemplate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTemplate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTemplate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTemplate
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTemplate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTemplate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTemplate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTemplate
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTemplate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTemplate   = fmt.Errorf("proto: integer overflow")
)
