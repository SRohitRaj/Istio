// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package authz

import (
	"context"

	"istio.io/istio/mixer/pkg/adapter"
)

// Fully qualified name of the template
const TemplateName = "authz"

// Instance is constructed by Mixer for the 'authz' template.
//
// Authz template defines subject and action. Adapters using authz template
// should validate “subject” allowed to do an “action”.
//
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html).
// Please note that if the datatype of a field is not istio.mixer.v1.config.descriptor.ValueType,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking)
// must match the datatype of the field.
//
// Example config:
// ```
// apiVersion: "config.istio.io/v1alpha2"
// kind: authz
// metadata:
//   name: authinfo
//   namespace: istio-system
// Spec:
//  subject:
//    user: source.user | request.auth.token[user] | ""
//    groups: request.auth.token[groups]
//    extra:
//     iss: request.auth.token["iss"]
//  action:
//    namespace: target.namespace | "default"
//    service: target.service | ""
//    path: request.path | "/"
//    method: request.method | "post"
//    extra:
//      version: destination.labels[version] | ""
//  ```
type Instance struct {
	// Name of the instance as specified in configuration.
	Name string

	Subject *Subject

	Action *Action
}

// List of subjects
type Subject struct {

	// The user.
	User string

	// Groups the subject belongs to.
	Groups []string

	// Additional attributes about the subject.
	Extra map[string]interface{}
}

// List of actions
type Action struct {

	// Namespace the target action is taking place in.
	Namespace string

	// The Service the action is being taken on.
	Service string

	// The what action is being taken.
	Method string

	// The resource within the service.
	Path string

	// Additional data about the action for use in policy.
	Extra map[string]interface{}
}

// HandlerBuilder must be implemented by adapters if they want to
// process data associated with the 'authz' template.
//
// Mixer uses this interface to call into the adapter at configuration time to configure
// it with adapter-specific configuration as well as all template-specific type information.
type HandlerBuilder interface {
	adapter.HandlerBuilder

	// SetAuthzTypes is invoked by Mixer to pass the template-specific Type information for instances that an adapter
	// may receive at runtime. The type information describes the shape of the instance.
	SetAuthzTypes(map[string]*Type /*Instance name -> Type*/)
}

// Handler must be implemented by adapter code if it wants to
// process data associated with the 'authz' template.
//
// Mixer uses this interface to call into the adapter at request time in order to dispatch
// created instances to the adapter. Adapters take the incoming instances and do what they
// need to achieve their primary function.
//
// The name of each instance can be used as a key into the Type map supplied to the adapter
// at configuration time via the method 'SetAuthzTypes'.
// These Type associated with an instance describes the shape of the instance
type Handler interface {
	adapter.Handler

	// HandleAuthz is called by Mixer at request time to deliver instances to
	// to an adapter.
	HandleAuthz(context.Context, *Instance) (adapter.CheckResult, error)
}
