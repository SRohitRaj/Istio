// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// $title: Trace Span
// $description: A template that represents an individual span within a distributed trace.
// $location: https://istio.io/docs/reference/config/policy-and-telemetry/templates/tracespan.html

// The `tracespan` template represents an individual span within a distributed trace.
//
// Example config:
//
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: tracespan
// metadata:
//   name: default
//   namespace: istio-system
// spec:
//   traceId: request.headers["x-b3-traceid"]
//   spanId: request.headers["x-b3-spanid"] | ""
//   parentSpanId: request.headers["x-b3-parentspanid"] | ""
//   spanName: request.path | "/"
//   startTime: request.time
//   endTime: response.time
//   clientSpan: (context.reporter.local | true) == false
//   rewriteClientSpanId: false
//   spanTags:
//     http.method: request.method | ""
//     http.status_code: response.code | 200
//     http.url: request.path | ""
//     request.size: request.size | 0
//     response.size: response.size | 0
//     source.user: source.user | ""
//     source.version: source.labels["version"] | ""
// ```
//
// See also: [Distributed Tracing](https://istio.io/docs/tasks/telemetry/distributed-tracing/)
// for information on tracing within Istio.
package traceSpan;

import "policy/v1beta1/type.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;

// TraceSpan represents an individual span within a distributed trace.
//
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/). Please note that if the datatype of a field is not istio.policy.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference//config/policy-and-telemetry/expression-language/#type-checking) must match the datatype of the field.
message Template {
  // Required. Trace ID is the unique identifier for a trace. All spans from the
  // same trace share the same Trace ID.
  string trace_id = 1;

  // Optional. Span ID is the unique identifier for a span within a trace. It is
  // assigned when the span is created.
  string span_id = 2;

  // Optional. Parent Span ID is the unique identifier for a parent span of this
  // span instance. If this is a root span, then this field MUST be empty.
  string parent_span_id = 3;

  // Required. Span name is a description of the span's operation.
  //
  // For example, the name can be a qualified method name or a file name
  // and a line number where the operation is called. A best practice is to use
  // the same display name within an application and at the same call point.
  // This makes it easier to correlate spans in different traces.
  string span_name = 4;

  // Required. The start time of the span.
  // (-- api-linter: standard-fields=disabled --)
  istio.policy.v1beta1.TimeStamp start_time = 5;

  // Required. The end time of the span.
  // (-- api-linter: standard-fields=disabled --)
  istio.policy.v1beta1.TimeStamp end_time = 6;

  // Optional. Span tags are a set of < key, value > pairs that provide metadata
  // for the entire span. The values can be specified in the form of
  // expressions.
  map<string, istio.policy.v1beta1.Value> span_tags = 7;

  // Optional. HTTP status code used to set the span status. If unset or set to
  // 0, the span status will be assumed to be successful.
  int64 http_status_code = 8;

  // Optional. client_span indicates the span kind. True for client spans and
  // False or not provided for server spans. Using bool instead of enum is a
  // temporary work around since mixer expression language does not yet support
  // enum type.
  bool client_span = 9;

  // Optional. rewrite_client_span_id is used to indicate whether to create a
  // new client span id to accommodate Zipkin shared span model. Some tracing
  // systems like Stackdriver separates a RPC into client span and server span.
  // To solve this incompatibility, deterministically rewriting both span id of
  // client span and parent span id of server span to the same newly generated
  // id.
  bool rewrite_client_span_id = 10;

  // Optional. Identifies the source (client side) of this span.
  // Should usually be set to `source.workload.name`.
  string source_name = 11;

  // Optional. Client IP address. Should usually be set to `source.ip`.
  istio.policy.v1beta1.IPAddress source_ip = 12;

  // Optional. Identifies the destination (server side) of this span.
  // Should usually be set to `destination.workload.name`.
  string destination_name = 13;

  // Optional. Server IP address. Should usually be set to `destination.ip`.
  istio.policy.v1beta1.IPAddress destination_ip = 14;

  // Optional. Request body size. Should usually be set to `request.size`.
  int64 request_size = 15;

  // Optional. Total request size (headers and body).
  // Should usually be set to `request.total_size`.
  int64 request_total_size = 16;

  // Optional. Response body size. Should usually be set to `response.size`.
  int64 response_size = 17;

  // Optional. Response total size (headers and body).
  // Should usually be set to `response.total_size`.
  int64 response_total_size = 18;

  // Optional. One of "http", "https", or "grpc" or any other value of
  // the `api.protocol` attribute. Should usually be set to `api.protocol`.
  string api_protocol = 19;
}
