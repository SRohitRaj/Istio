// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/template/sample/report/ReportTesterTemplate.proto

/*
	Package istio_mixer_adapter_sample_report is a generated protocol buffer package.

	It is generated from these files:
		mixer/template/sample/report/ReportTesterTemplate.proto

	It has these top-level messages:
		Template
		Res1
		Res2
*/
package istio_mixer_adapter_sample_report

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "istio.io/api/mixer/adapter/model/v1beta1"
import istio_policy_v1beta1 "istio.io/api/policy/v1beta1"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Template struct {
	Value           *istio_policy_v1beta1.Value            `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Dimensions      map[string]*istio_policy_v1beta1.Value `protobuf:"bytes,2,rep,name=dimensions" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Int64Primitive  int64                                  `protobuf:"varint,3,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
	BoolPrimitive   bool                                   `protobuf:"varint,4,opt,name=boolPrimitive,proto3" json:"boolPrimitive,omitempty"`
	DoublePrimitive float64                                `protobuf:"fixed64,5,opt,name=doublePrimitive,proto3" json:"doublePrimitive,omitempty"`
	StringPrimitive string                                 `protobuf:"bytes,6,opt,name=stringPrimitive,proto3" json:"stringPrimitive,omitempty"`
	Int64Map        map[string]int64                       `protobuf:"bytes,7,rep,name=int64Map" json:"int64Map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TimeStamp       *istio_policy_v1beta1.TimeStamp        `protobuf:"bytes,9,opt,name=timeStamp" json:"timeStamp,omitempty"`
	Duration        *istio_policy_v1beta1.Duration         `protobuf:"bytes,10,opt,name=duration" json:"duration,omitempty"`
	Res1            *Res1                                  `protobuf:"bytes,11,opt,name=res1" json:"res1,omitempty"`
}

func (m *Template) Reset()                    { *m = Template{} }
func (*Template) ProtoMessage()               {}
func (*Template) Descriptor() ([]byte, []int) { return fileDescriptorReportTesterTemplate, []int{0} }

func (m *Template) GetValue() *istio_policy_v1beta1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Template) GetDimensions() map[string]*istio_policy_v1beta1.Value {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Template) GetInt64Primitive() int64 {
	if m != nil {
		return m.Int64Primitive
	}
	return 0
}

func (m *Template) GetBoolPrimitive() bool {
	if m != nil {
		return m.BoolPrimitive
	}
	return false
}

func (m *Template) GetDoublePrimitive() float64 {
	if m != nil {
		return m.DoublePrimitive
	}
	return 0
}

func (m *Template) GetStringPrimitive() string {
	if m != nil {
		return m.StringPrimitive
	}
	return ""
}

func (m *Template) GetInt64Map() map[string]int64 {
	if m != nil {
		return m.Int64Map
	}
	return nil
}

func (m *Template) GetTimeStamp() *istio_policy_v1beta1.TimeStamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *Template) GetDuration() *istio_policy_v1beta1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Template) GetRes1() *Res1 {
	if m != nil {
		return m.Res1
	}
	return nil
}

type Res1 struct {
	Value           *istio_policy_v1beta1.Value            `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Dimensions      map[string]*istio_policy_v1beta1.Value `protobuf:"bytes,2,rep,name=dimensions" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Int64Primitive  int64                                  `protobuf:"varint,3,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
	BoolPrimitive   bool                                   `protobuf:"varint,4,opt,name=boolPrimitive,proto3" json:"boolPrimitive,omitempty"`
	DoublePrimitive float64                                `protobuf:"fixed64,5,opt,name=doublePrimitive,proto3" json:"doublePrimitive,omitempty"`
	StringPrimitive string                                 `protobuf:"bytes,6,opt,name=stringPrimitive,proto3" json:"stringPrimitive,omitempty"`
	Int64Map        map[string]int64                       `protobuf:"bytes,7,rep,name=int64Map" json:"int64Map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TimeStamp       *istio_policy_v1beta1.TimeStamp        `protobuf:"bytes,9,opt,name=timeStamp" json:"timeStamp,omitempty"`
	Duration        *istio_policy_v1beta1.Duration         `protobuf:"bytes,10,opt,name=duration" json:"duration,omitempty"`
	Res2            *Res2                                  `protobuf:"bytes,11,opt,name=res2" json:"res2,omitempty"`
	Res2Map         map[string]*Res2                       `protobuf:"bytes,12,rep,name=res2_map,json=res2Map" json:"res2_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Res1) Reset()                    { *m = Res1{} }
func (*Res1) ProtoMessage()               {}
func (*Res1) Descriptor() ([]byte, []int) { return fileDescriptorReportTesterTemplate, []int{1} }

func (m *Res1) GetValue() *istio_policy_v1beta1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Res1) GetDimensions() map[string]*istio_policy_v1beta1.Value {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Res1) GetInt64Primitive() int64 {
	if m != nil {
		return m.Int64Primitive
	}
	return 0
}

func (m *Res1) GetBoolPrimitive() bool {
	if m != nil {
		return m.BoolPrimitive
	}
	return false
}

func (m *Res1) GetDoublePrimitive() float64 {
	if m != nil {
		return m.DoublePrimitive
	}
	return 0
}

func (m *Res1) GetStringPrimitive() string {
	if m != nil {
		return m.StringPrimitive
	}
	return ""
}

func (m *Res1) GetInt64Map() map[string]int64 {
	if m != nil {
		return m.Int64Map
	}
	return nil
}

func (m *Res1) GetTimeStamp() *istio_policy_v1beta1.TimeStamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *Res1) GetDuration() *istio_policy_v1beta1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Res1) GetRes2() *Res2 {
	if m != nil {
		return m.Res2
	}
	return nil
}

func (m *Res1) GetRes2Map() map[string]*Res2 {
	if m != nil {
		return m.Res2Map
	}
	return nil
}

type Res2 struct {
	Value          *istio_policy_v1beta1.Value            `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Dimensions     map[string]*istio_policy_v1beta1.Value `protobuf:"bytes,2,rep,name=dimensions" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Int64Primitive int64                                  `protobuf:"varint,3,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
	TimeStamp      *istio_policy_v1beta1.TimeStamp        `protobuf:"bytes,9,opt,name=timeStamp" json:"timeStamp,omitempty"`
	Duration       *istio_policy_v1beta1.Duration         `protobuf:"bytes,10,opt,name=duration" json:"duration,omitempty"`
	IpAddr         *istio_policy_v1beta1.IPAddress        `protobuf:"bytes,11,opt,name=ip_addr,json=ipAddr" json:"ip_addr,omitempty"`
	DnsName        *istio_policy_v1beta1.DNSName          `protobuf:"bytes,12,opt,name=dns_name,json=dnsName" json:"dns_name,omitempty"`
	EmailAddr      *istio_policy_v1beta1.EmailAddress     `protobuf:"bytes,13,opt,name=email_addr,json=emailAddr" json:"email_addr,omitempty"`
	Uri            *istio_policy_v1beta1.Uri              `protobuf:"bytes,14,opt,name=uri" json:"uri,omitempty"`
}

func (m *Res2) Reset()                    { *m = Res2{} }
func (*Res2) ProtoMessage()               {}
func (*Res2) Descriptor() ([]byte, []int) { return fileDescriptorReportTesterTemplate, []int{2} }

func (m *Res2) GetValue() *istio_policy_v1beta1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Res2) GetDimensions() map[string]*istio_policy_v1beta1.Value {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Res2) GetInt64Primitive() int64 {
	if m != nil {
		return m.Int64Primitive
	}
	return 0
}

func (m *Res2) GetTimeStamp() *istio_policy_v1beta1.TimeStamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *Res2) GetDuration() *istio_policy_v1beta1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Res2) GetIpAddr() *istio_policy_v1beta1.IPAddress {
	if m != nil {
		return m.IpAddr
	}
	return nil
}

func (m *Res2) GetDnsName() *istio_policy_v1beta1.DNSName {
	if m != nil {
		return m.DnsName
	}
	return nil
}

func (m *Res2) GetEmailAddr() *istio_policy_v1beta1.EmailAddress {
	if m != nil {
		return m.EmailAddr
	}
	return nil
}

func (m *Res2) GetUri() *istio_policy_v1beta1.Uri {
	if m != nil {
		return m.Uri
	}
	return nil
}

func init() {
	proto.RegisterType((*Template)(nil), "istio.mixer.adapter.sample.report.Template")
	proto.RegisterType((*Res1)(nil), "istio.mixer.adapter.sample.report.Res1")
	proto.RegisterType((*Res2)(nil), "istio.mixer.adapter.sample.report.Res2")
}
func (this *Template) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Template)
	if !ok {
		that2, ok := that.(Template)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.Int64Primitive != that1.Int64Primitive {
		return false
	}
	if this.BoolPrimitive != that1.BoolPrimitive {
		return false
	}
	if this.DoublePrimitive != that1.DoublePrimitive {
		return false
	}
	if this.StringPrimitive != that1.StringPrimitive {
		return false
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if !this.TimeStamp.Equal(that1.TimeStamp) {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	if !this.Res1.Equal(that1.Res1) {
		return false
	}
	return true
}
func (this *Res1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Res1)
	if !ok {
		that2, ok := that.(Res1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.Int64Primitive != that1.Int64Primitive {
		return false
	}
	if this.BoolPrimitive != that1.BoolPrimitive {
		return false
	}
	if this.DoublePrimitive != that1.DoublePrimitive {
		return false
	}
	if this.StringPrimitive != that1.StringPrimitive {
		return false
	}
	if len(this.Int64Map) != len(that1.Int64Map) {
		return false
	}
	for i := range this.Int64Map {
		if this.Int64Map[i] != that1.Int64Map[i] {
			return false
		}
	}
	if !this.TimeStamp.Equal(that1.TimeStamp) {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	if !this.Res2.Equal(that1.Res2) {
		return false
	}
	if len(this.Res2Map) != len(that1.Res2Map) {
		return false
	}
	for i := range this.Res2Map {
		if !this.Res2Map[i].Equal(that1.Res2Map[i]) {
			return false
		}
	}
	return true
}
func (this *Res2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Res2)
	if !ok {
		that2, ok := that.(Res2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	if this.Int64Primitive != that1.Int64Primitive {
		return false
	}
	if !this.TimeStamp.Equal(that1.TimeStamp) {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	if !this.IpAddr.Equal(that1.IpAddr) {
		return false
	}
	if !this.DnsName.Equal(that1.DnsName) {
		return false
	}
	if !this.EmailAddr.Equal(that1.EmailAddr) {
		return false
	}
	if !this.Uri.Equal(that1.Uri) {
		return false
	}
	return true
}
func (this *Template) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&istio_mixer_adapter_sample_report.Template{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	keysForDimensions := make([]string, 0, len(this.Dimensions))
	for k, _ := range this.Dimensions {
		keysForDimensions = append(keysForDimensions, k)
	}
	sortkeys.Strings(keysForDimensions)
	mapStringForDimensions := "map[string]*istio_policy_v1beta1.Value{"
	for _, k := range keysForDimensions {
		mapStringForDimensions += fmt.Sprintf("%#v: %#v,", k, this.Dimensions[k])
	}
	mapStringForDimensions += "}"
	if this.Dimensions != nil {
		s = append(s, "Dimensions: "+mapStringForDimensions+",\n")
	}
	s = append(s, "Int64Primitive: "+fmt.Sprintf("%#v", this.Int64Primitive)+",\n")
	s = append(s, "BoolPrimitive: "+fmt.Sprintf("%#v", this.BoolPrimitive)+",\n")
	s = append(s, "DoublePrimitive: "+fmt.Sprintf("%#v", this.DoublePrimitive)+",\n")
	s = append(s, "StringPrimitive: "+fmt.Sprintf("%#v", this.StringPrimitive)+",\n")
	keysForInt64Map := make([]string, 0, len(this.Int64Map))
	for k, _ := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	sortkeys.Strings(keysForInt64Map)
	mapStringForInt64Map := "map[string]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	if this.TimeStamp != nil {
		s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	}
	if this.Duration != nil {
		s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	}
	if this.Res1 != nil {
		s = append(s, "Res1: "+fmt.Sprintf("%#v", this.Res1)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Res1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&istio_mixer_adapter_sample_report.Res1{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	keysForDimensions := make([]string, 0, len(this.Dimensions))
	for k, _ := range this.Dimensions {
		keysForDimensions = append(keysForDimensions, k)
	}
	sortkeys.Strings(keysForDimensions)
	mapStringForDimensions := "map[string]*istio_policy_v1beta1.Value{"
	for _, k := range keysForDimensions {
		mapStringForDimensions += fmt.Sprintf("%#v: %#v,", k, this.Dimensions[k])
	}
	mapStringForDimensions += "}"
	if this.Dimensions != nil {
		s = append(s, "Dimensions: "+mapStringForDimensions+",\n")
	}
	s = append(s, "Int64Primitive: "+fmt.Sprintf("%#v", this.Int64Primitive)+",\n")
	s = append(s, "BoolPrimitive: "+fmt.Sprintf("%#v", this.BoolPrimitive)+",\n")
	s = append(s, "DoublePrimitive: "+fmt.Sprintf("%#v", this.DoublePrimitive)+",\n")
	s = append(s, "StringPrimitive: "+fmt.Sprintf("%#v", this.StringPrimitive)+",\n")
	keysForInt64Map := make([]string, 0, len(this.Int64Map))
	for k, _ := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	sortkeys.Strings(keysForInt64Map)
	mapStringForInt64Map := "map[string]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%#v: %#v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	if this.Int64Map != nil {
		s = append(s, "Int64Map: "+mapStringForInt64Map+",\n")
	}
	if this.TimeStamp != nil {
		s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	}
	if this.Duration != nil {
		s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	}
	if this.Res2 != nil {
		s = append(s, "Res2: "+fmt.Sprintf("%#v", this.Res2)+",\n")
	}
	keysForRes2Map := make([]string, 0, len(this.Res2Map))
	for k, _ := range this.Res2Map {
		keysForRes2Map = append(keysForRes2Map, k)
	}
	sortkeys.Strings(keysForRes2Map)
	mapStringForRes2Map := "map[string]*Res2{"
	for _, k := range keysForRes2Map {
		mapStringForRes2Map += fmt.Sprintf("%#v: %#v,", k, this.Res2Map[k])
	}
	mapStringForRes2Map += "}"
	if this.Res2Map != nil {
		s = append(s, "Res2Map: "+mapStringForRes2Map+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Res2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&istio_mixer_adapter_sample_report.Res2{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	keysForDimensions := make([]string, 0, len(this.Dimensions))
	for k, _ := range this.Dimensions {
		keysForDimensions = append(keysForDimensions, k)
	}
	sortkeys.Strings(keysForDimensions)
	mapStringForDimensions := "map[string]*istio_policy_v1beta1.Value{"
	for _, k := range keysForDimensions {
		mapStringForDimensions += fmt.Sprintf("%#v: %#v,", k, this.Dimensions[k])
	}
	mapStringForDimensions += "}"
	if this.Dimensions != nil {
		s = append(s, "Dimensions: "+mapStringForDimensions+",\n")
	}
	s = append(s, "Int64Primitive: "+fmt.Sprintf("%#v", this.Int64Primitive)+",\n")
	if this.TimeStamp != nil {
		s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	}
	if this.Duration != nil {
		s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	}
	if this.IpAddr != nil {
		s = append(s, "IpAddr: "+fmt.Sprintf("%#v", this.IpAddr)+",\n")
	}
	if this.DnsName != nil {
		s = append(s, "DnsName: "+fmt.Sprintf("%#v", this.DnsName)+",\n")
	}
	if this.EmailAddr != nil {
		s = append(s, "EmailAddr: "+fmt.Sprintf("%#v", this.EmailAddr)+",\n")
	}
	if this.Uri != nil {
		s = append(s, "Uri: "+fmt.Sprintf("%#v", this.Uri)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReportTesterTemplate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Template) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Template) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Dimensions) > 0 {
		for k, _ := range m.Dimensions {
			dAtA[i] = 0x12
			i++
			v := m.Dimensions[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReportTesterTemplate(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + msgSize
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReportTesterTemplate(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.Int64Primitive != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Int64Primitive))
	}
	if m.BoolPrimitive {
		dAtA[i] = 0x20
		i++
		if m.BoolPrimitive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DoublePrimitive != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoublePrimitive))))
		i += 8
	}
	if len(m.StringPrimitive) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(m.StringPrimitive)))
		i += copy(dAtA[i:], m.StringPrimitive)
	}
	if len(m.Int64Map) > 0 {
		for k, _ := range m.Int64Map {
			dAtA[i] = 0x3a
			i++
			v := m.Int64Map[k]
			mapSize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + 1 + sovReportTesterTemplate(uint64(v))
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(v))
		}
	}
	if m.TimeStamp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.TimeStamp.Size()))
		n3, err := m.TimeStamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Duration != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Duration.Size()))
		n4, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Res1 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Res1.Size()))
		n5, err := m.Res1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Res1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Res1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Value.Size()))
		n6, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Dimensions) > 0 {
		for k, _ := range m.Dimensions {
			dAtA[i] = 0x12
			i++
			v := m.Dimensions[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReportTesterTemplate(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + msgSize
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReportTesterTemplate(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if m.Int64Primitive != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Int64Primitive))
	}
	if m.BoolPrimitive {
		dAtA[i] = 0x20
		i++
		if m.BoolPrimitive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DoublePrimitive != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoublePrimitive))))
		i += 8
	}
	if len(m.StringPrimitive) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(m.StringPrimitive)))
		i += copy(dAtA[i:], m.StringPrimitive)
	}
	if len(m.Int64Map) > 0 {
		for k, _ := range m.Int64Map {
			dAtA[i] = 0x3a
			i++
			v := m.Int64Map[k]
			mapSize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + 1 + sovReportTesterTemplate(uint64(v))
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(v))
		}
	}
	if m.TimeStamp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.TimeStamp.Size()))
		n8, err := m.TimeStamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Duration != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Duration.Size()))
		n9, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Res2 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Res2.Size()))
		n10, err := m.Res2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Res2Map) > 0 {
		for k, _ := range m.Res2Map {
			dAtA[i] = 0x62
			i++
			v := m.Res2Map[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReportTesterTemplate(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + msgSize
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReportTesterTemplate(dAtA, i, uint64(v.Size()))
				n11, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n11
			}
		}
	}
	return i, nil
}

func (m *Res2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Res2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Value.Size()))
		n12, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Dimensions) > 0 {
		for k, _ := range m.Dimensions {
			dAtA[i] = 0x12
			i++
			v := m.Dimensions[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReportTesterTemplate(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + msgSize
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintReportTesterTemplate(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReportTesterTemplate(dAtA, i, uint64(v.Size()))
				n13, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n13
			}
		}
	}
	if m.Int64Primitive != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Int64Primitive))
	}
	if m.TimeStamp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.TimeStamp.Size()))
		n14, err := m.TimeStamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Duration != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Duration.Size()))
		n15, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.IpAddr != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.IpAddr.Size()))
		n16, err := m.IpAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.DnsName != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.DnsName.Size()))
		n17, err := m.DnsName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.EmailAddr != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.EmailAddr.Size()))
		n18, err := m.EmailAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Uri != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintReportTesterTemplate(dAtA, i, uint64(m.Uri.Size()))
		n19, err := m.Uri.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func encodeVarintReportTesterTemplate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Template) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		for k, v := range m.Dimensions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReportTesterTemplate(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReportTesterTemplate(uint64(mapEntrySize))
		}
	}
	if m.Int64Primitive != 0 {
		n += 1 + sovReportTesterTemplate(uint64(m.Int64Primitive))
	}
	if m.BoolPrimitive {
		n += 2
	}
	if m.DoublePrimitive != 0 {
		n += 9
	}
	l = len(m.StringPrimitive)
	if l > 0 {
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + 1 + sovReportTesterTemplate(uint64(v))
			n += mapEntrySize + 1 + sovReportTesterTemplate(uint64(mapEntrySize))
		}
	}
	if m.TimeStamp != nil {
		l = m.TimeStamp.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.Res1 != nil {
		l = m.Res1.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	return n
}

func (m *Res1) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		for k, v := range m.Dimensions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReportTesterTemplate(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReportTesterTemplate(uint64(mapEntrySize))
		}
	}
	if m.Int64Primitive != 0 {
		n += 1 + sovReportTesterTemplate(uint64(m.Int64Primitive))
	}
	if m.BoolPrimitive {
		n += 2
	}
	if m.DoublePrimitive != 0 {
		n += 9
	}
	l = len(m.StringPrimitive)
	if l > 0 {
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if len(m.Int64Map) > 0 {
		for k, v := range m.Int64Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + 1 + sovReportTesterTemplate(uint64(v))
			n += mapEntrySize + 1 + sovReportTesterTemplate(uint64(mapEntrySize))
		}
	}
	if m.TimeStamp != nil {
		l = m.TimeStamp.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.Res2 != nil {
		l = m.Res2.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if len(m.Res2Map) > 0 {
		for k, v := range m.Res2Map {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReportTesterTemplate(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReportTesterTemplate(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Res2) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		for k, v := range m.Dimensions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReportTesterTemplate(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReportTesterTemplate(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReportTesterTemplate(uint64(mapEntrySize))
		}
	}
	if m.Int64Primitive != 0 {
		n += 1 + sovReportTesterTemplate(uint64(m.Int64Primitive))
	}
	if m.TimeStamp != nil {
		l = m.TimeStamp.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.IpAddr != nil {
		l = m.IpAddr.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.DnsName != nil {
		l = m.DnsName.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.EmailAddr != nil {
		l = m.EmailAddr.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	if m.Uri != nil {
		l = m.Uri.Size()
		n += 1 + l + sovReportTesterTemplate(uint64(l))
	}
	return n
}

func sovReportTesterTemplate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReportTesterTemplate(x uint64) (n int) {
	return sovReportTesterTemplate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Template) String() string {
	if this == nil {
		return "nil"
	}
	keysForDimensions := make([]string, 0, len(this.Dimensions))
	for k, _ := range this.Dimensions {
		keysForDimensions = append(keysForDimensions, k)
	}
	sortkeys.Strings(keysForDimensions)
	mapStringForDimensions := "map[string]*istio_policy_v1beta1.Value{"
	for _, k := range keysForDimensions {
		mapStringForDimensions += fmt.Sprintf("%v: %v,", k, this.Dimensions[k])
	}
	mapStringForDimensions += "}"
	keysForInt64Map := make([]string, 0, len(this.Int64Map))
	for k, _ := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	sortkeys.Strings(keysForInt64Map)
	mapStringForInt64Map := "map[string]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	s := strings.Join([]string{`&Template{`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Value", "istio_policy_v1beta1.Value", 1) + `,`,
		`Dimensions:` + mapStringForDimensions + `,`,
		`Int64Primitive:` + fmt.Sprintf("%v", this.Int64Primitive) + `,`,
		`BoolPrimitive:` + fmt.Sprintf("%v", this.BoolPrimitive) + `,`,
		`DoublePrimitive:` + fmt.Sprintf("%v", this.DoublePrimitive) + `,`,
		`StringPrimitive:` + fmt.Sprintf("%v", this.StringPrimitive) + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`TimeStamp:` + strings.Replace(fmt.Sprintf("%v", this.TimeStamp), "TimeStamp", "istio_policy_v1beta1.TimeStamp", 1) + `,`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "istio_policy_v1beta1.Duration", 1) + `,`,
		`Res1:` + strings.Replace(fmt.Sprintf("%v", this.Res1), "Res1", "Res1", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Res1) String() string {
	if this == nil {
		return "nil"
	}
	keysForDimensions := make([]string, 0, len(this.Dimensions))
	for k, _ := range this.Dimensions {
		keysForDimensions = append(keysForDimensions, k)
	}
	sortkeys.Strings(keysForDimensions)
	mapStringForDimensions := "map[string]*istio_policy_v1beta1.Value{"
	for _, k := range keysForDimensions {
		mapStringForDimensions += fmt.Sprintf("%v: %v,", k, this.Dimensions[k])
	}
	mapStringForDimensions += "}"
	keysForInt64Map := make([]string, 0, len(this.Int64Map))
	for k, _ := range this.Int64Map {
		keysForInt64Map = append(keysForInt64Map, k)
	}
	sortkeys.Strings(keysForInt64Map)
	mapStringForInt64Map := "map[string]int64{"
	for _, k := range keysForInt64Map {
		mapStringForInt64Map += fmt.Sprintf("%v: %v,", k, this.Int64Map[k])
	}
	mapStringForInt64Map += "}"
	keysForRes2Map := make([]string, 0, len(this.Res2Map))
	for k, _ := range this.Res2Map {
		keysForRes2Map = append(keysForRes2Map, k)
	}
	sortkeys.Strings(keysForRes2Map)
	mapStringForRes2Map := "map[string]*Res2{"
	for _, k := range keysForRes2Map {
		mapStringForRes2Map += fmt.Sprintf("%v: %v,", k, this.Res2Map[k])
	}
	mapStringForRes2Map += "}"
	s := strings.Join([]string{`&Res1{`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Value", "istio_policy_v1beta1.Value", 1) + `,`,
		`Dimensions:` + mapStringForDimensions + `,`,
		`Int64Primitive:` + fmt.Sprintf("%v", this.Int64Primitive) + `,`,
		`BoolPrimitive:` + fmt.Sprintf("%v", this.BoolPrimitive) + `,`,
		`DoublePrimitive:` + fmt.Sprintf("%v", this.DoublePrimitive) + `,`,
		`StringPrimitive:` + fmt.Sprintf("%v", this.StringPrimitive) + `,`,
		`Int64Map:` + mapStringForInt64Map + `,`,
		`TimeStamp:` + strings.Replace(fmt.Sprintf("%v", this.TimeStamp), "TimeStamp", "istio_policy_v1beta1.TimeStamp", 1) + `,`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "istio_policy_v1beta1.Duration", 1) + `,`,
		`Res2:` + strings.Replace(fmt.Sprintf("%v", this.Res2), "Res2", "Res2", 1) + `,`,
		`Res2Map:` + mapStringForRes2Map + `,`,
		`}`,
	}, "")
	return s
}
func (this *Res2) String() string {
	if this == nil {
		return "nil"
	}
	keysForDimensions := make([]string, 0, len(this.Dimensions))
	for k, _ := range this.Dimensions {
		keysForDimensions = append(keysForDimensions, k)
	}
	sortkeys.Strings(keysForDimensions)
	mapStringForDimensions := "map[string]*istio_policy_v1beta1.Value{"
	for _, k := range keysForDimensions {
		mapStringForDimensions += fmt.Sprintf("%v: %v,", k, this.Dimensions[k])
	}
	mapStringForDimensions += "}"
	s := strings.Join([]string{`&Res2{`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Value", "istio_policy_v1beta1.Value", 1) + `,`,
		`Dimensions:` + mapStringForDimensions + `,`,
		`Int64Primitive:` + fmt.Sprintf("%v", this.Int64Primitive) + `,`,
		`TimeStamp:` + strings.Replace(fmt.Sprintf("%v", this.TimeStamp), "TimeStamp", "istio_policy_v1beta1.TimeStamp", 1) + `,`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "istio_policy_v1beta1.Duration", 1) + `,`,
		`IpAddr:` + strings.Replace(fmt.Sprintf("%v", this.IpAddr), "IPAddress", "istio_policy_v1beta1.IPAddress", 1) + `,`,
		`DnsName:` + strings.Replace(fmt.Sprintf("%v", this.DnsName), "DNSName", "istio_policy_v1beta1.DNSName", 1) + `,`,
		`EmailAddr:` + strings.Replace(fmt.Sprintf("%v", this.EmailAddr), "EmailAddress", "istio_policy_v1beta1.EmailAddress", 1) + `,`,
		`Uri:` + strings.Replace(fmt.Sprintf("%v", this.Uri), "Uri", "istio_policy_v1beta1.Uri", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReportTesterTemplate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Template) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTesterTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Template: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Template: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &istio_policy_v1beta1.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimensions == nil {
				m.Dimensions = make(map[string]*istio_policy_v1beta1.Value)
			}
			var mapkey string
			var mapvalue *istio_policy_v1beta1.Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTesterTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &istio_policy_v1beta1.Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Dimensions[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Primitive", wireType)
			}
			m.Int64Primitive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Primitive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolPrimitive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolPrimitive = bool(v != 0)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoublePrimitive", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoublePrimitive = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringPrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringPrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Int64Map == nil {
				m.Int64Map = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTesterTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Int64Map[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = &istio_policy_v1beta1.TimeStamp{}
			}
			if err := m.TimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &istio_policy_v1beta1.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res1 == nil {
				m.Res1 = &Res1{}
			}
			if err := m.Res1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Res1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTesterTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Res1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Res1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &istio_policy_v1beta1.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimensions == nil {
				m.Dimensions = make(map[string]*istio_policy_v1beta1.Value)
			}
			var mapkey string
			var mapvalue *istio_policy_v1beta1.Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTesterTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &istio_policy_v1beta1.Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Dimensions[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Primitive", wireType)
			}
			m.Int64Primitive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Primitive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolPrimitive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolPrimitive = bool(v != 0)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoublePrimitive", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoublePrimitive = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringPrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringPrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Int64Map == nil {
				m.Int64Map = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTesterTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Int64Map[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = &istio_policy_v1beta1.TimeStamp{}
			}
			if err := m.TimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &istio_policy_v1beta1.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res2 == nil {
				m.Res2 = &Res2{}
			}
			if err := m.Res2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res2Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res2Map == nil {
				m.Res2Map = make(map[string]*Res2)
			}
			var mapkey string
			var mapvalue *Res2
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTesterTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Res2{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res2Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Res2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReportTesterTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Res2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Res2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &istio_policy_v1beta1.Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dimensions == nil {
				m.Dimensions = make(map[string]*istio_policy_v1beta1.Value)
			}
			var mapkey string
			var mapvalue *istio_policy_v1beta1.Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReportTesterTemplate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReportTesterTemplate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &istio_policy_v1beta1.Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReportTesterTemplate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Dimensions[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Primitive", wireType)
			}
			m.Int64Primitive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Primitive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStamp == nil {
				m.TimeStamp = &istio_policy_v1beta1.TimeStamp{}
			}
			if err := m.TimeStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &istio_policy_v1beta1.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpAddr == nil {
				m.IpAddr = &istio_policy_v1beta1.IPAddress{}
			}
			if err := m.IpAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsName == nil {
				m.DnsName = &istio_policy_v1beta1.DNSName{}
			}
			if err := m.DnsName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmailAddr == nil {
				m.EmailAddr = &istio_policy_v1beta1.EmailAddress{}
			}
			if err := m.EmailAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uri == nil {
				m.Uri = &istio_policy_v1beta1.Uri{}
			}
			if err := m.Uri.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReportTesterTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReportTesterTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReportTesterTemplate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReportTesterTemplate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReportTesterTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReportTesterTemplate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReportTesterTemplate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReportTesterTemplate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReportTesterTemplate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReportTesterTemplate   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("mixer/template/sample/report/ReportTesterTemplate.proto", fileDescriptorReportTesterTemplate)
}

var fileDescriptorReportTesterTemplate = []byte{
	// 683 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x96, 0x4d, 0x4f, 0xd4, 0x4e,
	0x1c, 0xc7, 0x77, 0x76, 0x17, 0x76, 0x77, 0x78, 0xfa, 0x67, 0xf2, 0x3f, 0x94, 0x35, 0xd6, 0x95,
	0x18, 0x6d, 0xa2, 0x69, 0xb3, 0x15, 0x05, 0x21, 0x1c, 0x30, 0x70, 0xe0, 0x20, 0xe2, 0x00, 0x9a,
	0xe8, 0x81, 0xcc, 0xd2, 0x89, 0x99, 0xd8, 0xa7, 0xcc, 0xcc, 0x12, 0xf6, 0xe6, 0x2b, 0x30, 0x26,
	0xbe, 0x09, 0x5f, 0x8a, 0x47, 0xe2, 0xc9, 0xa3, 0x54, 0x0e, 0x1e, 0xb9, 0x98, 0x78, 0x34, 0x9d,
	0x76, 0x1f, 0x2d, 0xb1, 0x18, 0x1f, 0xf0, 0xd4, 0x76, 0xf6, 0xfb, 0xf9, 0x3d, 0xcd, 0xf7, 0x97,
	0x2c, 0x5c, 0xf0, 0xd8, 0x21, 0xe5, 0x96, 0xa4, 0x5e, 0xe8, 0x12, 0x49, 0x2d, 0x41, 0xbc, 0xd0,
	0xa5, 0x16, 0xa7, 0x61, 0xc0, 0xa5, 0x85, 0xd5, 0x63, 0x87, 0x0a, 0x49, 0xf9, 0x4e, 0x2a, 0x31,
	0x43, 0x1e, 0xc8, 0x00, 0x5d, 0x65, 0x42, 0xb2, 0xc0, 0x54, 0xb8, 0x49, 0x1c, 0x12, 0x4a, 0xca,
	0xcd, 0x84, 0x36, 0x13, 0xba, 0x7e, 0x2b, 0x89, 0x9d, 0xfe, 0x68, 0x79, 0x81, 0x43, 0x5d, 0xeb,
	0xa0, 0xd9, 0xa2, 0x92, 0x34, 0x2d, 0x7a, 0x28, 0xa9, 0x2f, 0x58, 0xe0, 0x8b, 0x24, 0x60, 0x7d,
	0x36, 0x0c, 0x5c, 0xb6, 0xdf, 0xe9, 0x09, 0x64, 0x27, 0x4c, 0x73, 0xcd, 0x9d, 0x8c, 0xc1, 0x6a,
	0x37, 0x3d, 0x6a, 0xc2, 0xb1, 0x03, 0xe2, 0xb6, 0xa9, 0x06, 0x1a, 0xc0, 0x98, 0xb0, 0x2f, 0x99,
	0x49, 0x21, 0x09, 0x6d, 0xa6, 0xb4, 0xf9, 0x38, 0x96, 0xe0, 0x44, 0x89, 0x9e, 0x41, 0xe8, 0x30,
	0x2f, 0x4d, 0xa7, 0x15, 0x1b, 0x25, 0x63, 0xc2, 0x5e, 0x36, 0x7f, 0xd8, 0x80, 0xd9, 0x6b, 0x79,
	0xad, 0x47, 0xaf, 0xfb, 0x92, 0x77, 0xf0, 0x40, 0x38, 0x74, 0x1d, 0x4e, 0x33, 0x5f, 0xde, 0x9d,
	0xdf, 0xe2, 0xcc, 0x63, 0x92, 0x1d, 0x50, 0xad, 0xd4, 0x00, 0x46, 0x09, 0x8f, 0x9c, 0xa2, 0x6b,
	0x70, 0xaa, 0x15, 0x04, 0x6e, 0x5f, 0x56, 0x6e, 0x00, 0xa3, 0x8a, 0x87, 0x0f, 0x91, 0x01, 0x67,
	0x9c, 0xa0, 0xdd, 0x72, 0x69, 0x5f, 0x37, 0xd6, 0x00, 0x06, 0xc0, 0xa3, 0xc7, 0xb1, 0x52, 0x48,
	0xce, 0xfc, 0xe7, 0x7d, 0xe5, 0x78, 0x03, 0x18, 0x35, 0x3c, 0x7a, 0x8c, 0x76, 0x61, 0x55, 0xd5,
	0xf2, 0x80, 0x84, 0x5a, 0x45, 0x35, 0x7f, 0xef, 0x3c, 0xcd, 0x6f, 0xa4, 0x6c, 0xd2, 0x7a, 0x2f,
	0x14, 0x5a, 0x81, 0x35, 0xc9, 0x3c, 0xba, 0x2d, 0x89, 0x17, 0x6a, 0x35, 0x75, 0x19, 0x57, 0xb2,
	0x2f, 0x63, 0xa7, 0x2b, 0xc3, 0x7d, 0x02, 0x2d, 0xc1, 0xaa, 0xd3, 0xe6, 0x44, 0xb2, 0xc0, 0xd7,
	0xa0, 0xa2, 0xf5, 0x6c, 0x7a, 0x2d, 0x55, 0xe1, 0x9e, 0x1e, 0x2d, 0xc3, 0x32, 0xa7, 0xa2, 0xa9,
	0x4d, 0x28, 0xee, 0x46, 0x8e, 0x6e, 0x30, 0x15, 0x4d, 0xac, 0xa0, 0xfa, 0x53, 0x38, 0x33, 0x72,
	0x9f, 0xe8, 0x3f, 0x58, 0x7a, 0x41, 0x3b, 0xca, 0x51, 0x35, 0x1c, 0xbf, 0xf6, 0x5d, 0x56, 0xcc,
	0xeb, 0xb2, 0xa5, 0xe2, 0x22, 0xa8, 0x2f, 0xc3, 0xa9, 0xa1, 0x71, 0x65, 0x44, 0xfe, 0x7f, 0x30,
	0x72, 0x69, 0x00, 0x9e, 0x7b, 0x55, 0x81, 0xe5, 0xb8, 0xce, 0x9f, 0xb1, 0xf8, 0x93, 0x0c, 0x8b,
	0x2f, 0xe4, 0x9c, 0xcb, 0x3f, 0x6e, 0xef, 0x47, 0xdf, 0xd9, 0xfb, 0x4e, 0xde, 0xc6, 0x2f, 0xac,
	0xb5, 0xed, 0xf3, 0x59, 0xdb, 0x56, 0xd6, 0xb6, 0xd1, 0x43, 0x58, 0x8d, 0x9f, 0x7b, 0x1e, 0x09,
	0xb5, 0x49, 0x35, 0x8a, 0xf9, 0xbc, 0xa3, 0x88, 0xa3, 0xf4, 0x26, 0x51, 0xe1, 0xc9, 0xd7, 0x85,
	0xdd, 0x95, 0xfa, 0x3e, 0x9c, 0x1c, 0xac, 0x38, 0x83, 0x5d, 0x19, 0xae, 0x2a, 0xf7, 0x24, 0x07,
	0x16, 0xf2, 0x4b, 0x59, 0x2d, 0xa4, 0xfd, 0x87, 0x17, 0xd2, 0xfe, 0x25, 0x0b, 0xf9, 0x17, 0x3d,
	0xbc, 0x08, 0x2b, 0x2c, 0xdc, 0x23, 0x8e, 0xc3, 0x53, 0x1b, 0x9f, 0x91, 0x78, 0x63, 0x6b, 0xd5,
	0x71, 0x38, 0x15, 0x02, 0x8f, 0xb3, 0x30, 0x7e, 0x45, 0x8b, 0xb0, 0xea, 0xf8, 0x62, 0xcf, 0x27,
	0x1e, 0xd5, 0x26, 0x15, 0x7a, 0xf9, 0x8c, 0xac, 0x9b, 0xdb, 0x9b, 0xc4, 0xa3, 0xb8, 0xe2, 0xf8,
	0x22, 0x7e, 0x41, 0xab, 0x10, 0x52, 0x8f, 0x30, 0x37, 0x49, 0x3b, 0xa5, 0xd8, 0xb9, 0x6c, 0x76,
	0x3d, 0xd6, 0x75, 0x33, 0xd7, 0x68, 0xf7, 0x0b, 0xdd, 0x84, 0xa5, 0x36, 0x67, 0xda, 0xb4, 0x62,
	0x67, 0xb3, 0xd9, 0x5d, 0xce, 0x70, 0xac, 0xfa, 0x9d, 0x9b, 0x71, 0xdf, 0x3e, 0x3a, 0xd6, 0x0b,
	0x1f, 0x8e, 0xf5, 0xc2, 0xe9, 0xb1, 0x0e, 0x5e, 0x46, 0x3a, 0x78, 0x1b, 0xe9, 0xe0, 0x5d, 0xa4,
	0x83, 0xa3, 0x48, 0x07, 0x1f, 0x23, 0x1d, 0x7c, 0x8e, 0xf4, 0xc2, 0x69, 0xa4, 0x83, 0xd7, 0x9f,
	0xf4, 0xc2, 0xd7, 0xf7, 0x27, 0x6f, 0x8a, 0xa0, 0x35, 0xae, 0xfe, 0x2a, 0xdd, 0xfe, 0x16, 0x00,
	0x00, 0xff, 0xff, 0x75, 0xc6, 0x46, 0x52, 0xd1, 0x09, 0x00, 0x00,
}
