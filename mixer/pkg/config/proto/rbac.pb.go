// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/pkg/config/proto/rbac.proto

/*
Package istio_mixer_v1_config is a generated protocol buffer package.

It is generated from these files:
	mixer/pkg/config/proto/rbac.proto

It has these top-level messages:
	ServiceRole
	AccessRule
	ServiceRoleBinding
	Subject
	RoleRef
*/
package istio_mixer_v1_config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "istio.io/api/mixer/v1/config/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ServiceRole defines a role for access to services in Istio mesh.
type ServiceRole struct {
	// Required. The set of access rules (permissions) that the role has.
	Rules []*AccessRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *ServiceRole) Reset()                    { *m = ServiceRole{} }
func (m *ServiceRole) String() string            { return proto.CompactTextString(m) }
func (*ServiceRole) ProtoMessage()               {}
func (*ServiceRole) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{0} }

func (m *ServiceRole) GetRules() []*AccessRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// AccessRule defines "how to access a set of services".
type AccessRule struct {
	// Required. A list of service names.
	// If set to ["*"], it refers all services in the namespace.
	Services []string `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	// Optional. A list of paths.
	Paths []string `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
	// Required. A list of HTTP methods or gRPC methods.
	// If set to ["*"], it applies to any method.
	Methods []string `protobuf:"bytes,3,rep,name=methods" json:"methods,omitempty"`
	// Optional. Extra constraints (e.g., version)
	Constraints []*AccessRule_Constraint `protobuf:"bytes,4,rep,name=constraints" json:"constraints,omitempty"`
}

func (m *AccessRule) Reset()                    { *m = AccessRule{} }
func (m *AccessRule) String() string            { return proto.CompactTextString(m) }
func (*AccessRule) ProtoMessage()               {}
func (*AccessRule) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{1} }

func (m *AccessRule) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *AccessRule) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *AccessRule) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *AccessRule) GetConstraints() []*AccessRule_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type AccessRule_Constraint struct {
	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (m *AccessRule_Constraint) Reset()                    { *m = AccessRule_Constraint{} }
func (m *AccessRule_Constraint) String() string            { return proto.CompactTextString(m) }
func (*AccessRule_Constraint) ProtoMessage()               {}
func (*AccessRule_Constraint) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{1, 0} }

func (m *AccessRule_Constraint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessRule_Constraint) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

// ServiceRoleBinding assigns a set of subjects to a given role.
type ServiceRoleBinding struct {
	// Required. List of subjects that are assigned the role.
	Subjects []*Subject `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
	// Required. Reference to the role.
	RoleRef *RoleRef `protobuf:"bytes,2,opt,name=roleRef" json:"roleRef,omitempty"`
}

func (m *ServiceRoleBinding) Reset()                    { *m = ServiceRoleBinding{} }
func (m *ServiceRoleBinding) String() string            { return proto.CompactTextString(m) }
func (*ServiceRoleBinding) ProtoMessage()               {}
func (*ServiceRoleBinding) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{2} }

func (m *ServiceRoleBinding) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *ServiceRoleBinding) GetRoleRef() *RoleRef {
	if m != nil {
		return m.RoleRef
	}
	return nil
}

// Subject defines an identity or a group identities.
type Subject struct {
	// Required. The set of properties that identify the subject.
	Properties map[string]string `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{3} }

func (m *Subject) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

// RoleRef refers to a role.
type RoleRef struct {
	// Required. The type of the role being referenced.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Required. The name of the role being referenced.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RoleRef) Reset()                    { *m = RoleRef{} }
func (m *RoleRef) String() string            { return proto.CompactTextString(m) }
func (*RoleRef) ProtoMessage()               {}
func (*RoleRef) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{4} }

func (m *RoleRef) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *RoleRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceRole)(nil), "istio_mixer_v1_config.ServiceRole")
	proto.RegisterType((*AccessRule)(nil), "istio_mixer_v1_config.AccessRule")
	proto.RegisterType((*AccessRule_Constraint)(nil), "istio_mixer_v1_config.AccessRule.Constraint")
	proto.RegisterType((*ServiceRoleBinding)(nil), "istio_mixer_v1_config.ServiceRoleBinding")
	proto.RegisterType((*Subject)(nil), "istio_mixer_v1_config.Subject")
	proto.RegisterType((*RoleRef)(nil), "istio_mixer_v1_config.RoleRef")
}

func init() { proto.RegisterFile("mixer/pkg/config/proto/rbac.proto", fileDescriptorRbac) }

var fileDescriptorRbac = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x99, 0x74, 0xd7, 0xec, 0x9e, 0x5e, 0x28, 0x83, 0x42, 0xc8, 0x85, 0x74, 0x73, 0xb5,
	0xa0, 0x24, 0x54, 0x41, 0x97, 0x82, 0x17, 0x2a, 0x7a, 0x59, 0x64, 0xfa, 0x00, 0x21, 0x9d, 0x9c,
	0xb6, 0x63, 0xd3, 0x99, 0x30, 0x33, 0x09, 0xf6, 0x15, 0x7c, 0x02, 0x1f, 0xcf, 0x47, 0x91, 0xcc,
	0x34, 0x69, 0x10, 0xed, 0xde, 0x9d, 0x33, 0xe7, 0xff, 0xff, 0xfe, 0x7c, 0x0d, 0xdc, 0x1d, 0xc4,
	0x0f, 0xd4, 0x59, 0xbd, 0xdf, 0x66, 0x5c, 0xc9, 0x8d, 0xd8, 0x66, 0xb5, 0x56, 0x56, 0x65, 0x7a,
	0x5d, 0xf0, 0xd4, 0x8d, 0xf4, 0x85, 0x30, 0x56, 0xa8, 0xdc, 0x09, 0xf3, 0x76, 0x9e, 0x7b, 0x5d,
	0xfc, 0xca, 0x3b, 0xdb, 0x79, 0x6f, 0x2c, 0xd1, 0x70, 0x2d, 0x6a, 0xab, 0x74, 0xd6, 0x16, 0x55,
	0x83, 0xb9, 0x3d, 0xd6, 0xe8, 0x33, 0x92, 0xaf, 0x30, 0x5d, 0xa1, 0x6e, 0x05, 0x47, 0xa6, 0x2a,
	0xa4, 0xef, 0xe1, 0x5a, 0x37, 0x15, 0x9a, 0x88, 0xcc, 0x26, 0xf7, 0xd3, 0x37, 0x77, 0xe9, 0x3f,
	0x7f, 0x22, 0xfd, 0xc8, 0x39, 0x1a, 0xc3, 0x9a, 0x0a, 0x99, 0xd7, 0x27, 0xbf, 0x09, 0xc0, 0xf9,
	0x95, 0xc6, 0x70, 0x63, 0x7c, 0xac, 0x8f, 0xba, 0x65, 0xc3, 0x4e, 0x9f, 0xc3, 0x75, 0x5d, 0xd8,
	0x9d, 0x89, 0x02, 0x77, 0xf0, 0x0b, 0x8d, 0x20, 0x3c, 0xa0, 0xdd, 0xa9, 0xd2, 0x44, 0x13, 0xf7,
	0xde, 0xaf, 0x74, 0x09, 0x53, 0xae, 0xa4, 0xb1, 0xba, 0x10, 0xd2, 0x9a, 0xe8, 0xca, 0x35, 0x7b,
	0xfd, 0x68, 0xb3, 0xf4, 0xf3, 0x60, 0x62, 0xe3, 0x80, 0xf8, 0x1d, 0xc0, 0xf9, 0x44, 0x29, 0x5c,
	0xc9, 0xe2, 0x80, 0x11, 0x99, 0x91, 0xfb, 0x5b, 0xe6, 0xe6, 0xae, 0xa1, 0x03, 0xd5, 0x37, 0x74,
	0x4b, 0xf2, 0x93, 0x00, 0x1d, 0xb1, 0xfa, 0x24, 0x64, 0x29, 0xe4, 0x96, 0x2e, 0xe0, 0xc6, 0x34,
	0xeb, 0xef, 0xc8, 0x6d, 0x4f, 0xed, 0xe5, 0x7f, 0xba, 0xad, 0xbc, 0x8c, 0x0d, 0x7a, 0xfa, 0x00,
	0xa1, 0x56, 0x15, 0x32, 0xdc, 0x44, 0xc1, 0x8c, 0x5c, 0xb0, 0x32, 0xaf, 0x62, 0xbd, 0x3c, 0xf9,
	0x45, 0x20, 0x3c, 0xe5, 0xd1, 0x25, 0x40, 0xad, 0x55, 0x8d, 0xda, 0x8a, 0xe1, 0x9f, 0x4b, 0x2f,
	0x77, 0x48, 0xbf, 0x0d, 0x86, 0x2f, 0xd2, 0xea, 0x23, 0x1b, 0x25, 0xc4, 0x1f, 0xe0, 0xe9, 0x5f,
	0x67, 0xfa, 0x0c, 0x26, 0x7b, 0x3c, 0x9e, 0x20, 0x75, 0xe3, 0x98, 0x11, 0x19, 0x18, 0x2d, 0x82,
	0x07, 0x92, 0xcc, 0x21, 0x3c, 0xd5, 0xed, 0xe0, 0xee, 0x85, 0x2c, 0x7b, 0xb8, 0xdd, 0x3c, 0x00,
	0x0f, 0xce, 0xc0, 0xd7, 0x4f, 0xdc, 0xc7, 0xf8, 0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22,
	0x07, 0x5e, 0xc6, 0xf5, 0x02, 0x00, 0x00,
}
