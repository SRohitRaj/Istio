// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// $title: Stackdriver
// $description: Adapter to deliver logs, metrics, and traces to Stackdriver.
// $location: https://istio.io/docs/reference/config/policy-and-telemetry/adapters/stackdriver.html
// $supported_templates: metric,logentry,tracespan
// $aliases:
// $  - /docs/reference/config/adapters/stackdriver.html

// The `stackdriver` adapter enables Istio to deliver log, metric and traces to the
// [Stackdriver](https://cloud.google.com/stackdriver/) backend.
//
// This adapter supports the [metric template](https://istio.io/docs/reference/config/policy-and-telemetry/templates/metric/),
// the [logentry template](https://istio.io/docs/reference/config/policy-and-telemetry/templates/logentry/),
// and the [tracespan template](https://istio.io/docs/reference/config/policy-and-telemetry/templates/tracespan/).
package adapter.stackdriver.config;

import "gogoproto/gogo.proto";
import "google/api/metric.proto";
import "google/protobuf/duration.proto";

option go_package = "config";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// Configuration format for the `stackdriver` adapter.
message Params {
  // GCP Project to attach telemetry to. If a piece of data has a project ID
  // or a MonitoredResource attached, that will take preference over this
  // field.
  string project_id = 2;

  // Describes how to represent an Istio metric in Stackdriver.
  // See
  // https://github.com/googleapis/googleapis/blob/master/google/api/metric.proto
  message MetricInfo {
    // The kind of measurement for a metric, which describes how the data is
    // reported. Ex: Gauge.
    google.api.MetricDescriptor.MetricKind kind = 1;
    // The type of the metric's value. Ex: Distribution.
    google.api.MetricDescriptor.ValueType value = 2;

    // For metrics with a metric value of DISTRIBUTION, this provides a
    // mechanism for configuring the buckets that will be used to store the
    // aggregated values. This field must be provided for metrics declared to
    // be of type DISTRIBUTION. This field will be ignored for
    // non-distribution metric kinds.
    google.api.Distribution buckets = 3;

    // Stackdriver metric type name, e.g.
    // istio.io/service/server/request_count. If this is not provided, a
    // concantenation of custom metric prefix (custom.googleapis.com/) and
    // Istio metric name will be used.
    string metric_type = 4;
  }

  // A map of Istio metric name to Stackdriver metric info.
  map<string, MetricInfo> metric_info = 8;

  // Describes how to represent an Istio Log in Stackdriver.
  message LogInfo {
    // The `logentry` template includes a `variables` field that represents
    // the attributes configured by the operator in Istio. The `labels` field
    // in `LogInfo` selects which variables from the log entry should be
    // included in the `labels` field of the `google.logging.v2.LogEntry`
    // written to Stackdriver.
    repeated string labels = 1;

    // A golang text/template template that will be executed to construct the
    // payload for this log entry. It will be given the full set of variables
    // for the log to use to construct its result.
    string payload_template = 2;

    // Maps from template variable names to the various fields of
    // Stackdriver's HTTP request struct. See
    // https://godoc.org/cloud.google.com/go/logging#HTTPRequest
    message HttpRequestMapping {
      // template variable name to map into HTTPRequest.Status
      string status = 1;
      // template variable name to map into HTTPRequest.RequestSize
      string request_size = 2;
      // template variable name to map into HTTPRequest.ResponseSize
      string response_size = 3;
      // template variable name to map into HTTPRequest.Latency
      string latency = 4;
      // template variable name to map into HTTPRequest.LocalIP
      string local_ip = 5;
      // template variable name to map into HTTPRequest.RemoteIP
      string remote_ip = 6;
      // template variable name to map into HTTPRequest.Request.Url
      string url = 7;
      // template variable name to map into HTTPRequest.RequestMethod
      string method = 8;
      // template variable name to map into HTTPRequest.UserAgent
      string user_agent = 9;
      // template variable name to map into HTTPRequest.Referer
      string referer = 10;
    }
    // If an HttpRequestMapping is provided, a HttpRequest object will be
    // filled out for this log entry using the variables named in the mapping
    // to populate the fields of the request struct from the instance's
    // variables.
    HttpRequestMapping http_mapping = 3;
  }

  // Describes how to represent an Istio Log in Stackdriver.
  // Describes how to represent an Istio Log in Stackdriver.
  message LogInfo {
    // The `logentry` template includes a `variables` field that represents
    // the attributes configured by the operator in Istio. The `labels` field
    // in `LogInfo` selects which variables from the log entry should be
    // included in the `labels` field of the `google.logging.v2.LogEntry`
    // written to Stackdriver.
    repeated string labels = 1;

    // A golang text/template template that will be executed to construct the
    // payload for this log entry. It will be given the full set of variables
    // for the log to use to construct its result.
    string payload_template = 2;

    // Maps from template variable names to the various fields of
    // Stackdriver's HTTP request struct. See
    // https://godoc.org/cloud.google.com/go/logging#HTTPRequest
    message HttpRequestMapping {
      // template variable name to map into HTTPRequest.Status
      string status = 1;
      // template variable name to map into HTTPRequest.RequestSize
      string request_size = 2;
      // template variable name to map into HTTPRequest.ResponseSize
      string response_size = 3;
      // template variable name to map into HTTPRequest.Latency
      string latency = 4;
      // template variable name to map into HTTPRequest.LocalIP
      string local_ip = 5;
      // template variable name to map into HTTPRequest.RemoteIP
      string remote_ip = 6;
      // template variable name to map into HTTPRequest.Request.Url
      string url = 7;
      // template variable name to map into HTTPRequest.RequestMethod
      string method = 8;
      // template variable name to map into HTTPRequest.UserAgent
      string user_agent = 9;
      // template variable name to map into HTTPRequest.Referer
      string referer = 10;
    }
    // If an HttpRequestMapping is provided, a HttpRequest object will be
    // filled out for this log entry using the variables named in the mapping
    // to populate the fields of the request struct from the instance's
    // variables.
    HttpRequestMapping http_mapping = 3;

    // Contains information about sink to export Stackdriver logs to.
    // See https://godoc.org/cloud.google.com/go/logging/logadmin#Sink.
    // Ex: If you want to export it to a GCS bucket, id would be a unique idetifier you want for the sink,
    // destination would be the storage be name of GCS Storage bucket and filter would be user defined condition for
    // filtering logs. See below for a sample config:
    //      id: 'info-errors-to-gcs'
    //      destination: 'storage.googleapis.com/<bucket_name>'
    //      filter: 'severity >= Default'
    message SinkInfo {
      // Client assigned sink identifier.
      string id = 1;
      // Export Destination.
      string destination = 2;
      // Filter that specifies any filtering to be done on logs.
      string filter = 3;
      // Determines the kind of IAM identity returned as WriterIdentity in the new
      // sink. If this value is omitted or set to false, and if the sink's parent is a
      // project, then the value returned as WriterIdentity is the same group or
      // service account used by Stackdriver Logging before the addition of writer
      // identities to the API. The sink's destination must be in the same project as
      // the sink itself.
      //
      // If this field is set to true, or if the sink is owned by a non-project
      // resource such as an organization, then the value of WriterIdentity will
      // be a unique service account used only for exports from the new sink.
      bool UniqueWriterIdentity = 4;

      // These fields apply only to UpdateSinkOpt calls. The corresponding sink field
      // is updated if and only if the Update field is true.
      // Upate sink destination.
      bool UpdateDestination = 5;
      // Update sink filter.
      bool UpdateFilter = 6;
      // Update includes children.
      bool UpdateIncludeChildren = 7;
    }
    // If SinkInfo is provided, Stackriver logs would be exported to that sink.
    SinkInfo sink_info = 4;
  }
  // A map of Istio LogEntry name to Stackdriver log info.
  map<string, LogInfo> log_info = 9;

  // Details of Stackdriver Trace configuration for tracespan template.
  message Trace {
    // Proability that a particular trace ID will be sampled.
    double sample_probability = 1;
  }
  // Stackdriver Trace configuration.
  Trace trace = 10;
}
