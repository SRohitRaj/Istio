{% set CLUSTER_NAME = env['deployment'] + '-' + env['name'] %}

resources:

- name: {{ properties['gkeClusterName'] }}
  type: container.v1.cluster
  properties:
    zone: {{ properties['zone'] }}
    cluster:
      name: {{ properties['gkeClusterName'] }}
      legacyAbac:
        enabled: false
      initialNodeCount: {{ properties['initialNodeCount'] }}
      nodeConfig:
        machineType: {{ properties["instanceType"] }}
        oauthScopes:
        - https://www.googleapis.com/auth/logging.write
        - https://www.googleapis.com/auth/monitoring

- type: runtimeconfig.v1beta1.config
  name: {{ CLUSTER_NAME }}-config
  properties:
    config: {{ CLUSTER_NAME }}-config

- type: runtimeconfig.v1beta1.waiter
  name: {{ CLUSTER_NAME }}-waiter
  metadata:
    dependsOn:
    - {{ CLUSTER_NAME }}-config
  properties:
    parent: $(ref.{{ CLUSTER_NAME }}-config.name)
    waiter: {{ CLUSTER_NAME }}-waiter
    timeout: 600s
    success:
      cardinality:
        path: /success
        number: 1
    failure:
      cardinality:
        path: /failure
        number: 1

- name: {{ CLUSTER_NAME }}-vm
  type: compute.v1.instance
  metadata:
    dependsOn:
    - {{ properties['gkeClusterName'] }}
  properties:
    zone: {{ properties['zone'] }}
    machineType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["zone"] }}/machineTypes/{{ properties["instanceType"] }}
    tags:
      items:
      -  istio-init
    serviceAccounts:
      - email: "default"
        scopes:
        - https://www.googleapis.com/auth/cloud-platform
        - https://www.googleapis.com/auth/compute
        - https://www.googleapis.com/auth/logging.write
        - https://www.googleapis.com/auth/monitoring
        - https://www.googleapis.com/auth/servicecontrol
        - https://www.googleapis.com/auth/service.management.readonly
        - https://www.googleapis.com/auth/userinfo.email

    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/global/networks/default
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        diskName: {{ CLUSTER_NAME }}-vm-disk
        sourceImage: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9
    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash -x

          apt-get update && apt-get install -y git google-cloud-sdk curl kubectl

          export HOME=/root
          cd /root/

          gcloud container clusters get-credentials {{ properties['gkeClusterName'] }} --zone {{ properties['zone'] }}
          kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value core/account)

          wget https://github.com/istio/istio/releases/download/{{ properties['installIstioRelease'] }}/istio-{{ properties['installIstioRelease'] }}-linux.tar.gz

          tar xzf istio-{{ properties['installIstioRelease'] }}-linux.tar.gz

          wget -P /root/helm/ https://storage.googleapis.com/kubernetes-helm/helm-v2.11.0-linux-amd64.tar.gz
          tar xf /root/helm/helm-v2.11.0-linux-amd64.tar.gz  -C /root/helm/

          export PATH="$PATH:/root/istio-{{ properties['installIstioRelease'] }}/bin::/root/helm/linux-amd64/"
          cd /root/istio-{{ properties['installIstioRelease'] }}

          kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml

          kubectl apply -f install/kubernetes/helm/subcharts/certmanager/templates/crds.yaml

          helm init --client-only
          helm repo add istio.io https://storage.googleapis.com/istio-release/releases/{{ properties['installIstioRelease'] }}/charts/
          helm dependency update install/kubernetes/helm/istio

          kubectl create ns istio-system

          ISTIO_OPTIONS=" --set global.proxy.image=proxyv2 "

          {% if  properties['enableMutualTLS'] %}
            ISTIO_OPTIONS=$ISTIO_OPTIONS" --set global.mtls.enabled=true"
          {% endif %}

          {% if  properties['enableAutomaticSidecarInjection'] %}
            ISTIO_OPTIONS=$ISTIO_OPTIONS" --set sidecarInjectorWebhook.enabled=true"
          {% endif %}

          {% if properties['enableGrafana'] or properties['enablePrometheus'] %}
            ISTIO_OPTIONS=$ISTIO_OPTIONS" --set prometheus.enabled=true"
          {% endif %}

          {% if  properties['enableGrafana'] %}
            ISTIO_OPTIONS=$ISTIO_OPTIONS" --set grafana.enabled=true"
          {% endif %}

          {% if  properties['enableTracing'] %}
            ISTIO_OPTIONS=$ISTIO_OPTIONS" --set tracing.enabled=true "
          {% endif %}

          {% if  properties['enableServiceGraph'] %}
            ISTIO_OPTIONS=$ISTIO_OPTIONS" --set servicegraph.enabled=true"
          {% endif %}

          helm template install/kubernetes/helm/istio --name istio --namespace istio-system $ISTIO_OPTIONS  > istio.yaml

          kubectl apply -f istio.yaml

          {% if  properties['enableAutomaticSidecarInjection'] %}
            kubectl label namespace default istio-injection=enabled
          {% endif %}

          if kubectl rollout status deployment.extensions/istio-pilot -n istio-system --timeout=120s && \
             kubectl rollout status deployment.extensions/istio-citadel -n istio-system --timeout=120s && \
             kubectl rollout status deployment.extensions/istio-policy -n istio-system --timeout=120s && \
             kubectl rollout status deployment.extensions/istio-galley -n istio-system --timeout=120s && \
             kubectl rollout status deployment.extensions/istio-ingressgateway -n istio-system --timeout=120s ; then

          {% if  properties['enableKiali'] %}

            export USERNAME=$(echo -n '{{  properties['kialiUsername'] }}' | base64)
            export PASSPHRASE=$(echo -n '{{  properties['kialiPassword'] }}' | base64)
            export NAMESPACE=istio-system

            echo '
            apiVersion: v1
            kind: Secret
            metadata:
              name: kiali
              namespace: $NAMESPACE
              labels:
                app: kiali
            type: Opaque
            data:
              username: $USERNAME
              passphrase: $PASSPHRASE
            ' | envsubst > kaili_secret.yaml

            kubectl apply -f kaili_secret.yaml

            export KIALI_OPTIONS=" --set kiali.enabled=true "

            {% if  properties['enableGrafana'] %}
              KIALI_OPTIONS=$KIALI_OPTIONS"  --set kiali.dashboard.grafanaURL=http://$(kubectl get svc grafana -n istio-system -o jsonpath='{.spec.clusterIP}'):3000"
            {% endif %}

            {% if  properties['enableTracing'] %}
              KIALI_OPTIONS=$KIALI_OPTIONS" --set kiali.dashboard.jaegerURL=http://$(kubectl get svc tracing -n istio-system -o jsonpath='{.spec.clusterIP}'):9411"
            {% endif %}

            helm template install/kubernetes/helm/istio --name istio --namespace istio-system $KIALI_OPTIONS  > istio_kiali.yaml

            kubectl apply -f istio_kiali.yaml

          {% endif %}

          {% if  properties['enableBookInfoSample'] %}

            kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
            kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml

            {% if  properties['enableMutualTLS'] %}
                kubectl apply -f samples/bookinfo/networking/destination-rule-all-mtls.yaml
            {% else %}
                kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
            {% endif %}

            if kubectl rollout status deployment.extensions/productpage-v1 --timeout=120s && \
               kubectl rollout status deployment.extensions/ratings-v1 --timeout=120s && \
               kubectl rollout status deployment.extensions/details-v1 --timeout=120s && \
               kubectl rollout status deployment.extensions/reviews-v1 --timeout=120s && \
               kubectl rollout status deployment.extensions/reviews-v2 --timeout=120s && \
               kubectl rollout status deployment.extensions/reviews-v3 --timeout=120s ; then

              echo "Bookinfo deployment successful"
            else
              gcloud beta runtime-config configs variables set failure/{{ CLUSTER_NAME }}-waiter failure --config-name $(ref.{{ CLUSTER_NAME }}-config.name)
              exit 1
            fi
          {% endif %}

          gcloud beta runtime-config configs variables set success/{{ CLUSTER_NAME }}-waiter success --config-name $(ref.{{ CLUSTER_NAME }}-config.name)

          else
            gcloud beta runtime-config configs variables set failure/{{ CLUSTER_NAME }}-waiter failure --config-name $(ref.{{ CLUSTER_NAME }}-config.name)
          fi

          gcloud -q compute instances delete {{ CLUSTER_NAME }}-vm --zone {{ properties['zone'] }}
