#
# addon jaeger tracing configuration
#
enabled: false

provider: jaeger
nodeSelector: {}

# Specify the pod anti-affinity that allows you to constrain which nodes
# your pod is eligible to be scheduled based on labels on pods that are
# already running on the node rather than based on labels on nodes.
# There are currently two types of anti-affinity:
#    "requiredDuringSchedulingIgnoredDuringExecution"
#    "preferredDuringSchedulingIgnoredDuringExecution"
# which denote “hard” vs. “soft” requirements, you can define your values
# in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
# correspondingly.
# For example:
# podAntiAffinityLabelSelector:
# - key: security
#   operator: In
#   values: S1,S2
#   topologyKey: "kubernetes.io/hostname"
# This pod anti-affinity rule says that the pod requires not to be scheduled
# onto a node if that node is already running a pod with label having key
# “security” and value “S1”.
podAntiAffinityLabelSelector: {}
podAntiAffinityTermLabelSelector: {}

jaeger:
  hub: docker.io/jaegertracing
  tag: 1.9.0
  # The spec represents the Jaeger operator's custom resource (CR).
  # CR docs can be found here: https://github.com/jaegertracing/jaeger-operator#creating-a-new-jaeger-instance
  # Some example CRs: https://github.com/jaegertracing/jaeger-operator/tree/master/deploy/examples
  spec:
    strategy: allInOne
    allInOne:
      options:
        query:
          base-path: /jaeger
    query:
      options:
        query:
          base-path: /jaeger
    storage:
      type: memory
      options:
        memory:
          max-traces: 50000
        es:
          server-urls: http://elasticsearch:9200
        cassandra:
          servers: cassandra
          keyspace: jaeger_v1_datacenter3
      cassandraCreateSchema:
        datacenter: "datacenter3"
        mode: "test"
      # Setup a secret to contain the environment variables for use with storage
      # See https://github.com/jaegertracing/jaeger-operator#secrets-support
      secretName: ""
    ui:
      options:
        dependencies:
          # Disable dependencies tab, as information provided by tools such as Kiali will
          # be more accurate than tracing derived data which is subject to sampling.
          menuEnabled: false
        tracking:
          gaID: UA-000000-2
        menu:
          - label: "About Jaeger"
            items:
              - label: "Documentation"
                url: "https://www.jaegertracing.io/docs/latest"
    ingress:
      enabled: false
    annotations:
      scheduler.alpha.kubernetes.io/critical-pod: ""
      sidecar.istio.io/inject: "false"

zipkin:
  hub: docker.io/openzipkin
  tag: 2
  probeStartupDelay: 200
  queryPort: 9411
  resources:
    limits:
      cpu: 300m
      memory: 900Mi
    requests:
      cpu: 150m
      memory: 900Mi
  javaOptsHeap: 700
  # From: https://github.com/openzipkin/zipkin/blob/master/zipkin-server/src/main/resources/zipkin-server-shared.yml#L51
  # Maximum number of spans to keep in memory.  When exceeded, oldest traces (and their spans) will be purged.
  # A safe estimate is 1K of memory per span (each span with 2 annotations + 1 binary annotation), plus
  # 100 MB for a safety buffer.  You'll need to verify in your own environment.
  maxSpans: 500000
  node:
    cpus: 2

service:
  annotations: {}
  name: http
  type: ClusterIP
  externalPort: 9411

ingress:
  enabled: false
  # Used to create an Ingress record.
  hosts:
    # - tracing.local
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: tracing-tls
    #   hosts:
    #     - tracing.local

