// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: security/proto/nodeagent_mgmt_service.proto

/*
	Package istio_v1_auth is a generated protocol buffer package.

	It is generated from these files:
		security/proto/nodeagent_mgmt_service.proto

	It has these top-level messages:
		Response
		WorkloadInfo
*/
package istio_v1_auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_rpc "istio.io/gogo-genproto/googleapis/google/rpc"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Response struct {
	Status *google_rpc.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorNodeagentMgmtService, []int{0} }

func (m *Response) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type WorkloadInfo struct {
	// WorkloadAttributes are the properties of the workload that a Flexvolume driver
	// knows off. A node agent can use them to verify the credentials of the workload.
	Attrs *WorkloadInfo_WorkloadAttributes `protobuf:"bytes,1,opt,name=attrs" json:"attrs,omitempty"`
	// workloadpath is where the Flexvolume driver has created the volume specific for
	// the workload. The node agent will use this directory to communicate with the
	// specific workload.
	Workloadpath string `protobuf:"bytes,2,opt,name=workloadpath,proto3" json:"workloadpath,omitempty"`
}

func (m *WorkloadInfo) Reset()                    { *m = WorkloadInfo{} }
func (*WorkloadInfo) ProtoMessage()               {}
func (*WorkloadInfo) Descriptor() ([]byte, []int) { return fileDescriptorNodeagentMgmtService, []int{1} }

func (m *WorkloadInfo) GetAttrs() *WorkloadInfo_WorkloadAttributes {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *WorkloadInfo) GetWorkloadpath() string {
	if m != nil {
		return m.Workloadpath
	}
	return ""
}

type WorkloadInfo_WorkloadAttributes struct {
	// uid: Unique Id of the Workload.
	// During delete the uid is mandatory.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// workload identifier aka name.
	Workload string `protobuf:"bytes,2,opt,name=workload,proto3" json:"workload,omitempty"`
	// namespace of the workload.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// service account of the workload.
	Serviceaccount string `protobuf:"bytes,4,opt,name=serviceaccount,proto3" json:"serviceaccount,omitempty"`
}

func (m *WorkloadInfo_WorkloadAttributes) Reset()      { *m = WorkloadInfo_WorkloadAttributes{} }
func (*WorkloadInfo_WorkloadAttributes) ProtoMessage() {}
func (*WorkloadInfo_WorkloadAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptorNodeagentMgmtService, []int{1, 0}
}

func (m *WorkloadInfo_WorkloadAttributes) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *WorkloadInfo_WorkloadAttributes) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *WorkloadInfo_WorkloadAttributes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WorkloadInfo_WorkloadAttributes) GetServiceaccount() string {
	if m != nil {
		return m.Serviceaccount
	}
	return ""
}

func init() {
	proto.RegisterType((*Response)(nil), "istio.v1.auth.Response")
	proto.RegisterType((*WorkloadInfo)(nil), "istio.v1.auth.WorkloadInfo")
	proto.RegisterType((*WorkloadInfo_WorkloadAttributes)(nil), "istio.v1.auth.WorkloadInfo.WorkloadAttributes")
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *WorkloadInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WorkloadInfo)
	if !ok {
		that2, ok := that.(WorkloadInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Attrs.Equal(that1.Attrs) {
		return false
	}
	if this.Workloadpath != that1.Workloadpath {
		return false
	}
	return true
}
func (this *WorkloadInfo_WorkloadAttributes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WorkloadInfo_WorkloadAttributes)
	if !ok {
		that2, ok := that.(WorkloadInfo_WorkloadAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Workload != that1.Workload {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Serviceaccount != that1.Serviceaccount {
		return false
	}
	return true
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&istio_v1_auth.Response{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkloadInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&istio_v1_auth.WorkloadInfo{")
	if this.Attrs != nil {
		s = append(s, "Attrs: "+fmt.Sprintf("%#v", this.Attrs)+",\n")
	}
	s = append(s, "Workloadpath: "+fmt.Sprintf("%#v", this.Workloadpath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkloadInfo_WorkloadAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&istio_v1_auth.WorkloadInfo_WorkloadAttributes{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Workload: "+fmt.Sprintf("%#v", this.Workload)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Serviceaccount: "+fmt.Sprintf("%#v", this.Serviceaccount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNodeagentMgmtService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeAgentMgmt service

type NodeAgentMgmtClient interface {
	// WorkloadAdded is used to notify Node Agent about a workload getting
	// added on a node.
	WorkloadAdded(ctx context.Context, in *WorkloadInfo, opts ...grpc.CallOption) (*Response, error)
	// WorkloadDeleted is used to notify Node Agent about a workload getting
	// added on a node.
	WorkloadDeleted(ctx context.Context, in *WorkloadInfo, opts ...grpc.CallOption) (*Response, error)
}

type nodeAgentMgmtClient struct {
	cc *grpc.ClientConn
}

func NewNodeAgentMgmtClient(cc *grpc.ClientConn) NodeAgentMgmtClient {
	return &nodeAgentMgmtClient{cc}
}

func (c *nodeAgentMgmtClient) WorkloadAdded(ctx context.Context, in *WorkloadInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/istio.v1.auth.NodeAgentMgmt/WorkloadAdded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAgentMgmtClient) WorkloadDeleted(ctx context.Context, in *WorkloadInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/istio.v1.auth.NodeAgentMgmt/WorkloadDeleted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeAgentMgmt service

type NodeAgentMgmtServer interface {
	// WorkloadAdded is used to notify Node Agent about a workload getting
	// added on a node.
	WorkloadAdded(context.Context, *WorkloadInfo) (*Response, error)
	// WorkloadDeleted is used to notify Node Agent about a workload getting
	// added on a node.
	WorkloadDeleted(context.Context, *WorkloadInfo) (*Response, error)
}

func RegisterNodeAgentMgmtServer(s *grpc.Server, srv NodeAgentMgmtServer) {
	s.RegisterService(&_NodeAgentMgmt_serviceDesc, srv)
}

func _NodeAgentMgmt_WorkloadAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAgentMgmtServer).WorkloadAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/istio.v1.auth.NodeAgentMgmt/WorkloadAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAgentMgmtServer).WorkloadAdded(ctx, req.(*WorkloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAgentMgmt_WorkloadDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAgentMgmtServer).WorkloadDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/istio.v1.auth.NodeAgentMgmt/WorkloadDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAgentMgmtServer).WorkloadDeleted(ctx, req.(*WorkloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeAgentMgmt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "istio.v1.auth.NodeAgentMgmt",
	HandlerType: (*NodeAgentMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkloadAdded",
			Handler:    _NodeAgentMgmt_WorkloadAdded_Handler,
		},
		{
			MethodName: "WorkloadDeleted",
			Handler:    _NodeAgentMgmt_WorkloadDeleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security/proto/nodeagent_mgmt_service.proto",
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodeagentMgmtService(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *WorkloadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attrs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodeagentMgmtService(dAtA, i, uint64(m.Attrs.Size()))
		n2, err := m.Attrs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Workloadpath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodeagentMgmtService(dAtA, i, uint64(len(m.Workloadpath)))
		i += copy(dAtA[i:], m.Workloadpath)
	}
	return i, nil
}

func (m *WorkloadInfo_WorkloadAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadInfo_WorkloadAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodeagentMgmtService(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Workload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodeagentMgmtService(dAtA, i, uint64(len(m.Workload)))
		i += copy(dAtA[i:], m.Workload)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNodeagentMgmtService(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Serviceaccount) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNodeagentMgmtService(dAtA, i, uint64(len(m.Serviceaccount)))
		i += copy(dAtA[i:], m.Serviceaccount)
	}
	return i, nil
}

func encodeVarintNodeagentMgmtService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNodeagentMgmtService(uint64(l))
	}
	return n
}

func (m *WorkloadInfo) Size() (n int) {
	var l int
	_ = l
	if m.Attrs != nil {
		l = m.Attrs.Size()
		n += 1 + l + sovNodeagentMgmtService(uint64(l))
	}
	l = len(m.Workloadpath)
	if l > 0 {
		n += 1 + l + sovNodeagentMgmtService(uint64(l))
	}
	return n
}

func (m *WorkloadInfo_WorkloadAttributes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovNodeagentMgmtService(uint64(l))
	}
	l = len(m.Workload)
	if l > 0 {
		n += 1 + l + sovNodeagentMgmtService(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovNodeagentMgmtService(uint64(l))
	}
	l = len(m.Serviceaccount)
	if l > 0 {
		n += 1 + l + sovNodeagentMgmtService(uint64(l))
	}
	return n
}

func sovNodeagentMgmtService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNodeagentMgmtService(x uint64) (n int) {
	return sovNodeagentMgmtService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "google_rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkloadInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkloadInfo{`,
		`Attrs:` + strings.Replace(fmt.Sprintf("%v", this.Attrs), "WorkloadInfo_WorkloadAttributes", "WorkloadInfo_WorkloadAttributes", 1) + `,`,
		`Workloadpath:` + fmt.Sprintf("%v", this.Workloadpath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkloadInfo_WorkloadAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkloadInfo_WorkloadAttributes{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Workload:` + fmt.Sprintf("%v", this.Workload) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Serviceaccount:` + fmt.Sprintf("%v", this.Serviceaccount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNodeagentMgmtService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeagentMgmtService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &google_rpc.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeagentMgmtService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeagentMgmtService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = &WorkloadInfo_WorkloadAttributes{}
			}
			if err := m.Attrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloadpath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloadpath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeagentMgmtService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadInfo_WorkloadAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeagentMgmtService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serviceaccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serviceaccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeagentMgmtService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeagentMgmtService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeagentMgmtService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeagentMgmtService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeagentMgmtService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNodeagentMgmtService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNodeagentMgmtService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNodeagentMgmtService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNodeagentMgmtService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeagentMgmtService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("security/proto/nodeagent_mgmt_service.proto", fileDescriptorNodeagentMgmtService)
}

var fileDescriptorNodeagentMgmtService = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x31, 0x4f, 0xdb, 0x40,
	0x14, 0xc7, 0x7d, 0x49, 0x1b, 0x25, 0xd7, 0xa4, 0xad, 0x6e, 0x89, 0xe5, 0x56, 0xa7, 0x28, 0x43,
	0x15, 0xb5, 0xd5, 0x59, 0x4d, 0xa5, 0xee, 0xa9, 0x82, 0x10, 0x03, 0x0c, 0x66, 0x60, 0x8c, 0x2e,
	0xf6, 0xe1, 0x58, 0xc4, 0x3e, 0xeb, 0xee, 0x39, 0x88, 0x0d, 0x89, 0x85, 0x91, 0x6f, 0xc0, 0xca,
	0x47, 0x61, 0xcc, 0xc8, 0x48, 0xcc, 0xc2, 0x98, 0x8f, 0x80, 0x62, 0x3b, 0x86, 0x04, 0x89, 0x81,
	0xcd, 0xef, 0xfd, 0xfe, 0xff, 0xbf, 0x9f, 0xde, 0x3b, 0xfc, 0x4b, 0x0b, 0x37, 0x51, 0x01, 0x9c,
	0xd9, 0xb1, 0x92, 0x20, 0xed, 0x48, 0x7a, 0x82, 0xfb, 0x22, 0x82, 0x51, 0xe8, 0x87, 0x30, 0xd2,
	0x42, 0xcd, 0x02, 0x57, 0xb0, 0x0c, 0x92, 0x56, 0xa0, 0x21, 0x90, 0x6c, 0xf6, 0x87, 0xf1, 0x04,
	0x26, 0x56, 0xdb, 0x97, 0xd2, 0x9f, 0x0a, 0x5b, 0xc5, 0xae, 0xad, 0x81, 0x43, 0xa2, 0x73, 0x5d,
	0xf7, 0x1f, 0xae, 0x3b, 0x42, 0xc7, 0x32, 0xd2, 0x82, 0xfc, 0xc4, 0xb5, 0x9c, 0x99, 0xa8, 0x83,
	0x7a, 0x9f, 0xfa, 0x84, 0xe5, 0x2e, 0xa6, 0x62, 0x97, 0x1d, 0x66, 0xc4, 0x29, 0x14, 0xdd, 0x8b,
	0x0a, 0x6e, 0x1e, 0x49, 0x75, 0x32, 0x95, 0xdc, 0xdb, 0x8b, 0x8e, 0x25, 0x19, 0xe2, 0x8f, 0x1c,
	0x40, 0xad, 0xbd, 0x8c, 0x6d, 0x0c, 0xc0, 0x5e, 0x6a, 0xcb, 0x62, 0x00, 0xa0, 0x82, 0x71, 0x02,
	0x42, 0x3b, 0xb9, 0x99, 0x74, 0x71, 0xf3, 0xb4, 0x80, 0x31, 0x87, 0x89, 0x59, 0xe9, 0xa0, 0x5e,
	0xc3, 0xd9, 0xe8, 0x59, 0x97, 0x08, 0x93, 0xd7, 0x09, 0xe4, 0x2b, 0xae, 0x26, 0x81, 0x97, 0xfd,
	0xbe, 0xe1, 0xac, 0x3e, 0x89, 0x85, 0xeb, 0x6b, 0x63, 0x11, 0x54, 0xd6, 0xe4, 0x3b, 0x6e, 0x44,
	0x3c, 0x14, 0x3a, 0xe6, 0xae, 0x30, 0xab, 0x19, 0x7c, 0x6e, 0x90, 0x1f, 0xf8, 0x73, 0xb1, 0x4e,
	0xee, 0xba, 0x32, 0x89, 0xc0, 0xfc, 0x90, 0x49, 0xb6, 0xba, 0xfd, 0x6b, 0x84, 0x5b, 0x07, 0xd2,
	0x13, 0x83, 0xd5, 0x19, 0xf6, 0xfd, 0x10, 0xc8, 0x0e, 0x6e, 0x95, 0xb3, 0x79, 0x9e, 0xf0, 0xc8,
	0xb7, 0x37, 0x16, 0x61, 0xb5, 0xb7, 0x60, 0x79, 0x8a, 0x5d, 0xfc, 0x65, 0x2d, 0x1c, 0x8a, 0xa9,
	0x80, 0xf7, 0x06, 0xfd, 0xff, 0x3d, 0x5f, 0x50, 0xe3, 0x6e, 0x41, 0x8d, 0xe5, 0x82, 0xa2, 0xf3,
	0x94, 0xa2, 0x9b, 0x94, 0xa2, 0xdb, 0x94, 0xa2, 0x79, 0x4a, 0xd1, 0x7d, 0x4a, 0xd1, 0x63, 0x4a,
	0x8d, 0x65, 0x4a, 0xd1, 0xd5, 0x03, 0x35, 0xc6, 0xb5, 0xec, 0x51, 0xfc, 0x7d, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0xfc, 0xa5, 0xba, 0x31, 0x6b, 0x02, 0x00, 0x00,
}
