syntax = "proto3";

// The Node API is exposed by the Spire Server to Node Agents.  A node
// agent uses this API to attest the node it is running on, to retrieve the
// list of identities that are allowed to run on that node, and to retrieve
// SVIDs by presenting certificate signing requests to the Spire Server.
package spire.api.node;
option go_package = "node";

// A type which contains the "Spiffe Verifiable Identity Document" and
// a TTL indicating when the SVID expires.
message X509SVID {
    // X509 SVID and intermediates necessary to form a chain of trust back
    // to a root CA in the bundle.
    bytes cert_chain = 3;

    // SVID expiration timestamp (in seconds since Unix epoch)
    int64 expires_at = 2;
}

// A message returned by the Spire Server, which includes a map of signed SVIDs and
//a list of all current Registration Entries which are relevant to the caller SPIFFE ID.
message X509SVIDUpdate {
    // A map containing SVID values and corresponding SPIFFE IDs as the
    // keys. Map[SPIFFE_ID] => SVID.
    map<string, X509SVID> svids = 1;

    // A type representing a curated record that the Spire Server uses to set up
    // and manage the various registered nodes and workloads that are controlled by it.
    repeated RegistrationEntry registration_entries = 3;

    // Trust bundles associated with the SVIDs, keyed by trust domain SPIFFE
    // ID. Bundles included are the trust bundle for the server trust domain
    // and any federated trust domain bundles applicable to the SVIDs.
    map<string, Bundle> bundles = 5;
}

// Represents a request to attest the node.
message AttestRequest {
    // A type which contains attestation data for specific platform.
    AttestationData attestation_data = 1;

    // Certificate signing request.
    bytes csr = 2;

    // Attestation challenge response
    bytes response = 3;
}

// Represents a response that contains  map of signed SVIDs and an array of
// all current Registration Entries which are relevant to the caller SPIFFE ID
message AttestResponse {
    // It includes a map of signed SVIDs and an array of all current
    // Registration Entries which are relevant to the caller SPIFFE ID.
    X509SVIDUpdate svid_update = 1;

    // This is a challenge issued by the server to the node. If populated, the
    // node is expected to respond with another AttestRequest with the response.
    // This field is mutually exclusive with the update field.
    bytes challenge = 2;
}

// Node api
service Node {
    // Attest the node, get base node SVID.
    rpc Attest(stream AttestRequest) returns (stream AttestResponse);
}


// Represents an empty message
message Empty {}

// A type which contains attestation data for specific platform.
message AttestationData {
    // Type of attestation to perform.
    string type = 1;
    // The attestation data.
    bytes data = 2;
}

// A type which describes the conditions under which a registration
// entry is matched.
message Selector {
    // A selector type represents the type of attestation used in attesting
    // the entity (Eg: AWS, K8).
    string type = 1;
    // The value to be attested.
    string value = 2;
}

// Represents a type with a list of Selector.
message Selectors {
    // A list of Selector.
    repeated Selector entries = 1;
}

// Represents an attested SPIRE agent
message AttestedNode {
    // Node SPIFFE ID
    string spiffe_id = 1;

    // Attestation data type
    string attestation_data_type = 2;

    // Node certificate serial number
    string cert_serial_number = 3;

    // Node certificate not_after (seconds since unix epoch)
    int64 cert_not_after = 4;
}

// This is a curated record that the Server uses to set up and
// manage the various registered nodes and workloads that are controlled by it.
message RegistrationEntry {
    // A list of selectors.
    repeated Selector selectors = 1;
    // The SPIFFE ID of an entity that is authorized to attest the validity
    // of a selector
    string parent_id = 2;
    // The SPIFFE ID is a structured string used to identify a resource or
    // caller. It is defined as a URI comprising a “trust domain” and an
    // associated path.
    string spiffe_id = 3;
    // Time to live.
    int32 ttl = 4;
    // A list of federated trust domain SPIFFE IDs.
    repeated string federates_with = 5;
    // Entry ID
    string entry_id = 6;
    // Whether or not the workload is an admin workload. Admin workloads
    // can use their SVID's to authenticate with the Registration API, for
    // example.
    bool admin = 7;
    // To enable signing CA CSR in upstream spire server
    bool downstream = 8;
    // Expiration of this entry
    int64 expiry = 9;
}

// A list of registration entries.
message RegistrationEntries {
    // A list of RegistrationEntry.
    repeated RegistrationEntry entries = 1;
}

// Certificate represents a ASN.1/DER encoded X509 certificate
message Certificate {
    // Certificate in der format
    bytes der_bytes = 1;
}

// PublicKey represents a PKIX encoded public key
message PublicKey {
    // PKIX encoded key data
    bytes pkix_bytes = 1;

    // key identifier
    string kid = 2;

    // not after (seconds since unix epoch, 0 means "never expires")
    int64 not_after = 3;
}

// Trust domain bundle
message Bundle {
    // the SPIFFE ID of the trust domain the bundle belongs to
    string trust_domain_id = 1;

    // list of root CA certificates
    repeated Certificate root_cas = 2;

    // list of JWT signing keys
    repeated PublicKey jwt_signing_keys = 3;
}
