// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: security/proto/nodeagent_service.proto

/*
	Package istio_v1_auth is a generated protocol buffer package.

	It is generated from these files:
		security/proto/nodeagent_service.proto

	It has these top-level messages:
		CheckRequest
		CheckResponse
*/
package istio_v1_auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CheckResponse_Status_Code int32

const (
	// https://cloud.google.com/appengine/docs/admin-api/reference/rpc/google.rpc#google.rpc.Code
	OK                  CheckResponse_Status_Code = 0
	CANCELLED           CheckResponse_Status_Code = 1
	UNKNOWN             CheckResponse_Status_Code = 2
	INVALID_ARGUMENT    CheckResponse_Status_Code = 3
	DEADLINE_EXCEEDED   CheckResponse_Status_Code = 4
	NOT_FOUND           CheckResponse_Status_Code = 5
	ALREADY_EXISTS      CheckResponse_Status_Code = 6
	PERMISSION_DENIED   CheckResponse_Status_Code = 7
	UNAUTHENTICATED     CheckResponse_Status_Code = 8
	RESOURCE_EXHAUSTED  CheckResponse_Status_Code = 9
	FAILED_PRECONDITION CheckResponse_Status_Code = 10
	ABORTED             CheckResponse_Status_Code = 11
	OUT_OF_RANGE        CheckResponse_Status_Code = 12
	UNIMPLEMENTED       CheckResponse_Status_Code = 13
	INTERNAL            CheckResponse_Status_Code = 14
	UNAVAILABLE         CheckResponse_Status_Code = 15
	DATA_LOSS           CheckResponse_Status_Code = 16
)

var CheckResponse_Status_Code_name = map[int32]string{
	0:  "OK",
	1:  "CANCELLED",
	2:  "UNKNOWN",
	3:  "INVALID_ARGUMENT",
	4:  "DEADLINE_EXCEEDED",
	5:  "NOT_FOUND",
	6:  "ALREADY_EXISTS",
	7:  "PERMISSION_DENIED",
	8:  "UNAUTHENTICATED",
	9:  "RESOURCE_EXHAUSTED",
	10: "FAILED_PRECONDITION",
	11: "ABORTED",
	12: "OUT_OF_RANGE",
	13: "UNIMPLEMENTED",
	14: "INTERNAL",
	15: "UNAVAILABLE",
	16: "DATA_LOSS",
}
var CheckResponse_Status_Code_value = map[string]int32{
	"OK":                  0,
	"CANCELLED":           1,
	"UNKNOWN":             2,
	"INVALID_ARGUMENT":    3,
	"DEADLINE_EXCEEDED":   4,
	"NOT_FOUND":           5,
	"ALREADY_EXISTS":      6,
	"PERMISSION_DENIED":   7,
	"UNAUTHENTICATED":     8,
	"RESOURCE_EXHAUSTED":  9,
	"FAILED_PRECONDITION": 10,
	"ABORTED":             11,
	"OUT_OF_RANGE":        12,
	"UNIMPLEMENTED":       13,
	"INTERNAL":            14,
	"UNAVAILABLE":         15,
	"DATA_LOSS":           16,
}

func (CheckResponse_Status_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNodeagentService, []int{1, 0, 0}
}

type CheckRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptorNodeagentService, []int{0} }

func (m *CheckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CheckResponse struct {
	Status *CheckResponse_Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptorNodeagentService, []int{1} }

func (m *CheckResponse) GetStatus() *CheckResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CheckResponse_Status struct {
	Code    CheckResponse_Status_Code `protobuf:"varint,1,opt,name=code,proto3,enum=istio.v1.auth.CheckResponse_Status_Code" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CheckResponse_Status) Reset()      { *m = CheckResponse_Status{} }
func (*CheckResponse_Status) ProtoMessage() {}
func (*CheckResponse_Status) Descriptor() ([]byte, []int) {
	return fileDescriptorNodeagentService, []int{1, 0}
}

func (m *CheckResponse_Status) GetCode() CheckResponse_Status_Code {
	if m != nil {
		return m.Code
	}
	return OK
}

func (m *CheckResponse_Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckRequest)(nil), "istio.v1.auth.CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "istio.v1.auth.CheckResponse")
	proto.RegisterType((*CheckResponse_Status)(nil), "istio.v1.auth.CheckResponse.Status")
	proto.RegisterEnum("istio.v1.auth.CheckResponse_Status_Code", CheckResponse_Status_Code_name, CheckResponse_Status_Code_value)
}
func (x CheckResponse_Status_Code) String() string {
	s, ok := CheckResponse_Status_Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CheckRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckRequest)
	if !ok {
		that2, ok := that.(CheckRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CheckResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResponse)
	if !ok {
		that2, ok := that.(CheckResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *CheckResponse_Status) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckResponse_Status)
	if !ok {
		that2, ok := that.(CheckResponse_Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *CheckRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&istio_v1_auth.CheckRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&istio_v1_auth.CheckResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckResponse_Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&istio_v1_auth.CheckResponse_Status{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNodeagentService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeAgent service

type NodeAgentClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type nodeAgentClient struct {
	cc *grpc.ClientConn
}

func NewNodeAgentClient(cc *grpc.ClientConn) NodeAgentClient {
	return &nodeAgentClient{cc}
}

func (c *nodeAgentClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := grpc.Invoke(ctx, "/istio.v1.auth.NodeAgent/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeAgent service

type NodeAgentServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
}

func RegisterNodeAgentServer(s *grpc.Server, srv NodeAgentServer) {
	s.RegisterService(&_NodeAgent_serviceDesc, srv)
}

func _NodeAgent_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAgentServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/istio.v1.auth.NodeAgent/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAgentServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "istio.v1.auth.NodeAgent",
	HandlerType: (*NodeAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _NodeAgent_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security/proto/nodeagent_service.proto",
}

func (m *CheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodeagentService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodeagentService(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CheckResponse_Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckResponse_Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeagentService(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNodeagentService(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintNodeagentService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNodeagentService(uint64(l))
	}
	return n
}

func (m *CheckResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNodeagentService(uint64(l))
	}
	return n
}

func (m *CheckResponse_Status) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNodeagentService(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNodeagentService(uint64(l))
	}
	return n
}

func sovNodeagentService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNodeagentService(x uint64) (n int) {
	return sovNodeagentService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "CheckResponse_Status", "CheckResponse_Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckResponse_Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckResponse_Status{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNodeagentService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeagentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeagentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeagentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeagentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeagentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeagentService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CheckResponse_Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeagentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeagentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckResponse_Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeagentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (CheckResponse_Status_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeagentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeagentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeagentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeagentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeagentService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeagentService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeagentService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeagentService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNodeagentService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNodeagentService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNodeagentService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNodeagentService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeagentService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("security/proto/nodeagent_service.proto", fileDescriptorNodeagentService)
}

var fileDescriptorNodeagentService = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x34, 0x4d, 0x9b, 0xc9, 0xbf, 0xed, 0x96, 0x3f, 0x51, 0x41, 0x16, 0x0a, 0x12,
	0xea, 0x01, 0xb9, 0x22, 0x1c, 0xe1, 0xb2, 0xf1, 0x4e, 0xda, 0x55, 0x9d, 0xdd, 0x68, 0x6d, 0x97,
	0x72, 0xb2, 0x42, 0xb2, 0x6a, 0x23, 0xd4, 0xb8, 0xc4, 0x4e, 0x25, 0x6e, 0x3c, 0x02, 0x67, 0x9e,
	0x80, 0x37, 0xe0, 0x15, 0x38, 0xf6, 0xc8, 0x91, 0x98, 0x0b, 0xdc, 0xfa, 0x08, 0xc8, 0x6e, 0x39,
	0x54, 0x42, 0x88, 0xdb, 0xee, 0xe8, 0x37, 0xdf, 0xcc, 0xe8, 0xfb, 0xe0, 0x49, 0x62, 0x26, 0xcb,
	0xc5, 0x2c, 0x7d, 0xbf, 0x77, 0xbe, 0x88, 0xd3, 0x78, 0x6f, 0x1e, 0x4f, 0xcd, 0xf8, 0xc4, 0xcc,
	0xd3, 0x28, 0x31, 0x8b, 0x8b, 0xd9, 0xc4, 0x38, 0x45, 0x9d, 0x36, 0x67, 0x49, 0x3a, 0x8b, 0x9d,
	0x8b, 0x67, 0xce, 0x78, 0x99, 0x9e, 0x76, 0xbb, 0xd0, 0x70, 0x4f, 0xcd, 0xe4, 0xad, 0x36, 0xef,
	0x96, 0x26, 0x49, 0x29, 0x85, 0xca, 0x7c, 0x7c, 0x66, 0x3a, 0xd6, 0x23, 0x6b, 0xb7, 0xa6, 0x8b,
	0x77, 0xf7, 0xd7, 0x1a, 0x34, 0x6f, 0xa0, 0xe4, 0x3c, 0x9e, 0x27, 0x86, 0xbe, 0x80, 0x6a, 0x92,
	0x8e, 0xd3, 0x65, 0x52, 0x70, 0xf5, 0xde, 0x63, 0xe7, 0x96, 0xaa, 0x73, 0x8b, 0x76, 0xfc, 0x02,
	0xd5, 0x37, 0x2d, 0x3b, 0x9f, 0xd6, 0xa0, 0x7a, 0x5d, 0xa2, 0x2f, 0xa1, 0x32, 0x89, 0xa7, 0xd7,
	0xd3, 0x5a, 0xbd, 0xdd, 0xff, 0x50, 0x71, 0xdc, 0x78, 0x6a, 0x74, 0xd1, 0x45, 0x3b, 0xb0, 0x71,
	0x66, 0x92, 0x64, 0x7c, 0x62, 0x3a, 0xe5, 0x62, 0xdd, 0x3f, 0xdf, 0xee, 0x97, 0x32, 0x54, 0x72,
	0x90, 0x56, 0xa1, 0xac, 0x0e, 0x49, 0x89, 0x36, 0xa1, 0xe6, 0x32, 0xe9, 0xa2, 0xe7, 0x21, 0x27,
	0x16, 0xad, 0xc3, 0x46, 0x28, 0x0f, 0xa5, 0x7a, 0x25, 0x49, 0x99, 0xde, 0x01, 0x22, 0xe4, 0x11,
	0xf3, 0x04, 0x8f, 0x98, 0xde, 0x0f, 0x87, 0x28, 0x03, 0xb2, 0x46, 0xef, 0xc2, 0x16, 0x47, 0xc6,
	0x3d, 0x21, 0x31, 0xc2, 0x63, 0x17, 0x91, 0x23, 0x27, 0x95, 0x5c, 0x48, 0xaa, 0x20, 0x1a, 0xa8,
	0x50, 0x72, 0xb2, 0x4e, 0x29, 0xb4, 0x98, 0xa7, 0x91, 0xf1, 0xd7, 0x11, 0x1e, 0x0b, 0x3f, 0xf0,
	0x49, 0x35, 0xef, 0x1c, 0xa1, 0x1e, 0x0a, 0xdf, 0x17, 0x4a, 0x46, 0x1c, 0xa5, 0x40, 0x4e, 0x36,
	0xe8, 0x36, 0xb4, 0x43, 0xc9, 0xc2, 0xe0, 0x00, 0x65, 0x20, 0x5c, 0x16, 0x20, 0x27, 0x9b, 0xf4,
	0x1e, 0x50, 0x8d, 0xbe, 0x0a, 0xb5, 0x9b, 0x4f, 0x39, 0x60, 0xa1, 0x9f, 0xd7, 0x6b, 0xf4, 0x3e,
	0x6c, 0x0f, 0x98, 0xf0, 0x90, 0x47, 0x23, 0x8d, 0xae, 0x92, 0x5c, 0x04, 0x42, 0x49, 0x02, 0xf9,
	0xe6, 0xac, 0xaf, 0x74, 0x4e, 0xd5, 0x29, 0x81, 0x86, 0x0a, 0x83, 0x48, 0x0d, 0x22, 0xcd, 0xe4,
	0x3e, 0x92, 0x06, 0xdd, 0x82, 0x66, 0x28, 0xc5, 0x70, 0xe4, 0x61, 0x7e, 0x06, 0x72, 0xd2, 0xa4,
	0x0d, 0xd8, 0x14, 0x32, 0x40, 0x2d, 0x99, 0x47, 0x5a, 0xb4, 0x0d, 0xf5, 0x50, 0xb2, 0x23, 0x26,
	0x3c, 0xd6, 0xf7, 0x90, 0xb4, 0xf3, 0x83, 0x38, 0x0b, 0x58, 0xe4, 0x29, 0xdf, 0x27, 0xa4, 0xa7,
	0xa0, 0x26, 0xe3, 0xa9, 0x61, 0x79, 0x72, 0x68, 0x1f, 0xd6, 0x0b, 0x0f, 0xe8, 0x83, 0xbf, 0x3b,
	0x53, 0x44, 0x66, 0xe7, 0xe1, 0xbf, 0x6c, 0xeb, 0x3f, 0xbd, 0x5c, 0xd9, 0xa5, 0x6f, 0x2b, 0xbb,
	0x74, 0xb5, 0xb2, 0xad, 0x0f, 0x99, 0x6d, 0x7d, 0xce, 0x6c, 0xeb, 0x6b, 0x66, 0x5b, 0x97, 0x99,
	0x6d, 0x7d, 0xcf, 0x6c, 0xeb, 0x67, 0x66, 0x97, 0xae, 0x32, 0xdb, 0xfa, 0xf8, 0xc3, 0x2e, 0xbd,
	0xa9, 0x16, 0x21, 0x7d, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x4c, 0x5f, 0x6c, 0xce, 0x02,
	0x00, 0x00,
}
