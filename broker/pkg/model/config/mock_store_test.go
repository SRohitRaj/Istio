// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

package config

import (
	gomock "github.com/golang/mock/gomock"
	config "istio.io/api/broker/v1/config"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStore) EXPECT() *MockStoreMockRecorder {
	return _m.recorder
}

// Descriptor mocks base method
func (_m *MockStore) Descriptor() Descriptor {
	ret := _m.ctrl.Call(_m, "Descriptor")
	ret0, _ := ret[0].(Descriptor)
	return ret0
}

// Descriptor indicates an expected call of Descriptor
func (_mr *MockStoreMockRecorder) Descriptor() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Descriptor", reflect.TypeOf((*MockStore)(nil).Descriptor))
}

// Get mocks base method
func (_m *MockStore) Get(typ string, name string, namespace string) (*Entry, bool) {
	ret := _m.ctrl.Call(_m, "Get", typ, name, namespace)
	ret0, _ := ret[0].(*Entry)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method
func (_m *MockStore) List(typ string, namespace string) ([]Entry, error) {
	ret := _m.ctrl.Call(_m, "List", typ, namespace)
	ret0, _ := ret[0].([]Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockStoreMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), arg0, arg1)
}

// Create mocks base method
func (_m *MockStore) Create(entry Entry) (string, error) {
	ret := _m.ctrl.Call(_m, "Create", entry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), arg0)
}

// Update mocks base method
func (_m *MockStore) Update(entry Entry) (string, error) {
	ret := _m.ctrl.Call(_m, "Update", entry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), arg0)
}

// Delete mocks base method
func (_m *MockStore) Delete(typ string, name string, namespace string) error {
	ret := _m.ctrl.Call(_m, "Delete", typ, name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockStoreMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), arg0, arg1, arg2)
}

// MockBrokerConfigStore is a mock of BrokerConfigStore interface
type MockBrokerConfigStore struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerConfigStoreMockRecorder
}

// MockBrokerConfigStoreMockRecorder is the mock recorder for MockBrokerConfigStore
type MockBrokerConfigStoreMockRecorder struct {
	mock *MockBrokerConfigStore
}

// NewMockBrokerConfigStore creates a new mock instance
func NewMockBrokerConfigStore(ctrl *gomock.Controller) *MockBrokerConfigStore {
	mock := &MockBrokerConfigStore{ctrl: ctrl}
	mock.recorder = &MockBrokerConfigStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockBrokerConfigStore) EXPECT() *MockBrokerConfigStoreMockRecorder {
	return _m.recorder
}

// ServiceClasses mocks base method
func (_m *MockBrokerConfigStore) ServiceClasses() map[string]*config.ServiceClass {
	ret := _m.ctrl.Call(_m, "ServiceClasses")
	ret0, _ := ret[0].(map[string]*config.ServiceClass)
	return ret0
}

// ServiceClasses indicates an expected call of ServiceClasses
func (_mr *MockBrokerConfigStoreMockRecorder) ServiceClasses() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ServiceClasses", reflect.TypeOf((*MockBrokerConfigStore)(nil).ServiceClasses))
}

// ServicePlans mocks base method
func (_m *MockBrokerConfigStore) ServicePlans() map[string]*config.ServicePlan {
	ret := _m.ctrl.Call(_m, "ServicePlans")
	ret0, _ := ret[0].(map[string]*config.ServicePlan)
	return ret0
}

// ServicePlans indicates an expected call of ServicePlans
func (_mr *MockBrokerConfigStoreMockRecorder) ServicePlans() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ServicePlans", reflect.TypeOf((*MockBrokerConfigStore)(nil).ServicePlans))
}

// ServicePlansByService mocks base method
func (_m *MockBrokerConfigStore) ServicePlansByService(service string) map[string]*config.ServicePlan {
	ret := _m.ctrl.Call(_m, "ServicePlansByService", service)
	ret0, _ := ret[0].(map[string]*config.ServicePlan)
	return ret0
}

// ServicePlansByService indicates an expected call of ServicePlansByService
func (_mr *MockBrokerConfigStoreMockRecorder) ServicePlansByService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ServicePlansByService", reflect.TypeOf((*MockBrokerConfigStore)(nil).ServicePlansByService), arg0)
}
