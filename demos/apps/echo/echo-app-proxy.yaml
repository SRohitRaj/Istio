# Example service with an injected proxy
apiVersion: v1
kind: Service
metadata:
  name: echo
  labels:
    app: echo
spec:
  ports:
  - port: 80
    targetPort: 80
    name: http
  - port: 8080
    targetPort: 8080
    name: http-alternative
  selector:
    app: echo
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: echo
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: echo
        version: unversioned
      annotations:
        # init container uses iptables rules to redirect traffic to the proxy
        pod.beta.kubernetes.io/init-containers: >
          [{
            "name": "iptables",
            "image": "docker.io/istio/init:2017-03-22-21.21.48",
            "args": ["-p", "15001", "-u", "1337"],
            "imagePullPolicy": "Always",
            "securityContext": { "capabilities" : { "add" : ["NET_ADMIN"] } }
          }]
    spec:
      containers:
      - name: app
        image: docker.io/istio/app:2017-03-17-22.11.25
        imagePullPolicy: Always
        args:
          - --port
          - "80"
          - --port
          - "8080"
          - --version
          - "unversioned"
        ports:
        - containerPort: 80
        - containerPort: 8080
      - name: proxy
        image: docker.io/istio/runtime:2017-03-22-21.21.48
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1337
        args:
          - proxy
          - sidecar
          - -s
          - istio-manager:8080
          - -m
          - istio-mixer:9091
          - -n
          - $(POD_NAMESPACE)
          - -v
          - "2"
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
---
