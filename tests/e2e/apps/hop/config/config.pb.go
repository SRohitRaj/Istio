// Code generated by protoc-gen-gogo.
// source: tests/e2e/apps/hop/config/config.proto
// DO NOT EDIT!

/*
	Package config is a generated protocol buffer package.

	It is generated from these files:
		tests/e2e/apps/hop/config/config.proto

	It has these top-level messages:
		Remote
		HopMessage
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Remote struct {
	Destination string        `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Error       string        `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Version     string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Done        bool          `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"`
	Rtt         time.Duration `protobuf:"bytes,5,opt,name=rtt,stdduration" json:"rtt"`
}

func (m *Remote) Reset()                    { *m = Remote{} }
func (*Remote) ProtoMessage()               {}
func (*Remote) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Remote) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Remote) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Remote) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Remote) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *Remote) GetRtt() time.Duration {
	if m != nil {
		return m.Rtt
	}
	return 0
}

type HopMessage struct {
	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position    int64     `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	RemoteDests []*Remote `protobuf:"bytes,4,rep,name=remoteDests" json:"remoteDests,omitempty"`
}

func (m *HopMessage) Reset()                    { *m = HopMessage{} }
func (*HopMessage) ProtoMessage()               {}
func (*HopMessage) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *HopMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HopMessage) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *HopMessage) GetRemoteDests() []*Remote {
	if m != nil {
		return m.RemoteDests
	}
	return nil
}

func init() {
	proto.RegisterType((*Remote)(nil), "config.Remote")
	proto.RegisterType((*HopMessage)(nil), "config.HopMessage")
}
func (this *Remote) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Remote)
	if !ok {
		that2, ok := that.(Remote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Destination != that1.Destination {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Done != that1.Done {
		return false
	}
	if this.Rtt != that1.Rtt {
		return false
	}
	return true
}
func (this *HopMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HopMessage)
	if !ok {
		that2, ok := that.(HopMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if len(this.RemoteDests) != len(that1.RemoteDests) {
		return false
	}
	for i := range this.RemoteDests {
		if !this.RemoteDests[i].Equal(that1.RemoteDests[i]) {
			return false
		}
	}
	return true
}
func (this *Remote) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&config.Remote{")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Done: "+fmt.Sprintf("%#v", this.Done)+",\n")
	s = append(s, "Rtt: "+fmt.Sprintf("%#v", this.Rtt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HopMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&config.HopMessage{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	if this.RemoteDests != nil {
		s = append(s, "RemoteDests: "+fmt.Sprintf("%#v", this.RemoteDests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HopTestService service

type HopTestServiceClient interface {
	Hop(ctx context.Context, in *HopMessage, opts ...grpc.CallOption) (*HopMessage, error)
}

type hopTestServiceClient struct {
	cc *grpc.ClientConn
}

func NewHopTestServiceClient(cc *grpc.ClientConn) HopTestServiceClient {
	return &hopTestServiceClient{cc}
}

func (c *hopTestServiceClient) Hop(ctx context.Context, in *HopMessage, opts ...grpc.CallOption) (*HopMessage, error) {
	out := new(HopMessage)
	err := grpc.Invoke(ctx, "/config.HopTestService/Hop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HopTestService service

type HopTestServiceServer interface {
	Hop(context.Context, *HopMessage) (*HopMessage, error)
}

func RegisterHopTestServiceServer(s *grpc.Server, srv HopTestServiceServer) {
	s.RegisterService(&_HopTestService_serviceDesc, srv)
}

func _HopTestService_Hop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HopMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HopTestServiceServer).Hop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.HopTestService/Hop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HopTestServiceServer).Hop(ctx, req.(*HopMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _HopTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.HopTestService",
	HandlerType: (*HopTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hop",
			Handler:    _HopTestService_Hop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tests/e2e/apps/hop/config/config.proto",
}

func (m *Remote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Remote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Done {
		dAtA[i] = 0x20
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintConfig(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Rtt)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Rtt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *HopMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HopMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Position != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Position))
	}
	if len(m.RemoteDests) > 0 {
		for _, msg := range m.RemoteDests {
			dAtA[i] = 0x22
			i++
			i = encodeVarintConfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Config(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Config(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Remote) Size() (n int) {
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Done {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Rtt)
	n += 1 + l + sovConfig(uint64(l))
	return n
}

func (m *HopMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovConfig(uint64(m.Position))
	}
	if len(m.RemoteDests) > 0 {
		for _, e := range m.RemoteDests {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Remote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Remote{`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Done:` + fmt.Sprintf("%v", this.Done) + `,`,
		`Rtt:` + strings.Replace(strings.Replace(this.Rtt.String(), "Duration", "google_protobuf.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HopMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HopMessage{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`RemoteDests:` + strings.Replace(fmt.Sprintf("%v", this.RemoteDests), "Remote", "Remote", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Remote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Remote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Remote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Rtt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HopMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HopMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HopMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteDests = append(m.RemoteDests, &Remote{})
			if err := m.RemoteDests[len(m.RemoteDests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tests/e2e/apps/hop/config/config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x6e, 0xe2, 0x40,
	0x14, 0x86, 0x3d, 0x18, 0x58, 0x76, 0x2c, 0x51, 0x8c, 0x28, 0xbc, 0x2e, 0x06, 0x8b, 0x62, 0xe5,
	0x62, 0xd7, 0x5e, 0x79, 0xb5, 0xf5, 0x4a, 0x88, 0x82, 0x66, 0x1b, 0x6f, 0x2e, 0x00, 0xf8, 0xe1,
	0x38, 0x4a, 0xfc, 0x46, 0x33, 0x03, 0x75, 0x8e, 0x90, 0x32, 0x17, 0x88, 0x94, 0xa3, 0x50, 0x52,
	0xa6, 0x4a, 0x82, 0xd3, 0xa4, 0xe4, 0x08, 0x91, 0xc7, 0x76, 0x42, 0x91, 0x6a, 0xde, 0xff, 0xcf,
	0xfb, 0xa5, 0xef, 0x7f, 0xf4, 0xbb, 0x06, 0xa5, 0x55, 0x04, 0x31, 0x44, 0x0b, 0x21, 0x54, 0x74,
	0x8e, 0x22, 0x5a, 0x61, 0xb1, 0xce, 0xb3, 0xe6, 0x09, 0x85, 0x44, 0x8d, 0xac, 0x5f, 0x2b, 0x8f,
	0x67, 0x88, 0xd9, 0x25, 0x44, 0xc6, 0x5d, 0x6e, 0xd6, 0x51, 0xba, 0x91, 0x0b, 0x9d, 0x63, 0x51,
	0xef, 0x79, 0xa3, 0x0c, 0x33, 0x34, 0x63, 0x54, 0x4d, 0xb5, 0x3b, 0xb9, 0x23, 0xb4, 0x9f, 0xc0,
	0x15, 0x6a, 0x60, 0x3e, 0x75, 0x52, 0x50, 0x3a, 0x2f, 0x4c, 0xca, 0x25, 0x3e, 0x09, 0xbe, 0x26,
	0xa7, 0x16, 0x1b, 0xd1, 0x1e, 0x48, 0x89, 0xd2, 0xed, 0x98, 0xbf, 0x5a, 0x30, 0x97, 0x7e, 0xd9,
	0x82, 0x54, 0x55, 0xc6, 0x36, 0x7e, 0x2b, 0x19, 0xa3, 0xdd, 0x14, 0x0b, 0x70, 0xbb, 0x3e, 0x09,
	0x06, 0x89, 0x99, 0xd9, 0x1f, 0x6a, 0x4b, 0xad, 0xdd, 0x9e, 0x4f, 0x02, 0x27, 0xfe, 0x16, 0xd6,
	0xd0, 0x61, 0x0b, 0x1d, 0xce, 0x1a, 0xe8, 0xe9, 0x60, 0xf7, 0x38, 0xb6, 0x6e, 0x9f, 0xc6, 0x24,
	0xa9, 0xf6, 0x27, 0x17, 0x94, 0xce, 0x51, 0xfc, 0x03, 0xa5, 0x16, 0x19, 0xb0, 0x21, 0xed, 0xe4,
	0x69, 0x43, 0xd8, 0xc9, 0x53, 0xe6, 0xd1, 0x81, 0x40, 0x95, 0xeb, 0x96, 0xc1, 0x4e, 0xde, 0x35,
	0xfb, 0x45, 0x1d, 0x69, 0x0a, 0xce, 0xaa, 0x7b, 0xba, 0x5d, 0xdf, 0x0e, 0x9c, 0x78, 0x18, 0x36,
	0x37, 0xac, 0xbb, 0x27, 0xa7, 0x2b, 0xf1, 0x5f, 0x3a, 0x9c, 0xa3, 0x38, 0x03, 0xa5, 0xff, 0x83,
	0xdc, 0xe6, 0x2b, 0x60, 0x3f, 0xa9, 0x3d, 0x47, 0xc1, 0x58, 0x9b, 0xfa, 0x40, 0xf1, 0x3e, 0xf1,
	0xa6, 0x3f, 0xf6, 0x07, 0x6e, 0x3d, 0x1c, 0xb8, 0x75, 0x3c, 0x70, 0x72, 0x5d, 0x72, 0x72, 0x5f,
	0x72, 0xb2, 0x2b, 0x39, 0xd9, 0x97, 0x9c, 0x3c, 0x97, 0x9c, 0xbc, 0x96, 0xdc, 0x3a, 0x96, 0x9c,
	0xdc, 0xbc, 0x70, 0x6b, 0xd9, 0x37, 0xe5, 0x7f, 0xbf, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xe1,
	0x76, 0x40, 0xf1, 0x01, 0x00, 0x00,
}
