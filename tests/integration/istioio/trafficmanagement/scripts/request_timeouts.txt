#!/usr/bin/env bash

# Copyright 2020 Istio Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -u
set -o pipefail

# Step 1: setup bookinfo & sleep pods
kubectl label namespace default istio-injection=enabled --overwrite || true

kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml
kubectl apply -f samples/sleep/sleep.yaml

for deploy in "productpage-v1" "details-v1" "ratings-v1" "reviews-v1" "reviews-v2" "reviews-v3" "sleep"; do
  if ! kubectl rollout status deployment "$deploy" --timeout 5m; then
    echo "$deploy deployment rollout status check failed"
    exit 1
  fi
done

# Step 2
# $snippet route_all_v1.sh syntax="bash" outputis="text" outputsnippet="true"
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@
# $verify
virtualservice.networking.istio.io/productpage created
virtualservice.networking.istio.io/reviews created
virtualservice.networking.istio.io/ratings created
virtualservice.networking.istio.io/details created
# $endsnippet

# Step 3: Route requests to v2 of the reviews service
# $snippet v2_reviews.sh syntax="bash"
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
EOF
# $endsnippet

# Step 4: Add a 2 second delay to calls to the ratings service
# $snippet delay_ratings.sh syntax="bash"
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ratings
spec:
  hosts:
  - ratings
  http:
  - fault:
      delay:
        percent: 100
        fixedDelay: 2s
    route:
    - destination:
        host: ratings
        subset: v1
EOF
# $endsnippet

# Export HOST, PORT and URL
# $snippet export_gateway_url.sh syntax="bash"
INGRESS_NS=${INGRESS_NS:-istio-system}
INGRESS_HOST=$(kubectl -n "${INGRESS_NS}" get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_HOST
INGRESS_PORT=$(kubectl -n "${INGRESS_NS}" get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export INGRESS_PORT
SECURE_INGRESS_PORT=$(kubectl -n "${INGRESS_NS}" get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
export SECURE_INGRESS_PORT
if [ -z "$INGRESS_HOST" ]; then
    INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n "${INGRESS_NS}" -o jsonpath='{.items[0].status.hostIP}')
    export INGRESS_HOST
    INGRESS_PORT=$(kubectl -n "${INGRESS_NS}" get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
    export INGRESS_PORT
    SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
    export SECURE_INGRESS_PORT
fi
export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
# $endsnippet

# Step 5: Verify 2s delay with ratings stars displayed
# $snippet verify_ratings.sh syntax="bash"
$ curl http://"${GATEWAY_URL}"/productpage | grep -o ".*glyphicon glyphicon-star"
sleep 3
# $verify verifier="contains" source="stdout"
<span class="glyphicon glyphicon-star
# $endsnippet

# Step 6: add a half second request timeout for calls to the reviews service
# $snippet delay_reviews.sh syntax="bash"
$ kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
    timeout: 0.5s
EOF
# $endsnippet

# Step 7: Verify product reviews are unavailable
# $snippet verify_ratings.sh syntax="bash"
$ curl http://"${GATEWAY_URL}"/productpage | grep -o "<p>Sorry.*</p>"
sleep 1
# $verify verifier="contains" source="stdout"
<p>Sorry, product reviews are currently unavailable for this book.</p>
# $endsnippet
