#!/usr/bin/env bash

# Copyright 2019 Istio Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -u
set -o pipefail

REPEAT=${REPEAT:-100}
THRESHOLD=${THRESHOLD:-20}

function verify_services {
  unmatchedText=""
  wantTextPattern=("$@")
  goodResponse=0

  for ((i=1; i<="$REPEAT"; i++)); do
    tmpfile=$(mktemp /tmp/verify-services.XXXXXX)
    set +e
    $(kubectl get services > "${tmpfile}")
    set -e
    body=$(cat ${tmpfile})

    matchedText=0
    for want in "${wantTextPattern[@]}"; do
       if [ "`grep "${want}" "${tmpfile}"`" != "" ]; then
        matchedText=$((matchedText + 1))
      else
        unmatchedText="${want}"
      fi
    done

    if [[ "$matchedText" == "$#" ]]; then
      goodResponse=$((goodResponse + 1))
    else
      goodResponse=0
    fi

    if (( "$goodResponse">="$THRESHOLD" )); then
      return 0
    fi
  done
  rm "$tmpfile"

  echo -e "did not match text: ${unmatchedText} in ${body}\n"
  return 1
}

function verify_pods {
  unmatchedText=""
  wantTextPattern=("$@")
  goodResponse=0

  for ((i=1; i<="$REPEAT"; i++)); do
    tmpfile=$(mktemp /tmp/verify-pods.XXXXXX)
    set +e
    $(kubectl get pods > "${tmpfile}")
    set -e
    body=$(cat ${tmpfile})

    matchedText=0
    for want in "${wantTextPattern[@]}"; do
       if [ "`grep "${want}" "${tmpfile}"`" != "" ]; then
        matchedText=$((matchedText + 1))
      else
        unmatchedText="${want}"
      fi
    done

    if [[ "$matchedText" == "$#" ]]; then
      goodResponse=$((goodResponse + 1))
    else
      goodResponse=0
    fi

    if (( "$goodResponse">="$THRESHOLD" )); then
      return 0
    fi
  done
  rm "$tmpfile"

  echo -e "did not match text: ${unmatchedText} in ${body}\n"
  return 1
}

# Remove the injection label to prevent following command to fail
kubectl label namespace default istio-injection-

# $snippet automatic_sidecar_injection.sh syntax="bash"
$ kubectl label namespace default istio-injection=enabled
# $endsnippet

# $snippet deploy_bookinfo_application.sh syntax="bash"
$ kubectl apply -f @samples/bookinfo/platform/kube/bookinfo.yaml@
# $endsnippet

# $snippet verify_service.sh syntax="bash" outputis="text" outputsnippet="true"
$ kubectl get services
# $endsnippet

verify_services "NAME *TYPE *CLUSTER-IP *EXTERNAL-IP *PORT(S) *AGE" "details *ClusterIP *[0-9.]* *.none. *9080/TCP" "kubernetes *ClusterIP *[0-9.]* *.none. *443/TCP" "productpage *ClusterIP *[0-9.]* *.none. *9080/TCP" "ratings *ClusterIP *[0-9.]* *.none. *9080/TCP" "reviews *ClusterIP *[0-9.]* *.none. *9080/TCP"

# Wait for the pods to start
while true; do
  if [ "`kubectl get pods | grep -E "(Init|Pending|PodInitializing)"`" != "" ]; then
    sleep 30
  else
    break
  fi
done

verify_pods "NAME *READY *STATUS *RESTARTS *AGE" "details-v1-[0-9a-z]*-[0-9a-z]* *2/2 *Running *0" "productpage-v1-[0-9a-z]*-[0-9a-z]* *2/2 *Running *0" "ratings-v1-[0-9a-z]*-[0-9a-z]* *2/2 *Running *0" "reviews-v1-[0-9a-z]*-[0-9a-z]* *2/2 *Running *0" "reviews-v2-[0-9a-z]*-[0-9a-z]* *2/2 *Running *0" "reviews-v3-[0-9a-z]*-[0-9a-z]* *2/2 *Running *0"

# $snippet verify_pods.sh syntax="bash" outputis="text" outputsnippet="true"
$ kubectl get pods
# $endsnippet
