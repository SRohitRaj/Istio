# The following policy enables mTLS for server side workload.

apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: mtls
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  mtls:
    mode: STRICT
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: mtls
  namespace: "{{ .dstNamespace }}"
spec:
  host: "{{ .dst }}.{{ .dstNamespace }}.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---

# Each of the following authorization policy uses a different condition on the given path.

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-request-headers
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/request-headers"]
    when:
    - key: request.headers[x-foo]
      values: ["foo"]
---

# Each of the following authorization policy uses a different condition on the given path.

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-request-headers-notvalues
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/request-headers-notValues-bar"]
    when:
    - key: request.headers[x-foo]
      notValues: ["bar"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-source-ip
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/source-ip-{{ .src1 }}"]
    when:
    - key: source.ip
      values: ["{{ .src1IP }}"]
  - to:
    - operation:
        paths: ["/source-ip-{{ .src2 }}"]
    when:
    - key: source.ip
      values: ["{{ .src2IP }}"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-source-ip-notvalues
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/source-ip-notValues-{{ .src2 }}"]
    when:
    - key: source.ip
      notValues: ["{{ .src2IP }}"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-source-namespace
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/source-namespace-{{ .src1 }}"]
    when:
    - key: source.namespace
      values: ["{{ .src1Namespace }}"]
  - to:
    - operation:
        paths: ["/source-namespace-{{ .src2 }}"]
    when:
    - key: source.namespace
      values: ["{{ .src2Namespace }}"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-source-namespace-notvalues
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/source-namespace-notValues-{{ .src2 }}"]
    when:
    - key: source.namespace
      notValues: ["{{ .src2Namespace }}"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-source-principal
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/source-principal-{{ .src1 }}"]
    when:
    - key: source.principal
      values: ["cluster.local/ns/{{ .src1Namespace }}/sa/{{ .src1 }}"]
  - to:
    - operation:
        paths: ["/source-principal-{{ .src2 }}"]
    when:
    - key: source.principal
      values: ["cluster.local/ns/{{ .src2Namespace }}/sa/{{ .src2 }}"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-source-principal-notvalues
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/source-principal-notValues-{{ .src2 }}"]
    when:
    - key: source.principal
      notValues: ["cluster.local/ns/{{ .src2Namespace }}/sa/{{ .src2 }}"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-destination-ip
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/destination-ip-good"]
    when:
    - key: destination.ip
      values: [{{ .dstIP }}]
  - to:
    - operation:
        paths: ["/destination-ip-bad"]
    when:
    - key: destination.ip
      values: ["1.2.3.4"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-destination-ip-notvalues
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/destination-ip-notValues-{{ .src1 }}-or-{{ .src2 }}"]
    when:
    - key: destination.ip
      notValues: ["{{ .src1IP }}", "{{ .src2IP }}"]
  - to:
    - operation:
        paths: ["/destination-ip-notValues-{{ .src1 }}-or-{{ .src2 }}-or-{{ .dst }}"]
    when:
    - key: destination.ip
      notValues: ["{{ .src1IP }}", "{{ .src2IP }}", {{ .dstIP }}]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-destination-port
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/destination-port-good"]
    when:
    - key: destination.port
      values: ["{{ .dstPort }}"]
  - to:
    - operation:
        paths: ["/destination-port-bad"]
    when:
    - key: destination.port
      values: ["1"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-destination-port-notvalues
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/destination-port-notValues-{{ .dst }}"]
    when:
    - key: destination.port
      notValues: ["{{ .dstPort }}"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-connection-sni
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/connection-sni-good"]
    when:
    - key: connection.sni
      values: ["*.{{ .dst }}.{{ .dstNamespace }}.svc.cluster.local"]
  - to:
    - operation:
        paths: ["/connection-sni-bad"]
    when:
    - key: connection.sni
      values: ["never-matched"]
---

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: condition-connection-sni-notvalues
  namespace: "{{ .dstNamespace }}"
spec:
  selector:
    matchLabels:
      app: {{ .dst }}
  rules:
  - to:
    - operation:
        paths: ["/connection-sni-notValues-{{ .src1 }}-or-{{ .src2 }}"]
    when:
    - key: connection.sni
      notValues: ["*.{{ .src1 }}.{{ .src1Namespace }}.svc.cluster.local", "*.{{ .src2 }}.{{ .src2Namespace }}.svc.cluster.local"]
  - to:
    - operation:
        paths: ["/connection-sni-notValues-{{ .src1 }}-or-{{ .src2 }}-or-{{ .dst }}"]
    when:
    - key: connection.sni
      notValues: ["*.{{ .src1 }}.{{ .src1Namespace }}.svc.cluster.local", "*.{{ .src2 }}.{{ .src2Namespace }}.svc.cluster.local", "*.{{ .dst }}.{{ .dstNamespace }}.svc.cluster.local"]
---
