# Installed for each revision - not installed for cluster resources ( cluster roles, bindings, crds)
{{- if not .Values.global.operatorManageWebhooks }}
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
{{- if eq .Release.Namespace "istio-system"}}
  name: istio-sidecar-injector{{- if not (eq .Values.revision "") }}-{{ .Values.revision }}{{- end }}
{{ else }}
  name: istio-sidecar-injector{{- if not (eq .Values.revision "") }}-{{ .Values.revision }}{{- end }}-{{ .Release.Namespace }}
{{- end }}
  labels:
    istio.io/rev: {{ .Values.revision | default "default" }}
    app: sidecar-injector
    release: {{ .Release.Name }}
webhooks:
{{- if eq .Values.revision ""}}
{{/*  No revision set. Set up istio-injection=enabled matcher */}}
  - name: sidecar-injector.istio.io
    clientConfig:
      service:
        name: istiod{{- if not (eq .Values.revision "") }}-{{ .Values.revision }}{{- end }}
        namespace: {{ .Release.Namespace }}
        path: "/inject"
      caBundle: ""
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    namespaceSelector:
      {{- if .Values.sidecarInjectorWebhook.enableNamespacesByDefault }}
      matchExpressions:
      - key: name
        operator: NotIn
        values:
        - {{ .Release.Namespace }}
      - key: istio-injection
        operator: NotIn
        values:
        - disabled
      - key: istio-env
        operator: DoesNotExist
      - key: istio.io/rev
        operator: DoesNotExist
      {{- else }}
      matchExpressions:
      - key: istio-injection
        operator: In
        values:
          - enabled
      - key: istio.io/rev
        operator: DoesNotExist
      {{- end }}
    {{- if .Values.sidecarInjectorWebhook.objectSelector.enabled }}
    objectSelector:
      {{- if .Values.sidecarInjectorWebhook.objectSelector.autoInject }}
      matchExpressions:
      - key: "sidecar.istio.io/inject"
        operator: NotIn
        values:
        - "false"
      {{- else }}
      matchLabels:
        "sidecar.istio.io/inject": "true"
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Set up another webook that will match istio.io/rev label. If a revision is set, then we will make sure
that we do NOT match istio-injection=enabled. This avoids injecting other revisions. If a revision is NOT
set, we will match istio.io/rev=default. This means we also match a namespace that is (by user error)
labeled with both istio.io/rev=default,istio-injection=enabled.
 */}}
  - name: sidecar-injector.istio.io
    clientConfig:
      service:
        name: istiod{{- if not (eq .Values.revision "") }}-{{ .Values.revision }}{{- end }}
        namespace: {{ .Release.Namespace }}
        path: "/inject"
      caBundle: ""
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
      {{- if ne .Values.revision ""}}
        - key: istio-injection
          operator: DoesNotExist
      {{- end }}
        - key: istio.io/rev
          operator: In
          values:
            - {{ .Values.revision | default "default" }}
{{- end }}
