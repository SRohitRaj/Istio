#!/usr/bin/env bash

# Example script to install - will be replaced by operator or other tools, used for testing and as sample.

set -x
#
# Params:
# - namespace
# - release name (helm and kubectl)
# - config template dir
# - [-t] - show template
#
# Env: IOP_MODE=helm - use helm instead of kubectl
# Defaults to kubectl apply --prune
#
# Namespace will be labeled with the value of ISTIO_ENV (default to istio-control)
function iop() {
    local ns=$1
    shift
    local rel=$1
    shift
    local tmpl=$1
    shift

    # Defaults
    local cfg="-f $IBASE/global.yaml"

    # User overrides
    if [ -f $HOME/.istio-values.yaml ]; then
        cfg="$cfg -f $HOME/.istio-values.yaml"
    fi

    if [ "$HUB" != "" ] ; then
        cfg="$cfg --set global.hub=$HUB"
    fi
    if [ "$TAG" != "" ] ; then
        cfg="$cfg --set global.tag=$TAG"
    fi

    if [ "$1" == "-t" ]; then
        shift
        helm template --namespace $ns -n $rel $tmpl  $cfg $*
    elif [ "$1" == "-d" ]; then
        shift
        kubectl delete --namespace $ns -l release=$ns-$rel $*
    elif [ "$IOP_MODE" == "helm" ] ; then
        echo helm upgrade --wait -i $n $cfg $*
        helm upgrade --namespace $ns --wait -i $rel $tmpl $cfg $*
    else
        # The 'release' tag is used to group related configs.
        # Apply will make sure that any old config with the same tag that is no longer present will
        # be removed. The release MUST be unique across cluster.
        kubectl create  ns $ns > /dev/null  2>&1
        helm template --namespace $ns -n $ns-$rel $tmpl $cfg $* | kubectl apply -n $ns --prune -l release=$ns-$rel -f -
    fi
}

if [ "$1" == "" ] ; then
    echo "iop NAMESPACE COMPONENT CONFIGDIR [-t|-d]"
    echo ""
    echo "Env:"
    echo "  IOP_MODE=helm to install with tiller"
    echo "  HUB, TAG to select a specific hub"
    echo "  $HOME/.istio-values.yaml for user specific settings"
    exit 1
fi

IBASE=${IBASE:-`pwd`}

iop $*

