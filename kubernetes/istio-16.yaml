# GENERATED FILE. Use with Kubernetes 1.6+
# TO UPDATE, modify files in istio-install and run updateVersion.sh
apiVersion: v1
kind: ConfigMap
metadata:
  name: mixer-config
data:
  globalconfig.yml: |-
    subject: "namespace:ns"
    revision: "2022"
    adapters:
      - name: default
        kind: quotas
        impl: memQuota
        params:
      - name: default
        impl: stdioLogger
        params:
          logStream: 0 # STDERR
      - name: prometheus
        kind: metrics
        impl: prometheus
        params:
      - name: default
        impl: denyChecker
    manifests:
      - name: istio-proxy
        revision: "1"
        attributes:
        - name: source.name
          value_type: 1 # STRING
        - name: source.uid
          value_type: 1 # STRING
        - name: source.ip
          value_type: 6 # IP_ADDRESS
        - name: target.name
          value_type: 1 # STRING
        - name: target.uid
          value_type: 1 # STRING
        - name: target.service
          value_type: 1 # STRING
        - name: target.ip
          value_type: 6 # IP_ADDRESS
        - name: response.code
          value_type: 2 # INT64
        - name: response.duration
          value_type: 10 # DURATION

        # DEPRECATED ATTRIBUTES, TO BE REMOVED:
        - name: response.latency    # Use response.duration
          value_type: 10 # DURATION
        - name: response.http.code  # Use response.code
          value_type: 2 # INT64
        - name: source.service      # Use source.name
          value_type: 1 # STRING
    metrics:
    - name: request_count
      kind: 2 # COUNTER
      value: 2 # INT64
      description: request count by source, target, service, and code
      labels:
        source: 1 # STRING
        target: 1 # STRING
        response_code: 2 # INT64
    - name: request_latency
      kind: 2 # COUNTER
      value: 10 # DURATION
      description: request latency by source, target, and service
      labels:
        source: 1 # STRING
        target: 1 # STRING
        response_code: 2 # INT64
    quotas:
    - name: RequestCount
      rate_limit: true
  serviceconfig.yml: |-
    subject: namespace:ns
    revision: "2022"
    rules:
    - selector: true
      aspects:
      - kind: quotas
        params:
          quotas:
          - descriptor_name: RequestCount
            max_amount: 5
            expiration: 1s
      - kind: metrics
        adapter: prometheus
        params:
          metrics:
          - descriptor_name: request_count
            # we want to increment this counter by 1 for each unique (source, target, service, method, response_code) tuple
            value: "1"
            labels:
              source: source.name | source.service | "unknown"
              target: target.service | "unknown"
              response_code: response.code | response.http.code | 200
          - descriptor_name:  request_latency
            value: response.duration | response.latency | "0ms"
            labels:
              source: source.name | source.service | "unknown"
              target: target.service | "unknown"
              response_code: response.code | response.http.code | 200
---
# Mixer
apiVersion: v1
kind: Service
metadata:
  name: istio-mixer
  labels:
    istio: mixer
spec:
  ports:
  - name: tcp
    port: 9091
  - name: prometheus
    port: 42422
  selector:
    istio: mixer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-mixer
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        alpha.istio.io/sidecar: ignore
      labels:
        istio: mixer
    spec:
      containers:
      - name: mixer
        image: docker.io/istio/mixer:2017-04-19-00.29.49
        imagePullPolicy: Always
        ports:
        - containerPort: 9091
        - containerPort: 9094
        - containerPort: 42422
        args:
          - --globalConfigFile=/etc/opt/mixer/globalconfig.yml
          - --serviceConfigFile=/etc/opt/mixer/serviceconfig.yml
          - --logtostderr
          - -v
          - "3"
        volumeMounts:
          - mountPath: /etc/opt/mixer
            name: config
      volumes:
        - name: config
          configMap:
            name: mixer-config
---

# Permissions and roles for istio
# To debug: start the cluster with -vmodule=rbac,3 to enable verbose logging on RBAC DENY
# Also helps to enable logging on apiserver 'wrap' to see the URLs.
# Each RBAC deny needs to be mapped into a rule for the role.
# If using minikube, start with '--extra-config=apiserver.Authorization.Mode=RBAC'
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-manager
rules:
- apiGroups: ["istio.io"]
  resources: ["istioconfigs", "istioconfigs.istio.io"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["thirdpartyresources", "thirdpartyresources.extensions", "ingresses"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps", "endpoints", "pods", "services"]
  verbs: ["get", "watch", "list"]
---
# Permissions for the sidecar proxy.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-sidecar
rules:
- apiGroups: ["istio.io"]
  resources: ["istioconfigs"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["extensions"]
  resources: ["thirdpartyresources"]
  verbs: ["get", "watch", "list"]
- apiGroups: [""]
  resources: ["configmaps", "pods", "endpoints", "services"]
  verbs: ["get", "watch", "list"]
---
# Grant permissions to the Manager/discovery.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-manager-admin-role-binding
subjects:
- kind: ServiceAccount
  name: istio-manager-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: istio-manager
  apiGroup: rbac.authorization.k8s.io
---
# Grant permissions to the Ingress controller.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-ingress-admin-role-binding
subjects:
- kind: ServiceAccount
  name: istio-ingress-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: istio-manager
  apiGroup: rbac.authorization.k8s.io
---
# Grant permissions to the sidecar.
# TEMPORARY: the istioctl should generate a separate service account for the proxy, and permission
# granted only to that account !
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-sidecar-role-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: istio-sidecar
  apiGroup: rbac.authorization.k8s.io
---
################################
# Istio ingress controller
################################
apiVersion: v1
kind: Service
metadata:
  name: istio-ingress-controller
  labels:
    infra: istio-ingress-controller
spec:
  type: LoadBalancer
  ports:
  - port: 80
#   nodePort: 32000
    name: http
  selector:
    infra: istio-ingress-controller
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ingress-service-account
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-ingress-controller
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        alpha.istio.io/sidecar: ignore
      labels:
        infra: istio-ingress-controller
    spec:
      serviceAccountName: istio-ingress-service-account
      containers:
      - name: istio-ingress-controller
        image: docker.io/istio/proxy:2017-04-24-23.54.11
        args: ["proxy", "ingress", "-v", "2"]
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
---

