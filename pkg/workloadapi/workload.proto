// Copyright Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;
option go_package="pkg/workloadapi";

message Workload {
  // Name represents the name for the workload. This may be elided as an optimization
  string name = 1;
  // Namespace represents the namespace for the workload. This may be elided as an optimization
  string namespace = 8;

  string canonical_name = 14;
  string canonical_revision = 15;
  string workload_type = 16;
  string workload_name = 17;

  // Address represents the IPv4/IPv6 address for the workload.
  // This should be globally unique.
  // This should not have a port number.
  // TODO: Add network as discriminator
  string address = 2;

  // The SPIFFE identity of the workload.
  string identity = 3;

  // The protocol that should be used to connect to this workload.
  Protocol protocol = 4;

  // The address this workload can be reached at.
  // If not set, address should be reached directly
  string gateway_address = 5;
  string remote_proxy = 11;
  // Temporary solution:
  // Set to disable node -> node direct calling
  bool native_hbone = 13;

  // Virtual IPs defines a set of virtual IP addresses the workload can be reached at,
  map<string, PortList> virtual_ips = 6;

  // Workload UID.
  string uid = 7;

  // If true, mTLS will be required
  bool enforce = 9;

  // Node the workload runs on
  string node = 10;

  Authorization rbac = 12;
}

message Authorization {
  bool enforceTLS = 1;
  repeated Policy allow = 2;
  repeated Policy deny = 3;
}

message Policy {
  repeated AuthRule rule = 1;
  repeated AuthCondition when = 2;
}

message AuthRule {
  bool invert = 1;
  // Rules
  string identity = 2;
  string namespace = 3;
}

message AuthCondition {
  bool invert = 1;
  uint32 port = 2;
}

message PortList {
  repeated Port ports = 1;
}

message Port {
  uint32 service_port = 1;
  uint32 target_port = 2;
}

enum Protocol {
  DIRECT = 0;
  HTTP2CONNECT = 1;
}
