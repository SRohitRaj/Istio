// Copyright 2018 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;

// A simple service used for testing various protocols.
service ProtocolTestService {
    // Exchanges a request/response with the service.
    rpc Exchange(ExchangeRequest) returns (ExchangeResponse);

    // Sends a control request to the service, instructing it to perform a number of exchanges with another service.
    rpc Control(ControlRequest) returns (ControlResponse);
}

// A header used by protocols that support headers (e.g. HTTP, GRPC).
message Header {
    string key = 1;
    string value = 2;
}

enum Protocol {
    HTTP = 0;
    HTTP2 = 1;
    GRPC = 2;
    WEBSOCKET = 3;
    TCP = 4;
}

message Transport {
    Protocol protocol = 1;
    bool secure = 2;
}

message ExchangeRequest {
    // Unique identifier used to mark this exchange. The response will use the same identifier.
    string request_id = 1;
    // The message sent in the request.
    string message = 2;
    // The requested size of the message field in the response.
    int64 response_message_size = 3;
}

message ExchangeResponse {
    // The request ID received from the ExchangeRequest.
    string request_id = 1;
    // The version of the service.
    string service_version = 2;
    // The transport over which the request was received.
    Transport transport = 3;
    // The port on which the request was received.
    int32 port = 4;
    // The response message. The size of this field is controlled by the response_message_size in the request.
    string message = 5;
    // Headers received in the request. Only applies to protocols supporting headers.
    repeated Header received_headers = 6;
    // Headers sent in the response. Only applies to protocols supporting headers.
    repeated Header sent_headers = 7;

    // TODO(nmittler): Do we care about these values, given clock scew.
    int64 request_received_timestamp_micros = 8;
    int64 response_sent_timestamp_micros = 9;
}

// Instructs the service to perform a number of exchanges with another service.
message ControlRequest {
    // The number of exchanges to perform.
    int32 num_exchanges = 1;
    // The transport to be used for the exchanges.
    Transport transport = 2;
    // The url of the target service.
    string url = 3;
    // The headers to be sent in the exchanges.
    repeated Header headers = 4;
    // The message to be sent in the exchanges.
    string message = 5;
    // The requested size of the message field in the responses.
    int64 response_message_size = 6;
}

// Provides a summary of the requested exchanges.
message ControlResponse {
    message ExchangeSummary {
        ControlRequest request = 1;
        int32 response_status = 2;
        repeated Header request_headers_sent = 3;
        repeated Header request_headers_received = 4;
        repeated Header response_headers_sent = 5;
        repeated Header response_headers_received = 6;
        int64 response_payload_size = 7;
        int64 request_sent_timestamp_micros = 8;
        int64 response_received_timestamp_micros = 9;

        // TODO(nmittler): Do we care about these values, given clock scew.
        int64 request_received_timestamp_micros = 10;
        int64 response_sent_timestamp_micros = 11;
    }

    repeated ExchangeSummary exchange_summaries = 1;
}
