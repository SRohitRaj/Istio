---

# s3, git, time, github-release, registry-image,
# pool - serialize access to external systems
# git - can also push
resources:
  - name: citadel-image
    type: docker-image
    source:
      repository: gcr.io/istio-release/citadel
      tag: release-1.1-latest-daily

  - name: istio-installer
    type: git
    source:
      uri: "https://github.com/istio-ecosystem/istio-installer"
  - name: istio-istio
    type: git
    source:
      uri: "https://github.com/istio/istio"
      branch: release-1.1
      
jobs:
  - name: install
    serial_groups: [ cluster ]
    plan:
    - get: citadel-image
      trigger: true
    - get: istio-installer
      trigger: true
    - task: install-crds
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            echo "((KUBECONFIG))" > /tmp/kubeconfig.yaml
            export KUBECONFIG=/tmp/kubeconfig.yaml
            src/github.com/istio-ecosystem/istio-installer/bin/install.sh install_crds
    - task: install-system
      config:
        platform: linux
        params: &install-params
          TAG: 1.1.0
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            echo "((KUBECONFIG))" > /tmp/kubeconfig.yaml
            export KUBECONFIG=/tmp/kubeconfig.yaml
            src/github.com/istio-ecosystem/istio-installer/bin/install.sh install_system
    
    - task: install-control
      config:
        platform: linux
        params: *install-params
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            echo "((KUBECONFIG))" > /tmp/kubeconfig.yaml
            export KUBECONFIG=/tmp/kubeconfig.yaml
            src/github.com/istio-ecosystem/istio-installer/bin/install.sh install_control

    - task: install-ingress
      config:
        platform: linux
        params: *install-params
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            echo "((KUBECONFIG))" > /tmp/kubeconfig.yaml
            export KUBECONFIG=/tmp/kubeconfig.yaml
            src/github.com/istio-ecosystem/istio-installer/bin/install.sh install_ingress

    - task: install-telemetry
      config:
        platform: linux
        params: *install-params
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            echo "((KUBECONFIG))" > /tmp/kubeconfig.yaml
            export KUBECONFIG=/tmp/kubeconfig.yaml
            src/github.com/istio-ecosystem/istio-installer/bin/install.sh install_telemetry

  - name: test
    serial_groups: [ cluster ]
    plan:
    - get: istio-installer
      passed: [ install ]
      trigger: true
    - get: istio-istio
      trigger: false
    - get: citadel-image
      trigger: true
      passed: [install]
    - task: install-bookinfo
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-istio
            path: src/github.com/istio/istio
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            echo "((KUBECONFIG))" > /tmp/kubeconfig.yaml
            export KUBECONFIG=/tmp/kubeconfig.yaml
            src/github.com/istio-ecosystem/istio-installer/bin/test.sh --skip-cleanup src/github.com/istio/istio/

  - name: update
    serial_groups: [ cluster ]
    plan:
    - get: citadel-image
      trigger: true
      passed: [test]
    - get: istio-installer
      passed: [ test ]
      trigger: true
    - get: istio-istio
      trigger: false
    - task: update-system
      config:
        platform: linux
        params: &update-params
          TAG: master-latest-daily
          HUB: gcr.io/istio-release
          SUFFIX: master
          ISTIO_VERSION: 1.2
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x
            
            .concourse/connection-test.sh &
            PID=$!

            git apply  --ignore-space-change --ignore-whitespace  - <<PATCH
            diff --git a/security/citadel/templates/deployment.yaml b/security/citadel/templates/deployment.yaml
            index 2639959..6a32ed0 100644
            --- a/security/citadel/templates/deployment.yaml
            +++ b/security/citadel/templates/deployment.yaml
            @@ -35,5 +35,9 @@ spec:
                       args:
                         - --append-dns-names=true
                         - --grpc-port=8060
            +          {{- if and (.Values.global.istioVersion) (semverCompare "<1.2" .Values.global.istioVersion) }}
                         - --grpc-hostname=citadel
            +          {{- else}}
            +            - --grpc-host-identities=citadel
            +          {{- end}}
                         - --citadel-storage-namespace={{ .Release.Namespace }}
            PATCH

            echo "updateing citadel.."
            bin/iop istio-system istio-system-security $IBASE/security/citadel/ --set global.istioVersion=$ISTIO_VERSION
            
            kubectl get deployments -n istio-system
            kubectl rollout status -n istio-system deployment istio-citadel11 --timeout=2m
            kubectl get deployments -n istio-system
            kubectl get pod -n istio-system
            touch stop_connection_test
            wait $PID

    - task: update-control
      config:
        platform: linux
        params: *update-params
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            kubectl delete namespace istio-control-$SUFFIX --wait --ignore-not-found

            .concourse/connection-test.sh &
            PID=$!
            echo "updateing galley.."
            bin/iop istio-control-$SUFFIX istio-config $IBASE/istio-control/istio-config --set configValidation=true --set global.istioNamespace=istio-control-$SUFFIX # TODO: use --set global.istioVersion=$ISTIO_VERSION as soon as https://github.com/istio-ecosystem/istio-installer/pull/17 is merged
            echo "updateing pilot.."
            bin/iop istio-control-$SUFFIX istio-discovery $IBASE/istio-control/istio-discovery --set global.istioNamespace=istio-control-$SUFFIX --set global.configNamespace=istio-control-$SUFFIX --set global.istioVersion=$ISTIO_VERSION
            echo "updateing auto-injector.."
            bin/iop istio-control-$SUFFIX istio-autoinject $IBASE/istio-control/istio-autoinject --set global.istioNamespace=istio-control-$SUFFIX --set global.istioVersion=$ISTIO_VERSION

            kubectl get deployments -n istio-control-$SUFFIX
            kubectl wait deployments istio-galley istio-pilot istio-sidecar-injector -n istio-control-$SUFFIX --for=condition=available --timeout=5m
            kubectl get deployments -n istio-control-$SUFFIX
            kubectl get pod -n istio-control-$SUFFIX
            touch stop_connection_test
            wait $PID 
    - task: update-ingress
      config:
        platform: linux
        params: *update-params
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-istio
            path: src/github.com/istio/istio
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            kubectl patch deployment -n istio-ingress ingressgateway --patch '{"spec": {"strategy": {"rollingUpdate": {"maxSurge": 1,"maxUnavailable": 0},"type": "RollingUpdate"}}}'

            echo "updateing ingress-pilot.."
            bin/iop istio-ingress istio-discovery $IBASE/istio-control/istio-discovery --set global.istioNamespace=istio-control-$SUFFIX --set global.configNamespace=istio-control-$SUFFIX --set global.istioVersion=$ISTIO_VERSION
            echo "updateing ingress.."
            bin/iop istio-ingress istio-ingress $IBASE/gateways/istio-ingress  --set global.istioNamespace=istio-control-$SUFFIX --set global.istioVersion=$ISTIO_VERSION

            kubectl get deployments -n istio-ingress
            kubectl rollout status deployment --timeout=5m -n istio-ingress istio-pilot
            kubectl rollout status deployment --timeout=2m -n istio-ingress ingressgateway
            kubectl get deployments -n istio-ingress
            kubectl get pod -n istio-ingress
            bin/test.sh --skip-setup --skip-cleanup ../../istio/istio/

    - task: update-telemetry
      config:
        platform: linux
        params: *update-params
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            .concourse/connection-test.sh &
            PID=$!

            echo "updateing istio-grafana.."
            bin/iop istio-telemetry istio-grafana $IBASE/istio-telemetry/grafana/ --set global.istioNamespace=istio-control-$SUFFIX --set global.istioVersion=$ISTIO_VERSION
            echo "updateing istio-mixer.."
            bin/iop istio-telemetry istio-mixer $IBASE/istio-telemetry/mixer-telemetry/ --set global.istioNamespace=istio-control-$SUFFIX --set global.istioVersion=$ISTIO_VERSION
            echo "updateing istio-prometheus."
            bin/iop istio-telemetry istio-prometheus $IBASE/istio-telemetry/prometheus/ --set global.istioNamespace=istio-control-$SUFFIX --set global.istioVersion=$ISTIO_VERSION
            kubectl get deployments -n istio-ingress
            kubectl rollout status deployment --timeout=2m -n istio-ingress ingressgateway
            kubectl rollout status deployment --timeout=5m -n istio-ingress istio-pilot
            kubectl get deployments -n istio-ingress
            kubectl get pod -n istio-ingress
            touch stop_connection_test
            wait $PID

    - task: remove-old-installation
      config:
        platform: linux
        params: *update-params
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            cd src/github.com/istio-ecosystem/istio-installer/
            export IBASE=$(pwd)
            echo "((KUBECONFIG))" > kubeconfig.yaml
            export KUBECONFIG=$IBASE/kubeconfig.yaml
            set -x

            .concourse/connection-test.sh &
            PID=$!

            kubectl label namespaces default --overwrite istio-env=istio-control-$SUFFIX
            kubectl patch deployment productpage-v1 --patch '{"spec": {"strategy": {"rollingUpdate": {"maxSurge": 1,"maxUnavailable": 0},"type": "RollingUpdate"}}}'
            kubectl set env --all deployment --env="LAST_MANUAL_RESTART=$(date +%s)" --namespace=default

            kubectl delete namespace istio-control --wait --ignore-not-found
            sleep 10

            touch stop_connection_test
            wait $PID
  
  - name: test-after-update
    serial_groups: [ cluster ]
    plan:
    - get: citadel-image
      trigger: true
      passed: [update]
    - get: istio-installer
      passed: [ update ]
      trigger: true
    - get: istio-istio
      trigger: false
    - task: install-bookinfo
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: gcr.io/peripli/istio-base
        inputs:
          - name: istio-istio
            path: src/github.com/istio/istio
          - name: istio-installer
            path: src/github.com/istio-ecosystem/istio-installer
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            echo "((KUBECONFIG))" > /tmp/kubeconfig.yaml
            export KUBECONFIG=/tmp/kubeconfig.yaml
            src/github.com/istio-ecosystem/istio-installer/bin/test.sh --skip-setup src/github.com/istio/istio/



