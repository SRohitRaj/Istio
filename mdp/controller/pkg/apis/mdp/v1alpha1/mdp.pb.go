// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apis/mdp/v1alpha1/mdp.proto

package v1alpha1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MDPStatus_Status int32

const (
	MDPStatus_UNKNOWN     MDPStatus_Status = 0
	MDPStatus_RECONCILING MDPStatus_Status = 1
	MDPStatus_READY       MDPStatus_Status = 2
	MDPStatus_ERROR       MDPStatus_Status = 3
)

var MDPStatus_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "RECONCILING",
	2: "READY",
	3: "ERROR",
}

var MDPStatus_Status_value = map[string]int32{
	"UNKNOWN":     0,
	"RECONCILING": 1,
	"READY":       2,
	"ERROR":       3,
}

func (x MDPStatus_Status) String() string {
	return proto.EnumName(MDPStatus_Status_name, int32(x))
}

func (MDPStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a088541d02ba6d31, []int{1, 0}
}

type MDPConfigSpec struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	McpVersion           string   `protobuf:"bytes,5,opt,name=mcp_version,json=mcpVersion,proto3" json:"mcp_version,omitempty"`
	OldProxyVersion      string   `protobuf:"bytes,10,opt,name=oldProxyVersion,proto3" json:"oldProxyVersion,omitempty"`
	NewProxyVersion      string   `protobuf:"bytes,11,opt,name=newProxyVersion,proto3" json:"newProxyVersion,omitempty"`
	NewProxyVersionPct   uint32   `protobuf:"varint,12,opt,name=newProxyVersionPct,proto3" json:"newProxyVersionPct,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MDPConfigSpec) Reset()         { *m = MDPConfigSpec{} }
func (m *MDPConfigSpec) String() string { return proto.CompactTextString(m) }
func (*MDPConfigSpec) ProtoMessage()    {}
func (*MDPConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a088541d02ba6d31, []int{0}
}

func (m *MDPConfigSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MDPConfigSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MDPConfigSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MDPConfigSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDPConfigSpec.Merge(m, src)
}

func (m *MDPConfigSpec) XXX_Size() int {
	return m.Size()
}

func (m *MDPConfigSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MDPConfigSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MDPConfigSpec proto.InternalMessageInfo

func (m *MDPConfigSpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MDPConfigSpec) GetMcpVersion() string {
	if m != nil {
		return m.McpVersion
	}
	return ""
}

func (m *MDPConfigSpec) GetOldProxyVersion() string {
	if m != nil {
		return m.OldProxyVersion
	}
	return ""
}

func (m *MDPConfigSpec) GetNewProxyVersion() string {
	if m != nil {
		return m.NewProxyVersion
	}
	return ""
}

func (m *MDPConfigSpec) GetNewProxyVersionPct() uint32 {
	if m != nil {
		return m.NewProxyVersionPct
	}
	return 0
}

type MDPStatus struct {
	Status               MDPStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=v1alpha1.MDPStatus_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MDPStatus) Reset()         { *m = MDPStatus{} }
func (m *MDPStatus) String() string { return proto.CompactTextString(m) }
func (*MDPStatus) ProtoMessage()    {}
func (*MDPStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a088541d02ba6d31, []int{1}
}

func (m *MDPStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MDPStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MDPStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MDPStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDPStatus.Merge(m, src)
}

func (m *MDPStatus) XXX_Size() int {
	return m.Size()
}

func (m *MDPStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MDPStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MDPStatus proto.InternalMessageInfo

func (m *MDPStatus) GetStatus() MDPStatus_Status {
	if m != nil {
		return m.Status
	}
	return MDPStatus_UNKNOWN
}

func init() {
	proto.RegisterEnum("v1alpha1.MDPStatus_Status", MDPStatus_Status_name, MDPStatus_Status_value)
	proto.RegisterType((*MDPConfigSpec)(nil), "v1alpha1.MDPConfigSpec")
	proto.RegisterType((*MDPStatus)(nil), "v1alpha1.MDPStatus")
}

func init() { proto.RegisterFile("pkg/apis/mdp/v1alpha1/mdp.proto", fileDescriptor_a088541d02ba6d31) }

var fileDescriptor_a088541d02ba6d31 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0xc8, 0x4e, 0xd7,
	0x4f, 0x2c, 0xc8, 0x2c, 0xd6, 0xcf, 0x4d, 0x29, 0xd0, 0x2f, 0x33, 0x4c, 0xcc, 0x29, 0xc8, 0x48,
	0x34, 0x04, 0x71, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60, 0x62, 0x4a, 0xe7, 0x18,
	0xb9, 0x78, 0x7d, 0x5d, 0x02, 0x9c, 0xf3, 0xf3, 0xd2, 0x32, 0xd3, 0x83, 0x0b, 0x52, 0x93, 0x85,
	0x24, 0xb8, 0xd8, 0x53, 0xf3, 0x12, 0x93, 0x72, 0x52, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x82, 0x60, 0x5c, 0x21, 0x79, 0x2e, 0xee, 0xdc, 0xe4, 0x82, 0xf8, 0xb2, 0xd4, 0xa2, 0xe2, 0xcc,
	0xfc, 0x3c, 0x09, 0x56, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xae, 0xdc, 0xe4, 0x82, 0x30, 0x88, 0x88,
	0x90, 0x06, 0x17, 0x7f, 0x7e, 0x4e, 0x4a, 0x40, 0x51, 0x7e, 0x45, 0x25, 0x54, 0x48, 0x82, 0x0b,
	0xac, 0x08, 0x5d, 0x18, 0xa4, 0x32, 0x2f, 0xb5, 0x1c, 0x45, 0x25, 0x37, 0x44, 0x25, 0x9a, 0xb0,
	0x90, 0x1e, 0x97, 0x10, 0x9a, 0x50, 0x40, 0x72, 0x89, 0x04, 0x8f, 0x02, 0xa3, 0x06, 0x6f, 0x10,
	0x16, 0x19, 0xa5, 0x5a, 0x2e, 0x4e, 0x5f, 0x97, 0x80, 0xe0, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x21,
	0x23, 0x2e, 0xb6, 0x62, 0x30, 0x0b, 0xec, 0x15, 0x3e, 0x23, 0x29, 0x3d, 0x98, 0xc7, 0xf5, 0xe0,
	0x8a, 0xf4, 0x20, 0x54, 0x10, 0x54, 0xa5, 0x92, 0x0d, 0x17, 0x1b, 0x54, 0x37, 0x37, 0x17, 0x7b,
	0xa8, 0x9f, 0xb7, 0x9f, 0x7f, 0xb8, 0x9f, 0x00, 0x83, 0x10, 0x3f, 0x17, 0x77, 0x90, 0xab, 0xb3,
	0xbf, 0x9f, 0xb3, 0xa7, 0x8f, 0xa7, 0x9f, 0xbb, 0x00, 0xa3, 0x10, 0x27, 0x17, 0x6b, 0x90, 0xab,
	0xa3, 0x4b, 0xa4, 0x00, 0x13, 0x88, 0xe9, 0x1a, 0x14, 0xe4, 0x1f, 0x24, 0xc0, 0xec, 0x24, 0x76,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x46, 0xc1, 0xc3, 0x39,
	0x89, 0x0d, 0x1c, 0xf0, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x66, 0x2c, 0x88, 0x9b,
	0x01, 0x00, 0x00,
}

func (m *MDPConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MDPConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MDPConfigSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewProxyVersionPct != 0 {
		i = encodeVarintMdp(dAtA, i, uint64(m.NewProxyVersionPct))
		i--
		dAtA[i] = 0x60
	}
	if len(m.NewProxyVersion) > 0 {
		i -= len(m.NewProxyVersion)
		copy(dAtA[i:], m.NewProxyVersion)
		i = encodeVarintMdp(dAtA, i, uint64(len(m.NewProxyVersion)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OldProxyVersion) > 0 {
		i -= len(m.OldProxyVersion)
		copy(dAtA[i:], m.OldProxyVersion)
		i = encodeVarintMdp(dAtA, i, uint64(len(m.OldProxyVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.McpVersion) > 0 {
		i -= len(m.McpVersion)
		copy(dAtA[i:], m.McpVersion)
		i = encodeVarintMdp(dAtA, i, uint64(len(m.McpVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MDPStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MDPStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MDPStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintMdp(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMdp(dAtA []byte, offset int, v uint64) int {
	offset -= sovMdp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MDPConfigSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.McpVersion)
	if l > 0 {
		n += 1 + l + sovMdp(uint64(l))
	}
	l = len(m.OldProxyVersion)
	if l > 0 {
		n += 1 + l + sovMdp(uint64(l))
	}
	l = len(m.NewProxyVersion)
	if l > 0 {
		n += 1 + l + sovMdp(uint64(l))
	}
	if m.NewProxyVersionPct != 0 {
		n += 1 + sovMdp(uint64(m.NewProxyVersionPct))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MDPStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovMdp(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMdp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozMdp(x uint64) (n int) {
	return sovMdp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MDPConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MDPConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MDPConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McpVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McpVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldProxyVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldProxyVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewProxyVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewProxyVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewProxyVersionPct", wireType)
			}
			m.NewProxyVersionPct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewProxyVersionPct |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMdp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MDPStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MDPStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MDPStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MDPStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMdp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipMdp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMdp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMdp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMdp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMdp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMdp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMdp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMdp = fmt.Errorf("proto: unexpected end of group")
)
