diff --git a/mixer/pkg/il/testing/tests.go b/mixer/pkg/il/testing/tests.go
index 1375fb8a..000dc139 100644
--- a/mixer/pkg/il/testing/tests.go
+++ b/mixer/pkg/il/testing/tests.go
@@ -22,7 +22,7 @@ import (
 	"time"
 
 	pb "istio.io/api/mixer/v1/config"
-	descriptor "istio.io/api/mixer/v1/config/descriptor"
+	"istio.io/api/mixer/v1/config/descriptor"
 	"istio.io/istio/mixer/pkg/expr"
 )
 
@@ -510,6 +510,38 @@ end`,
 		AstErr: "could not convert '242233' to TIMESTAMP. expected format: '" + time.RFC3339 + "'",
 		conf:   exprEvalAttrs,
 	},
+	{
+		E:    "emptyStringMap()",
+		Type: descriptor.STRING_MAP,
+		IL: `
+fn eval() interface
+  call emptyStringMap
+  ret
+end
+`,
+		R:          map[string]string{},
+		I:          map[string]interface{}{},
+		Referenced: []string{},
+		conf:       exprEvalAttrs,
+	},
+	// TODO: enable when elvis operator is handled correctly for extern Fns on
+	// the left-hand side
+	//{
+	//	E:          `emptyStringMap() | source.labels`,
+	//	Type:       descriptor.STRING_MAP,
+	//	I:          map[string]interface{}{"source.labels": map[string]string{"test": "foo"}},
+	//	R:          emptyMap,
+	//	Referenced: []string{"source.labels"},
+	//	conf:       exprEvalAttrs,
+	//},
+	{
+		E:          `source.labels | emptyStringMap()`,
+		Type:       descriptor.STRING_MAP,
+		I:          map[string]interface{}{"source.labels": map[string]string{"test": "foo"}},
+		R:          NewStringMap("source.labels", map[string]string{"test": "foo"}, NewFakeBag(nil)),
+		Referenced: []string{"source.labels"},
+		conf:       exprEvalAttrs,
+	},
 
 	// Tests from expr/eval_test.go TestCEXLEval
 	{
@@ -2347,7 +2379,7 @@ func (t *TestInfo) CheckEvaluationResult(r interface{}, err error) error {
 	}
 
 	if !AreEqual(t.R, r) {
-		return fmt.Errorf("evaluation result mismatch: '%v' != '%v'", r, t.R)
+		return fmt.Errorf("evaluation result mismatch: '%#v' != '%v'", r, t.R)
 	}
 
 	return nil
@@ -2420,6 +2452,12 @@ var exprEvalAttrs = map[string]*pb.AttributeManifest_AttributeInfo{
 	"servicename": {
 		ValueType: descriptor.STRING,
 	},
+	"source.labels": {
+		ValueType: descriptor.STRING_MAP,
+	},
+	"destination.labels": {
+		ValueType: descriptor.STRING_MAP,
+	},
 }
 
 var defaultAttrs = map[string]*pb.AttributeManifest_AttributeInfo{
diff --git a/mixer/pkg/il/testing/util.go b/mixer/pkg/il/testing/util.go
index 86af0eed..3c48cb0d 100644
--- a/mixer/pkg/il/testing/util.go
+++ b/mixer/pkg/il/testing/util.go
@@ -16,6 +16,7 @@ package ilt
 
 import (
 	"net"
+	"reflect"
 )
 
 // AreEqual checks for equality of given values. It handles comparison of []byte as a special case.
@@ -28,5 +29,13 @@ func AreEqual(e interface{}, a interface{}) bool {
 		return false
 	}
 
-	return a == e
+	return reflect.DeepEqual(a, e)
+
+	//if em, ok := e.(map[string]string); ok {
+	//	if am, ok := a.(map[string]string); ok {
+	//		return reflect.DeepEqual(em, am)
+	//	}
+	//}
+
+	// return a == e
 }
diff --git a/mixer/tools/codegen/pkg/bootstrapgen/template/bootstrapTemplate.go b/mixer/tools/codegen/pkg/bootstrapgen/template/bootstrapTemplate.go
index 0e202d3f..e0062cef 100644
--- a/mixer/tools/codegen/pkg/bootstrapgen/template/bootstrapTemplate.go
+++ b/mixer/tools/codegen/pkg/bootstrapgen/template/bootstrapTemplate.go
@@ -544,7 +544,7 @@ var (
             outBag := newWrapperAttrBag(
                 func(name string) (value interface{}, found bool) {
                     field := strings.TrimPrefix(name, fullOutName)
-                    if len(field) != len(name) {
+                    if len(field) != len(name) && out.WasSet(field) {
                         switch field {
                             {{range .OutputTemplateMessage.Fields}}
                             case "{{.ProtoName}}":
diff --git a/mixer/tools/codegen/pkg/bootstrapgen/testdata/template.gen.go.golden b/mixer/tools/codegen/pkg/bootstrapgen/testdata/template.gen.go.golden
index 141192ba..bf8f70b6 100644
--- a/mixer/tools/codegen/pkg/bootstrapgen/testdata/template.gen.go.golden
+++ b/mixer/tools/codegen/pkg/bootstrapgen/testdata/template.gen.go.golden
@@ -1034,7 +1034,7 @@ var (
 				outBag := newWrapperAttrBag(
 					func(name string) (value interface{}, found bool) {
 						field := strings.TrimPrefix(name, fullOutName)
-						if len(field) != len(name) {
+						if len(field) != len(name) && out.WasSet(field) {
 							switch field {
 
 							case "int64Primitive":
