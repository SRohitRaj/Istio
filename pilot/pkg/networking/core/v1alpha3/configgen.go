// Copyright 2018 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha3

import (
	xdsapi "github.com/envoyproxy/go-control-plane/envoy/api/v2"

	"istio.io/istio/pilot/pkg/model"
	"istio.io/istio/pilot/pkg/networking/plugin"
)

type ConfigGeneratorImpl struct {
	// List of plugins that modify code generated by this config generator
	Plugins []plugin.Plugin
	// List of outbound clusters
	// Must be rebuilt for each push epoch
	PrecomputedOutboundClusters  []*xdsapi.Cluster
	PrecomputedOutboundListeners []*xdsapi.Listener
	PrecomputedOutboundRoutes    map[string]*xdsapi.RouteConfiguration
}

func NewConfigGenerator(plugins []plugin.Plugin) *ConfigGeneratorImpl {
	return &ConfigGeneratorImpl{
		Plugins: plugins,
	}
}

// TODO: Customize this such that its called per config namespace by the caller.
func (configgen *ConfigGeneratorImpl) BuildSharedPushState(env *model.Environment, push *model.PushContext) error {
	// Create a fake node for config gen purposes
	// Set the node's metadata appropriately
	// TODO: This is a temp hack to hardcode the proxy version to 1.1
	// Ideally we need to run this code for each proxy version we support because
	// the networking code builds configs according to the version of envoy on the data plane.
	// And with introduction of configScopes, we need to build it for each namespace as well.
	node := &model.Proxy{
		Type: model.Sidecar,
		Metadata: map[string]string{
			"ISTIO_PROXY_VERSION": "1.1.0",
		},
	}
	var rdsRoutes []string

	configgen.PrecomputedOutboundClusters = configgen.buildOutboundClusters(env, nil, push)
	configgen.PrecomputedOutboundRoutes = make(map[string]*xdsapi.RouteConfiguration)

	// Compute all outbound listeners and also the associated RDS routes.
	if env.Mesh.ProxyListenPort > 0 {
		configgen.PrecomputedOutboundListeners, rdsRoutes = configgen.buildSidecarOutboundListeners(env, node, push, nil)
		for _, r := range rdsRoutes {
			configgen.PrecomputedOutboundRoutes[r] = configgen.buildSidecarOutboundHTTPRouteConfig(env, node, push, nil, r)
		}
	}

	// Compute the outbound listener for HTTP Proxy port as well as its associated RDS route
	if env.Mesh.ProxyHttpPort > 0 {
		configgen.PrecomputedOutboundListeners = append(configgen.PrecomputedOutboundListeners,
			configgen.buildSidecarOutboundHTTPProxyListener(env, node, push, nil))
		// Add another RDS for HTTP proxy
		configgen.PrecomputedOutboundRoutes[RDSHttpProxy] = configgen.buildSidecarOutboundHTTPRouteConfig(env, node, push, nil, RDSHttpProxy)
	}

	return nil
}

func (configgen *ConfigGeneratorImpl) CanUsePrecomputedCDS(proxy *model.Proxy) bool {
	networkView := model.GetNetworkView(proxy)
	// If we have only more than one network view for the proxy, then recompute CDS.
	// Because, by default, we cache the CDS output for proxies in the UnnamedNetwork only.
	if len(networkView) > 1 {
		return false
	}

	return networkView[model.UnnamedNetwork]
}
